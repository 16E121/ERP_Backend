{"version":3,"file":"static/js/4352.80bf5dd1.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/requiredStar.jsx","Components/tablecolumn.js","Pages/Sales/SalesReportComponent/newInvoiceTemplate.jsx","Pages/Sales/convertedStatus.js"],"sourcesContent":["import React, { Fragment, useRef, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton, Button } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {boolean} [props.PDFPrintOption]\r\n * @param {boolean} [props.ExcelPrintOption]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    } \r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({...o, Sno: i + 1}))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(false);\r\n    const tableHeight = showFullHeight ? ' max-content ' : tableMaxHeight;\r\n    const printRef = useRef(null);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                    column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                                )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                            column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                        )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex align-items-center flex-wrap mb-2\">\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0 ps-3'>{title}</h6>}\r\n                {PDFPrintOption && (\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='primary'\r\n                        className='me-2'\r\n                        // onClick={handlePrint}\r\n                        onClick={() => generatePDF(dataArray, columns)}\r\n                        disabled={isEqualNumber(dataArray?.length, 0)}\r\n                        startIcon={<Download />}\r\n                    >Download PDF</Button>\r\n                )}\r\n                {ExcelPrintOption && (\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='success'\r\n                        className='me-2'\r\n                        onClick={() => exportToExcel(dataArray, columns)}\r\n                        disabled={isEqualNumber(dataArray?.length, 0)}\r\n                        startIcon={<Download />}\r\n                    >Download Excel</Button>\r\n                )}\r\n                <div>\r\n                    <label className=\"form-check-label p-1 pe-2\" htmlFor=\"fullHeight\">Max Height</label>\r\n                    <input\r\n                        className=\"form-check-input shadow-none\"\r\n                        style={{ padding: '0.7em' }}\r\n                        type=\"checkbox\"\r\n                        id=\"fullHeight\"\r\n                        checked={showFullHeight}\r\n                        onChange={e => setShowFullHeight(e.target.checked)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableHeight }} ref={printRef}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n};\r\n\r\n\r\nexport default FilterableTable;","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\nimport SMT_LOGO from './smt.png';\n\nexport const customTableStyles = {\n    table: {\n        style: {\n            width: 'auto',\n            backgroundColor: 'transparent',\n            // borderRadius: '5px',\n        }\n    },\n    rows: {\n        style: {\n            backgroundColor: 'transparent',\n        },\n    },\n    headCells: {\n        style: {\n            backgroundColor: '#6b9080f8',\n            color: 'white',\n            fontSize: '14px',\n            // borderRadius: '5px',\n        },\n    },\n};\n\nexport const customSelectStyles = {\n    control: (provided, state) => ({\n        ...provided,\n        height: '45px',\n        background: 'rgba(255, 255, 255, 0.322)'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n\nexport const customSelectStyles2 = {\n    control: (provided, state) => ({\n        ...provided,\n        background: 'transparent',\n        border: 'none',\n        color: 'rgba(255, 255, 255, 0.322)',\n        // minWidth: '160px'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        color: 'black',\n        zIndex: 9999,\n    }),\n};\n\nexport const MainMenu = [\n    {\n        id: 1,\n        headname: 'Menu ID',\n        variant: 'head',\n        align: 'left',\n        width: 100\n    },\n    {\n        id: 2,\n        headname: 'MenuName',\n    },\n    {\n        id: 3,\n        headname: 'Read Rights'\n    },\n    {\n        id: 4,\n        headname: 'Add Rights'\n    },\n    {\n        id: 5,\n        headname: 'Edit Rights'\n    },\n    {\n        id: 6,\n        headname: 'Delete Rights'\n    },\n    {\n        id: 7,\n        headname: 'Print Rights'\n    },\n    {\n        id: 8,\n        headname: 'Action'\n    }\n];\n\nexport const companyDetails = [\n    {\n        dataBase: 1,\n        name: 'SHANKAR TRADERS',\n        business: 'Wholesale Merchant in Dhall',\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33AADFS6973R1ZD',\n        phone: '984-313-1353, 984-335-5166',\n        fssai: '12418012000818',\n        bankAccount: '0021 5032 0885 122',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 2,\n        name: 'SMT AGRO PRODUCTS',\n        business: '',\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33ACMFS3420Q1ZQ',\n        phone: '0452-4371625',\n        fssai: '12418012000818',\n        bankAccount: '0025 3031 0875 947',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 3,\n        name: 'BHAVANI TRADERS',\n        business: '',\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\n        logo: SMT_LOGO,\n        gstin: '33AAEFB6728J1ZG',\n        phone: '958-559-7641, 958-559-7614',\n        fssai: '12418012000670',\n        bankAccount: '0021 5005 0800 309',\n        ifsc: 'TMBL0000002'\n    },\n]","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, Button, DialogActions } from '@mui/material';\r\nimport { Close, Download } from '@mui/icons-material';\r\nimport { isEqualNumber, isGraterNumber, LocalDate, NumberFormat, numberToWords, Multiplication, Subraction, Addition, RoundNumber } from '../../../Components/functions';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\n\r\n\r\nconst taxCalc = (method = 1, amount = 0, percentage = 0) => {\r\n    switch (method) {\r\n        case 0:\r\n            return RoundNumber(amount * (percentage / 100));\r\n        case 1:\r\n            return RoundNumber(amount - (amount * (100 / (100 + percentage))));\r\n        case 2:\r\n            return 0;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nconst InvoiceBillTemplate = ({ orderDetails, orderProducts, download, actionOpen, clearDetails, children, TitleText }) => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const [open, setOpen] = useState(false);\r\n    const [retailerInfo, setRetailerInfo] = useState({});\r\n    const [companyInfo, setCompanyInfo] = useState({});\r\n    const printRef = useRef(null);\r\n\r\n    const isExclusiveBill = isEqualNumber(orderDetails.GST_Inclusive, 0);\r\n    const isInclusive = isEqualNumber(orderDetails.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(orderDetails.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(orderDetails.IS_IGST, 1);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/company?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setCompanyInfo(data?.data[0] ? data?.data[0] : {})\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    useEffect(() => {\r\n        if (actionOpen) {\r\n            setOpen(true);\r\n        }\r\n    }, [actionOpen])\r\n\r\n    useEffect(() => {\r\n        if (orderDetails?.Retailer_Id) {\r\n            fetchLink({\r\n                address: `masters/retailers/info?Retailer_Id=${orderDetails?.Retailer_Id}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setRetailerInfo(data?.data[0] ? data?.data[0] : {})\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [orderDetails?.Retailer_Id])\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        if (clearDetails) {\r\n            clearDetails();\r\n        }\r\n    };\r\n\r\n    const includedProducts = orderProducts.filter(orderProduct => isGraterNumber(orderProduct?.Bill_Qty, 0));\r\n\r\n    const totalValueBeforeTax = orderProducts.reduce((acc, item) => {\r\n        const itemRate = RoundNumber(item?.Item_Rate);\r\n        const billQty = parseInt(item?.Bill_Qty) || 0;\r\n\r\n        if (isNotTaxableBill) {\r\n            acc.TotalValue += Multiplication(billQty, itemRate);\r\n            return acc;\r\n        }\r\n\r\n        const gstPercentage = IS_IGST ? item?.Igst : Addition(item?.Sgst, item?.Cgst);\r\n\r\n        if (isInclusive) {\r\n            const itemTax = taxCalc(1, itemRate, gstPercentage);\r\n            const basePrice = Subraction(itemRate, itemTax);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, basePrice);\r\n        }\r\n        if (isExclusiveBill) {\r\n            const itemTax = taxCalc(0, itemRate, gstPercentage);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, itemRate);\r\n        }\r\n\r\n        return acc;\r\n    }, {\r\n        TotalValue: 0,\r\n        TotalTax: 0\r\n    });\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    const extraDetails = [\r\n        {\r\n            labelOne: 'Invoice No',\r\n            dataOne: orderDetails?.So_Id,\r\n            labelTwo: 'Dated',\r\n            dataTwo: LocalDate(orderDetails?.So_Date),\r\n        },\r\n        {\r\n            labelOne: 'Delivery Note',\r\n            dataOne: '',\r\n            labelTwo: 'Mode/Terms of Payment',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Reference No. & Date',\r\n            dataOne: '',\r\n            labelTwo: 'Other References',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Buyer\\'s Order No',\r\n            dataOne: '',\r\n            labelTwo: 'Dated',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Dispatch Doc No',\r\n            dataOne: '',\r\n            labelTwo: 'Delivery Note Date',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Dispatched through',\r\n            dataOne: '',\r\n            labelTwo: 'Destination',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Bill of Lading/LR-RR No',\r\n            dataOne: '',\r\n            labelTwo: 'Motor Vehicle No',\r\n            dataTwo: '',\r\n        },\r\n    ]\r\n\r\n    const TaxData = orderProducts?.reduce((data, item) => {\r\n        const HSNindex = data.findIndex(obj => obj.hsnCode == item.HSN_Code);\r\n\r\n        const {\r\n            Taxable_Amount, Cgst_Amo, Sgst_Amo, Igst_Amo, HSN_Code,\r\n            Cgst, Sgst, Igst,\r\n        } = item;\r\n\r\n        if (HSNindex !== -1) {\r\n            const prev = data[HSNindex];\r\n            const newValue = {\r\n                ...prev,\r\n                taxableValue: prev.taxableValue + Taxable_Amount,\r\n                cgst: Addition(prev.cgst, Cgst_Amo),\r\n                sgst: Addition(prev.sgst, Sgst_Amo),\r\n                igst: Addition(prev.igst, Igst_Amo),\r\n                totalTax: prev.totalTax + Number(orderDetails.IS_IGST ? Igst_Amo : Addition(Cgst_Amo, Sgst_Amo)),\r\n            };\r\n\r\n            data[HSNindex] = newValue;\r\n            return data;\r\n        }\r\n\r\n        const newEntry = {\r\n            hsnCode: HSN_Code,\r\n            taxableValue: Taxable_Amount,\r\n            cgst: Cgst_Amo,\r\n            cgstPercentage: Cgst,\r\n            sgst: Sgst_Amo,\r\n            sgstPercentage: Sgst,\r\n            igst: Igst_Amo,\r\n            igstPercentage: Igst,\r\n            totalTax: orderDetails.IS_IGST ? Number(Igst_Amo) : Addition(Cgst_Amo, Sgst_Amo),\r\n        };\r\n\r\n        return [...data, newEntry];\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <span onClick={handleOpen}>{children}</span>\r\n\r\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth='lg'>\r\n\r\n                <DialogTitle>Order Preview</DialogTitle>\r\n\r\n                <DialogContent ref={printRef}>\r\n                    <h3 className='text-center mb-2'>{TitleText ?? 'Invoice Details'}</h3>\r\n\r\n                    {/* General Info */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 p-0 border border-bottom-0 border-end-0\"> {/* Company Info */}\r\n                            <div className=\"border-bottom p-2\">\r\n                                <p className='m-0 fa-17'>{companyInfo?.Company_Name}</p>\r\n                                <p className='m-0 fa-14'>Address: {companyInfo?.Company_Address}</p>\r\n                                {/* <p className='m-0 fa-14'></p> */}\r\n                                <p className='m-0 fa-14'>City: {companyInfo?.Region} - {companyInfo?.Pincode}</p>\r\n                                <p className='m-0 fa-14'>GSTIN / UIN: {companyInfo?.Gst_Number}</p>\r\n                                <p className='m-0 fa-14'>State: {companyInfo?.State}</p>\r\n                                <p className='m-0 fa-14'>Code: </p>\r\n                            </div>\r\n                            <div className=\"p-2\"> {/* buyer info */}\r\n                                <p className='m-0 fa-12'>Buyer (Bill to)</p>\r\n                                <p className='m-0 fa-15'>{retailerInfo?.Retailer_Name}</p>\r\n                                <p className='m-0 fa-14'>{retailerInfo?.Reatailer_Address}</p>\r\n                                <p className='m-0 fa-14'>{retailerInfo?.Reatailer_City} - {retailerInfo?.PinCode}</p>\r\n                                <p className='m-0 fa-14'>GSTIN / UIN: {companyInfo?.Gstno}</p>\r\n                                <p className='m-0 fa-14'>State Name: {companyInfo?.StateGet}</p>\r\n                                <p className='m-0 fa-14'>Code: </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-6 p-0 border border-bottom-0\">\r\n                            <table className=\"table m-0\">\r\n                                <tbody>\r\n                                    {extraDetails.map((detail, index) => (\r\n                                        <tr key={index}>\r\n                                            <td className=\"border-end fa-12 p-0 px-1\">\r\n                                                <p className=\"m-0\">{detail.labelOne}</p>\r\n                                                <p className=\"m-0\">&emsp;{detail.dataOne}</p>\r\n                                            </td>\r\n                                            <td className='fa-12 p-0 px-1'>\r\n                                                <p className=\"m-0\">{detail.labelTwo}</p>\r\n                                                <p className=\"m-0\">&emsp;{detail.dataTwo}</p>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                    <tr>\r\n                                        <td colSpan={2} className='border-0 fa-12 p-0'>\r\n                                            <p className=\"m-0\">Terms of Delivery</p>\r\n                                            <p className=\"m-0\"></p>\r\n                                            <br />\r\n                                            <br />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Product Info */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-0\">\r\n                            <table className=\"table m-0\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className='border bg-light fa-14'>Sno</td>\r\n                                        <td className='border bg-light fa-14'>Product</td>\r\n                                        <td className='border bg-light fa-14'>HSN/SAC</td>\r\n                                        <td className='border bg-light fa-14 text-end'>Quantity</td>\r\n                                        <td className='border bg-light fa-14 text-end'>Rate</td>\r\n                                        <td className='border bg-light fa-14 text-end'>\r\n                                            <p className='m-2 '>Rate</p>\r\n                                            <p className='m-0 '>\r\n                                                {isEqualNumber(orderDetails.GST_Inclusive, 1) && '(Incl. of Tax)'} \r\n                                                {isEqualNumber(orderDetails.GST_Inclusive, 2) && '(Tax not applicable)'}\r\n                                                {isEqualNumber(orderDetails.GST_Inclusive, 0) && '(Excl. of Tax)'}\r\n                                            </p>\r\n                                        </td>\r\n                                        <td className='border bg-light fa-14 text-end'>Amount</td>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n\r\n                                    {includedProducts.map((o, i) => {\r\n                                        const percentage = (IS_IGST ? o?.Igst_P : o?.Cgst + o?.Sgst) ?? 0;\r\n                                        const quantity = Number(o?.Bill_Qty || 0);\r\n                                        const Item_Rate = Number(o?.Item_Rate || 0);\r\n                                        const itemTax = taxCalc(orderDetails.GST_Inclusive, Item_Rate, percentage)\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className='border fa-13'>{i + 1}</td>\r\n                                                <td className='border fa-13'>{o?.Product_Name}</td>\r\n                                                <td className='border fa-13'>{o?.HSN_Code}</td>\r\n\r\n                                                <td className='border fa-13 text-end'>\r\n                                                    {NumberFormat(quantity)}\r\n                                                    {o?.UOM && ' (' + o?.UOM + ') '}\r\n                                                </td>\r\n\r\n                                                <td className='border fa-13 text-end'> {/* taxable item value */}\r\n                                                    {NumberFormat(isEqualNumber(\r\n                                                        orderDetails.GST_Inclusive, 1\r\n                                                    ) ? (Item_Rate - itemTax) : Item_Rate)}\r\n                                                </td>\r\n\r\n                                                <td className='border fa-13 text-end'> {/* rate per item */}\r\n                                                    {NumberFormat(isEqualNumber(\r\n                                                        orderDetails.GST_Inclusive, 1\r\n                                                    ) ? Item_Rate : (Item_Rate + itemTax))}\r\n                                                </td>\r\n\r\n                                                <td className='border fa-13 text-end'> {/* taxable amount (qty * rate) */}\r\n                                                    {NumberFormat(o?.Taxable_Amount)}\r\n                                                </td>\r\n\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n\r\n                                    <tr>\r\n                                        <td\r\n                                            className=\"border p-2\"\r\n                                            rowSpan={IS_IGST ? 4 : 5}\r\n                                            colSpan={4}\r\n                                        >\r\n                                            <p className='m-0'>Amount Chargeable (in words):</p>\r\n                                            <p className='m-0'>&emsp; INR {numberToWords(parseInt(orderDetails?.Total_Invoice_value))} Only.</p>\r\n                                        </td>\r\n                                        <td className=\"border p-2 fa-14\" colSpan={2}>Total Taxable Amount</td>\r\n                                        <td className=\"border p-2 text-end fa-14\">\r\n                                            {NumberFormat(totalValueBeforeTax.TotalValue)}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    {!IS_IGST ? (\r\n                                        <>\r\n                                            <tr>\r\n                                                <td className=\"border p-2 fa-14\" colSpan={2}>CGST</td>\r\n                                                <td className=\"border p-2 text-end fa-14\">\r\n                                                    {NumberFormat(orderDetails?.CSGT_Total)}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"border p-2 fa-14\" colSpan={2}>SGST</td>\r\n                                                <td className=\"border p-2 fa-14 text-end\">\r\n                                                    {NumberFormat(orderDetails?.SGST_Total)}\r\n                                                </td>\r\n                                            </tr>\r\n                                        </>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td className=\"border p-2 fa-14\" colSpan={2}>IGST</td>\r\n                                            <td className=\"border p-2 fa-14 text-end\">\r\n                                                {NumberFormat(orderDetails.IGST_Total)}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n\r\n                                    <tr>\r\n                                        <td className=\"border p-2 fa-14\" colSpan={2}>Round Off</td>\r\n                                        <td className=\"border p-2 fa-14 text-end\">\r\n                                            {NumberFormat(orderDetails?.Round_off)}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"border p-2 fa-14\" colSpan={2}>Total</td>\r\n                                        <td className=\"border p-2 fa-14 text-end fw-bold\">\r\n                                            {NumberFormat(orderDetails?.Total_Invoice_value)}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Tax Calculations */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-0\">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className=\"border bg-light fa-14 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>HSN / SAC</td>\r\n                                        <td className=\"border bg-light fa-14 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>Taxable Value</td>\r\n                                        {isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                            <td className=\"border bg-light fa-14 text-center\" colSpan={2}>IGST Tax</td>\r\n                                        ) : (\r\n                                            <>\r\n                                                <td className=\"border bg-light fa-14 text-center\" colSpan={2}>Central Tax</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\" colSpan={2}>State Tax</td>\r\n                                            </>\r\n                                        )}\r\n                                        <td className=\"border bg-light fa-14 text-center\">Total</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        {isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                            <>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Rate</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Amount</td>\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Rate</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Amount</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Rate</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Amount</td>\r\n                                            </>\r\n                                        )}\r\n                                        <td className=\"border bg-light fa-14 text-center\">Tax Amount</td>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {TaxData.map((o, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"border fa-13 text-end\">{o?.hsnCode}</td>\r\n                                                <td className=\"border fa-13 text-end\">{NumberFormat(o?.taxableValue)}</td>\r\n                                                {orderDetails.IS_IGST ? (\r\n                                                    <>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.igstPercentage)}</td>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.igst)}</td>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.cgstPercentage)}</td>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.cgst)}</td>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.sgstPercentage)}</td>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.sgst)}</td>\r\n                                                    </>\r\n                                                )}\r\n                                                <td className=\"border fa-13 text-end\">\r\n                                                    {NumberFormat(o?.totalTax)}\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                    <tr>\r\n                                        <td className=\"border fa-13 text-end\">Total</td>\r\n                                        <td className=\"border fa-13 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.taxableValue), 0))}\r\n                                        </td>\r\n\r\n                                        {orderDetails.IS_IGST ? (\r\n                                            <>\r\n                                                <td className=\"border fa-13 text-end\"></td>\r\n                                                <td className=\"border fa-13 text-end fw-bold\">\r\n                                                    {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.igst), 0))}\r\n                                                </td>\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <td className=\"border fa-13 text-end\"></td>\r\n                                                <td className=\"border fa-13 text-end fw-bold\">\r\n                                                    {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.cgst), 0))}\r\n                                                </td>\r\n                                                <td className=\"border fa-13 text-end\"></td>\r\n                                                <td className=\"border fa-13 text-end fw-bold\">\r\n                                                    {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.sgst), 0))}\r\n                                                </td>\r\n                                            </>\r\n                                        )}\r\n\r\n                                        <td className=\"border fa-13 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.totalTax), 0))}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td\r\n                                            colSpan={isEqualNumber(orderDetails.IS_IGST, 1) ? 5 : 7}\r\n                                            className='border fa-13 fw-bold'\r\n                                        >\r\n                                            Tax Amount (in words) : INR &nbsp;\r\n                                            {numberToWords(\r\n                                                parseInt(\r\n                                                    TaxData.reduce((sum, item) => sum += Number(item.totalTax), 0)\r\n                                                )\r\n                                            )} only.\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <div className=\"col-12 text-center\">\r\n                            <p>This is a Computer Generated Invoice</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button startIcon={<Close />} variant='outlined' color='error' onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    {download && (\r\n                        <Button\r\n                            startIcon={<Download />}\r\n                            variant='outlined'\r\n                            onClick={handlePrint}\r\n                        >\r\n                            Download\r\n                        </Button>\r\n                    )}\r\n                </DialogActions>\r\n\r\n            </Dialog >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvoiceBillTemplate;","export const convertedStatus = [\r\n    {\r\n        id: 0,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 1,\r\n        label: 'Verified',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Converted',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","FilterableTable","_ref","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","PDFPrintOption","ExcelPrintOption","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","printRef","useRef","columnAlign","type","class","columnVerticalAlign","sortedData","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Boolean","align","find","verticalAlign","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","value","console","log","Fied_Data","colSpan","Number","useReactToPrint","content","current","Button","variant","color","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","disabled","startIcon","Download","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","htmlFor","style","padding","id","checked","onChange","target","TableContainer","component","Paper","maxHeight","ref","Table","stickyHeader","TableHead","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","RequiredStar","fontWeight","customTableStyles","table","width","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","MainMenu","headname","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","taxCalc","amount","arguments","percentage","RoundNumber","orderDetails","orderProducts","download","actionOpen","clearDetails","TitleText","storage","JSON","parse","localStorage","getItem","retailerInfo","setRetailerInfo","companyInfo","setCompanyInfo","isExclusiveBill","GST_Inclusive","isInclusive","isNotTaxableBill","IS_IGST","useEffect","fetchLink","Company_id","then","success","catch","Retailer_Id","handleClose","includedProducts","orderProduct","isGraterNumber","Bill_Qty","totalValueBeforeTax","reduce","acc","item","itemRate","Item_Rate","billQty","TotalValue","Multiplication","gstPercentage","Igst","Addition","Sgst","Cgst","itemTax","basePrice","Subraction","TotalTax","handlePrint","extraDetails","labelOne","dataOne","So_Id","labelTwo","dataTwo","So_Date","TaxData","HSNindex","findIndex","obj","hsnCode","HSN_Code","Taxable_Amount","Cgst_Amo","Sgst_Amo","Igst_Amo","prev","newValue","taxableValue","cgst","sgst","igst","totalTax","newEntry","cgstPercentage","sgstPercentage","igstPercentage","_Fragment","handleOpen","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","Company_Name","Company_Address","Region","Pincode","Gst_Number","State","Retailer_Name","Reatailer_Address","Reatailer_City","PinCode","Gstno","StateGet","detail","Igst_P","quantity","Product_Name","UOM","rowSpan","numberToWords","Total_Invoice_value","IGST_Total","CSGT_Total","SGST_Total","Round_off","sum","DialogActions","Close","convertedStatus","label"],"sourceRoot":""}