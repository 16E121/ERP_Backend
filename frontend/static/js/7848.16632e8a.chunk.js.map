{"version":3,"file":"static/js/7848.16632e8a.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/requiredStar.jsx","Components/tablecolumn.js","Pages/Purchase/purchaseInvoiceManagement.jsx","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js"],"sourcesContent":["import React, { Fragment, useRef, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton, Button, Popover, MenuList, MenuItem, ListItemIcon, ListItemText, Tooltip } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} name\r\n * @property {Element} icon\r\n * @property {Function} onclick\r\n * @property {boolean} disabled\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n * @param {boolean} [props.PDFPrintOption]\r\n * @param {boolean} [props.ExcelPrintOption]\r\n * @param {boolean} [props.maxHeightOption]\r\n * @param {React.ReactElement} [props.ButtonArea]\r\n * @param {Array<Menu>} props.MenuButtons\r\n */\r\n\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst createPopUpMenu = (name, icon, onclick, disabled = false) => (\r\n    <MenuItem\r\n        onClick={onclick}\r\n        disabled={disabled}\r\n    >\r\n        <ListItemIcon>{icon}</ListItemIcon>\r\n        <ListItemText>{name}</ListItemText>\r\n    </MenuItem>\r\n)\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = []\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                    column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                                )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                            column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                        )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const TableActions = () => {\r\n        const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n        const popOverOpen = Boolean(anchorEl);\r\n\r\n        const handleClick = (event) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Tooltip title='Export options and more...'>\r\n                    <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </Tooltip>\r\n\r\n                <Popover\r\n                    open={popOverOpen}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                >\r\n                    <MenuList>\r\n\r\n                        {maxHeightOption && (\r\n                            <MenuItem\r\n                                onClick={() => setShowFullHeight(pre => !pre)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    {showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />\r\n                                    }\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    color={showFullHeight ? 'success' : ''}\r\n                                >Max Height</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {PDFPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => generatePDF(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download PDF</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {ExcelPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => exportToExcel(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download Excel</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {MenuButtons.map(btn => createPopUpMenu(btn.name, btn.icon, btn.onclick, btn.disabled))}\r\n\r\n                    </MenuList>\r\n                </Popover>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='rounded-3 bg-white overflow-hidden'>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {/* {maxHeightOption && (\r\n                    <div>\r\n                        <label className=\"form-check-label p-1\" htmlFor=\"fullHeight\">Max Height</label>\r\n                        <input\r\n                            className=\"form-check-input shadow-none\"\r\n                            style={{ padding: '0.7em' }}\r\n                            type=\"checkbox\"\r\n                            id=\"fullHeight\"\r\n                            checked={showFullHeight}\r\n                            onChange={e => setShowFullHeight(e.target.checked)}\r\n                        />\r\n                    </div>\r\n                )} */}\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && <TableActions />}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: []\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    // createPopUpMenu,\r\n}","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\nimport SMT_LOGO from './smt.png';\n\nexport const customTableStyles = {\n    table: {\n        style: {\n            width: 'auto',\n            backgroundColor: 'transparent',\n            // borderRadius: '5px',\n        }\n    },\n    rows: {\n        style: {\n            backgroundColor: 'transparent',\n        },\n    },\n    headCells: {\n        style: {\n            backgroundColor: '#6b9080f8',\n            color: 'white',\n            fontSize: '14px',\n            // borderRadius: '5px',\n        },\n    },\n};\n\nexport const customSelectStyles = {\n    control: (provided, state) => ({\n        ...provided,\n        height: '45px',\n        background: 'rgba(255, 255, 255, 0.322)'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n\nexport const customSelectStyles2 = {\n    control: (provided, state) => ({\n        ...provided,\n        background: 'transparent',\n        border: 'none',\n        color: 'rgba(255, 255, 255, 0.322)',\n        // minWidth: '160px'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        color: 'black',\n        zIndex: 9999,\n    }),\n};\n\nexport const MainMenu = [\n    {\n        id: 1,\n        headname: 'Menu ID',\n        variant: 'head',\n        align: 'left',\n        width: 100\n    },\n    {\n        id: 2,\n        headname: 'MenuName',\n    },\n    {\n        id: 3,\n        headname: 'Read Rights'\n    },\n    {\n        id: 4,\n        headname: 'Add Rights'\n    },\n    {\n        id: 5,\n        headname: 'Edit Rights'\n    },\n    {\n        id: 6,\n        headname: 'Delete Rights'\n    },\n    {\n        id: 7,\n        headname: 'Print Rights'\n    },\n    {\n        id: 8,\n        headname: 'Action'\n    }\n];\n\nexport const companyDetails = [\n    {\n        dataBase: 1,\n        name: 'SHANKAR TRADERS',\n        business: 'Wholesale Merchant in Dhall',\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33AADFS6973R1ZD',\n        phone: '984-313-1353, 984-335-5166',\n        fssai: '12418012000818',\n        bankAccount: '0021 5032 0885 122',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 2,\n        name: 'SMT AGRO PRODUCTS',\n        business: '',\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33ACMFS3420Q1ZQ',\n        phone: '0452-4371625',\n        fssai: '12418012000818',\n        bankAccount: '0025 3031 0875 947',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 3,\n        name: 'BHAVANI TRADERS',\n        business: '',\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\n        logo: SMT_LOGO,\n        gstin: '33AAEFB6728J1ZG',\n        phone: '958-559-7641, 958-559-7614',\n        fssai: '12418012000670',\n        bankAccount: '0021 5005 0800 309',\n        ifsc: 'TMBL0000002'\n    },\n]","import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { Button, Card, CardActions, CardContent, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { checkIsNumber, Division, isEqualNumber, ISOString, isValidJSON, Multiplication, NumberFormat, numberToWords, RoundNumber, Subraction } from \"../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport RequiredStar from \"../../Components/requiredStar\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst taxCalc = (method = 1, amount = 0, percentage = 0) => {\r\n    switch (method) {\r\n        case 0:\r\n            return RoundNumber(amount * (percentage / 100));\r\n        case 1:\r\n            return RoundNumber(amount - (amount * (100 / (100 + percentage))));\r\n        case 2:\r\n            return 0;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst PurchaseInvoiceManagement = ({ loadingOn, loadingOff }) => {\r\n    // const user = localStorage.getItem('user');\r\n    // const storage = isValidJSON(user) ? JSON.parse(user) : {};\r\n\r\n    const initialInvoiceValue = {\r\n        PIN_Id: '',\r\n        Po_Inv_No: '',\r\n        Ref_Po_Inv_No: '',\r\n        Branch_Id: '',\r\n        Po_Inv_Date: ISOString(),\r\n        Retailer_Id: '',\r\n        GST_Inclusive: 2,\r\n        IS_IGST: 0,\r\n        Narration: '',\r\n        isConverted: '',\r\n        CSGT_Total: 0,\r\n        SGST_Total: 0,\r\n        IGST_Total: 0,\r\n        Round_off: 0,\r\n        Total_Before_Tax: 0,\r\n        Total_Tax: 0,\r\n        Total_Invoice_value: 0,\r\n        Cancel_status: 0,\r\n        Created_by: 0,\r\n        Altered_by: 0,\r\n        Created_on: '',\r\n        Alterd_on: '',\r\n        Trans_Type: '',\r\n        Alter_Id: '',\r\n        Approved_By: '',\r\n        Approve_Status: '',\r\n    }\r\n\r\n    const itemsRowDetails = {\r\n        POI_St_Id: '',\r\n        DeliveryId: '',\r\n        OrderId: '',\r\n        PIN_Id: '',\r\n        Po_Inv_Date: '',\r\n        S_No: '',\r\n        Item_Id: '',\r\n        Bill_Qty: 0,\r\n        Item_Rate: 0,\r\n        Act_Qty: 0,\r\n        Free_Qty: 0,\r\n        Unit_Id: '',\r\n        Unit_Name: '',\r\n        Taxable_Rate: 0,\r\n        Amount: 0,\r\n        Total_Qty: 0,\r\n        Taxble: 0,\r\n        HSN_Code: '',\r\n        Taxable_Amount: 0,\r\n        Tax_Rate: 0,\r\n        Cgst: 0,\r\n        Cgst_Amo: 0,\r\n        Sgst: 0,\r\n        Sgst_Amo: 0,\r\n        Igst: 0,\r\n        Igst_Amo: 0,\r\n        Final_Amo: 0,\r\n        Created_on: '',\r\n    }\r\n    const [vendorList, setVendorList] = useState([]);\r\n    const [branches, setBranches] = useState([]);\r\n    const [productUOM, setProductUOM] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [godownLocations, setGodownLocations] = useState([]);\r\n    const [baseDetails, setBaseDetails] = useState({\r\n        vendor: 'search',\r\n        vendorId: '',\r\n    });\r\n    const [deliveryDetails, setDeliveryDetails] = useState([]);\r\n    const [invoiceDetails, setInvoiceDetails] = useState(initialInvoiceValue);\r\n    const [selectedItems, setSelectedItems] = useState([]);\r\n    const [dialogs, setDialogs] = useState({\r\n        nextStep: false,\r\n    });\r\n    const tdStyle = 'border fa-14 vctr';\r\n    const inputStyle = 'cus-inpt p-2';\r\n    const isExclusiveBill = isEqualNumber(invoiceDetails?.GST_Inclusive, 0);\r\n    const isInclusive = isEqualNumber(invoiceDetails?.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(invoiceDetails?.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(invoiceDetails?.IS_IGST, 1);\r\n\r\n    const Total_Invoice_value = selectedItems.reduce((o, item) => {\r\n        const itemRate = RoundNumber(item?.Item_Rate);\r\n        const billQty = parseInt(item?.Bill_Qty);\r\n        const Amount = Multiplication(billQty, itemRate);\r\n\r\n        if (isInclusive || isNotTaxableBill) {\r\n            return o += Number(Amount);\r\n        }\r\n\r\n        if (isExclusiveBill) {\r\n            const product = findProductDetails(products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n            const tax = taxCalc(0, itemRate, gstPercentage)\r\n            return o += (Number(Amount) + (tax * billQty));\r\n        }\r\n    }, 0);\r\n\r\n    const totalValueBeforeTax = selectedItems.reduce((acc, item) => {\r\n        const itemRate = RoundNumber(item?.Item_Rate);\r\n        const billQty = parseInt(item?.Bill_Qty) || 0;\r\n\r\n        if (isNotTaxableBill) {\r\n            acc.TotalValue += Multiplication(billQty, itemRate);\r\n            return acc;\r\n        }\r\n\r\n        const product = findProductDetails(products, item.Item_Id);\r\n        const gstPercentage = IS_IGST ? product.Igst_P : product.Gst_P;\r\n\r\n        if (isInclusive) {\r\n            const itemTax = taxCalc(1, itemRate, gstPercentage);\r\n            const basePrice = Subraction(itemRate, itemTax);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, basePrice);\r\n        }\r\n        if (isExclusiveBill) {\r\n            const itemTax = taxCalc(0, itemRate, gstPercentage);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, itemRate);\r\n        }\r\n\r\n        return acc;\r\n    }, {\r\n        TotalValue: 0,\r\n        TotalTax: 0\r\n    });\r\n\r\n    useState(() => {\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setVendorList(data.data);\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/branch/dropDown`\r\n        }).then(data => {\r\n            if (data.success) setBranches(data.data);\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/uom`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProductUOM(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/products`\r\n        }).then(data => {\r\n            if (data.success) setProducts(data.data);\r\n            else setProducts([]);\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `dataEntry/godownLocationMaster`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setGodownLocations(data.data);\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     setInvoiceDetails(pre => ({\r\n    //         ...pre,\r\n    //         Total_Invoice_value: Total_Invoice_value,\r\n    //         Total_Before_Tax: totalValueBeforeTax.TotalValue,\r\n    //         Total_Tax: totalValueBeforeTax.TotalTax,\r\n    //         CSGT_Total: IS_IGST ? 0 : totalValueBeforeTax.TotalTax / 2,\r\n    //         SGST_Total: IS_IGST ? 0 : totalValueBeforeTax.TotalTax / 2,\r\n    //         IGST_Total: IS_IGST ? totalValueBeforeTax.TotalTax : 0,\r\n    //         Round_off: Total_Invoice_value - (\r\n    //             RoundNumber(totalValueBeforeTax.TotalValue + totalValueBeforeTax.TotalTax)\r\n    //         )\r\n    //     }))\r\n    // }, [totalValueBeforeTax, Total_Invoice_value])\r\n\r\n    // useState(() => {\r\n    //     const isInclusive = isEqualNumber(invoiceDetails.GST_Inclusive, 1);\r\n    //     const isIgst = isEqualNumber(invoiceDetails?.IS_IGST, 1);\r\n    //     const isNotTaxableBill = isEqualNumber(invoiceDetails?.GST_Inclusive, 2);\r\n    //     setSelectedItems(pre => {\r\n    //         const preItems = [...pre];\r\n    //         return preItems.map(item => {\r\n    //             const productDetails = findProductDetails(products, item.Item_Id)\r\n    //             const gstPercentage = isIgst ? productDetails.Igst_P : productDetails.Gst_P;\r\n    //             const Taxble = gstPercentage > 0 ? 1 : 0;\r\n    //             const Bill_Qty = Number(item.Bill_Qty);\r\n    //             const Item_Rate = RoundNumber(item.Item_Rate ?? 0);\r\n    //             const Amount = Bill_Qty * Item_Rate;\r\n    //             const tax = taxCalc(invoiceDetails.GST_Inclusive, Amount, gstPercentage);\r\n    //             const itemTaxRate = taxCalc(invoiceDetails.GST_Inclusive, Item_Rate, gstPercentage);\r\n    //             const Taxable_Rate = RoundNumber(Subraction(Item_Rate, itemTaxRate));\r\n\r\n    //             const Taxable_Amount = isInclusive ? (Amount - tax) : Amount;\r\n    //             const Final_Amo = isInclusive ? Amount : (Amount + tax);\r\n    //             const Cgst_Amo = !isIgst ? (taxCalc(invoiceDetails.GST_Inclusive, Amount, gstPercentage) / 2) : 0;\r\n    //             const Igst_Amo = isIgst ? taxCalc(invoiceDetails.GST_Inclusive, Amount, gstPercentage) : 0;\r\n    //             return Object.fromEntries(\r\n    //                 Object.entries(itemsRowDetails).map(([key, value]) => {\r\n    //                     switch (key) {\r\n    //                         case 'Taxable_Rate': return [key, Number(Taxable_Rate)]\r\n    //                         case 'Taxble': return [key, Taxble]\r\n    //                         case 'Taxable_Amount': return [key, Taxable_Amount]\r\n    //                         case 'Tax_Rate': return [key, gstPercentage]\r\n    //                         case 'Cgst': return [key, (gstPercentage / 2) ?? 0]\r\n    //                         case 'Cgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n    //                         case 'Sgst': return [key, (gstPercentage / 2) ?? 0]\r\n    //                         case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n    //                         case 'Igst': return [key, (gstPercentage / 2) ?? 0]\r\n    //                         case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n    //                         case 'Final_Amo': return [key, Final_Amo]\r\n\r\n    //                         default: return [key, value]\r\n    //                     }\r\n    //                 })\r\n    //             )\r\n    //         })\r\n    //     })\r\n    // }, [invoiceDetails.GST_Inclusive, invoiceDetails.IS_IGST, selectedItems, products])\r\n\r\n    const getVendorInfo = (vendor) => {\r\n        if (loadingOn) loadingOn();\r\n        setSelectedItems([]);\r\n        setInvoiceDetails(pre => ({\r\n            ...pre,\r\n            Retailer_Id: vendor\r\n        }))\r\n        fetchLink({\r\n            // address: `dataEntry/purchaseOrderEntry/delivery/partyBased?VendorId=${baseDetails?.vendorId}`\r\n            address: `dataEntry/purchaseOrderEntry/delivery/partyBased?VendorId=${vendor}`\r\n        }).then(data => {\r\n            if (data.success) setDeliveryDetails(data.data)\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff()\r\n        })\r\n    }\r\n\r\n    const changeItems = (itemDetail, deleteOption) => {\r\n        setSelectedItems((prev) => {\r\n            const preItems = prev.filter(o => !isEqualNumber(o?.OrderId, itemDetail?.OrderId));\r\n            if (deleteOption) {\r\n                return preItems;\r\n            } else {\r\n                const currentOrders = deliveryDetails.filter(item => isEqualNumber(item.OrderId, itemDetail.OrderId));\r\n\r\n                const reStruc = currentOrders.map(item => {\r\n                    const productDetails = findProductDetails(products, item.ItemId)\r\n                    const gstPercentage = IS_IGST ? productDetails.Igst_P : productDetails.Gst_P;\r\n                    const Taxble = gstPercentage > 0 ? 1 : 0;\r\n                    const Bill_Qty = Number(item.Quantity);\r\n                    const Item_Rate = RoundNumber(item.BilledRate);\r\n                    const Amount = Bill_Qty * Item_Rate;\r\n                    const tax = taxCalc(invoiceDetails.GST_Inclusive, Amount, gstPercentage);\r\n                    const itemTaxRate = taxCalc(invoiceDetails.GST_Inclusive, Item_Rate, gstPercentage);\r\n                    const Taxable_Rate = RoundNumber(Subraction(Item_Rate, itemTaxRate));\r\n\r\n                    const Taxable_Amount = isInclusive ? (Amount - tax) : Amount;\r\n                    const Final_Amo = isInclusive ? Amount : (Amount + tax);\r\n                    const Cgst_Amo = !IS_IGST ? (taxCalc(invoiceDetails.GST_Inclusive, Amount, gstPercentage) / 2) : 0;\r\n                    const Igst_Amo = IS_IGST ? taxCalc(invoiceDetails.GST_Inclusive, Amount, gstPercentage) : 0;\r\n                    return Object.fromEntries(\r\n                        Object.entries(itemsRowDetails).map(([key, value]) => {\r\n                            switch (key) {\r\n                                case 'DeliveryId': return [key, Number(item?.Id)]\r\n                                case 'OrderId': return [key, Number(item?.OrderId)]\r\n                                case 'PIN_Id': return [key, Number(item?.OrderId)]\r\n                                case 'Po_Inv_Date': return [key, invoiceDetails?.Po_Inv_Date]\r\n                                case 'Location_Id': return [key, Number(item?.LocationId) ?? '']\r\n                                case 'Item_Id': return [key, Number(item?.ItemId)]\r\n                                case 'Bill_Qty': return [key, Bill_Qty]\r\n                                case 'Item_Rate': return [key, Number(item?.BilledRate)]\r\n                                case 'Act_Qty': return [key, Number(item?.Weight)]\r\n                                case 'Taxable_Rate': return [key, Number(Taxable_Rate)]\r\n                                case 'Amount': return [key, Amount]\r\n                                case 'Total_Qty': return [key, Bill_Qty]\r\n                                case 'Taxble': return [key, Taxble]\r\n                                case 'HSN_Code': return [key, productDetails.HSN_Code]\r\n                                case 'Taxable_Amount': return [key, Taxable_Amount]\r\n                                case 'Tax_Rate': return [key, gstPercentage]\r\n                                case 'Cgst': return [key, (gstPercentage / 2) ?? 0]\r\n                                case 'Cgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                                case 'Sgst': return [key, (gstPercentage / 2) ?? 0]\r\n                                case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                                case 'Igst': return [key, (gstPercentage / 2) ?? 0]\r\n                                case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                                case 'Final_Amo': return [key, Final_Amo]\r\n\r\n                                default: return [key, value]\r\n                            }\r\n                        })\r\n                    )\r\n                })\r\n                return preItems.concat(reStruc);\r\n            }\r\n        });\r\n    };\r\n\r\n    const closeDialogs = () => {\r\n        setDialogs({\r\n            nextStep: false,\r\n        })\r\n    }\r\n\r\n    const changeSelectedObjects = (row, key, value) => {\r\n        setSelectedItems((prev) => {\r\n            return prev.map(item => {\r\n                if (item.DeliveryId === row.DeliveryId) {\r\n                    switch (key) {\r\n                        case 'Bill_Qty': {\r\n                            const updatedValue = parseFloat(value || 0);\r\n                            const newItem = { ...item, Bill_Qty: updatedValue };\r\n                            if (item.Item_Rate) {\r\n                                newItem.Amount = Multiplication(item.Item_Rate, updatedValue);\r\n                            } else if (item.Amount) {\r\n                                newItem.Item_Rate = Division(item.Amount, updatedValue);\r\n                            }\r\n                            return newItem;\r\n                        }\r\n                        case 'Item_Rate': {\r\n                            const updatedValue = parseFloat(value || 0);\r\n                            const newItem = { ...item, Item_Rate: updatedValue };\r\n                            if (item.Bill_Qty) {\r\n                                newItem.Amount = Multiplication(updatedValue, item.Bill_Qty);\r\n                            }\r\n                            return newItem;\r\n                        }\r\n                        case 'Amount': {\r\n                            const updatedValue = parseFloat(value || 0);\r\n                            const newItem = { ...item, Amount: updatedValue };\r\n                            if (item.Bill_Qty) {\r\n                                newItem.Item_Rate = Division(updatedValue, item.Bill_Qty);\r\n                            }\r\n                            return newItem;\r\n                        }\r\n                        default:\r\n                            return { ...item, [key]: value };\r\n                    }\r\n                }\r\n                return item;\r\n            });\r\n        });\r\n    };\r\n\r\n    const postOrder = () => {\r\n        if (loadingOn) loadingOn();\r\n        // checkIsNumber(invoiceDetails?.PIN_Id) ? 'PUT' : \r\n        fetchLink({\r\n            address: 'purchase/purchaseOrder',\r\n            method: 'POST',\r\n            bodyData: {\r\n                Product_Array: selectedItems,\r\n                ...invoiceDetails\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data?.message || 'Saved');\r\n                closeDialogs();\r\n                setSelectedItems([]);\r\n                setInvoiceDetails(initialInvoiceValue);\r\n                setDeliveryDetails([])\r\n            } else {\r\n                toast.error(data?.message || 'Request Failed')\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"d-flex flex-wrap align-items-center border-bottom p-2\">\r\n                    <h5 className='flex-grow-1 m-0 ps-2'>Purchase Invoice Creation</h5>\r\n                    {/* <Button variant='outlined'>back</Button> */}\r\n                    <Button onClick={() => setSelectedItems([])}>clear selected</Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='ms-2'\r\n                        onClick={() => setDialogs(pre => ({ ...pre, nextStep: true }))}\r\n                        disabled={selectedItems.length === 0}\r\n                    >next</Button>\r\n                </div>\r\n                <CardContent style={{ minHeight: 500 }}>\r\n                    <label className=\"pe-2\">Select Vendor For Invoice: </label>\r\n                    <div className=\"d-flex align-self-stretch flex-wrap mb-2\">\r\n                        <span className=\"flex-grow-1\" style={{ maxWidth: '50%' }}>\r\n                            <Select\r\n                                value={{ value: baseDetails.vendorId, label: baseDetails.vendor }}\r\n                                onChange={e => setBaseDetails(pre => ({\r\n                                    ...pre,\r\n                                    vendorId: e.value,\r\n                                    vendor: e.label\r\n                                }))}\r\n                                options={[\r\n                                    { value: '', label: 'Search', isDisabled: true },\r\n                                    ...vendorList.map(obj => ({\r\n                                        value: obj?.Retailer_Id,\r\n                                        label: obj?.Retailer_Name\r\n                                    }))\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Select Vendor\"}\r\n                                maxMenuHeight={300}\r\n                            />\r\n                        </span>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            className=\"mx-2\"\r\n                            // disabled={!checkIsNumber(baseDetails.vendorId)}\r\n                            onClick={() => getVendorInfo(3440)}\r\n                        // onClick={() => getVendorInfo(baseDetails.vendorId)}\r\n                        ><Search /></Button>\r\n                    </div>\r\n\r\n                    <FilterableTable\r\n                        dataArray={deliveryDetails}\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: '#',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n\r\n                                    return (\r\n                                        <div>\r\n                                            <input\r\n                                                className=\"form-check-input shadow-none pointer\"\r\n                                                style={{ padding: '0.7em' }}\r\n                                                type=\"checkbox\"\r\n                                                checked={selectedItems.findIndex(o => isEqualNumber(o?.DeliveryId, row?.Id)) !== -1}\r\n                                                onChange={() => {\r\n                                                    if (selectedItems.findIndex(o => isEqualNumber(o?.DeliveryId, row?.Id)) !== -1) changeItems(row, true)\r\n                                                    else changeItems(row)\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            },\r\n                            createCol('ArrivalDate', 'date'),\r\n                            createCol('ItemName', 'string'),\r\n                            createCol('BilledRate', 'string'),\r\n                            createCol('Quantity', 'number'),\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Weight',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    row?.Weight ?? 0\r\n                                ) + ' ' + row?.Units\r\n                            },\r\n                            createCol('PO_ID', 'string'),\r\n                            createCol('Location', 'string'),\r\n                        ]}\r\n                        EnableSerialNumber\r\n                        disablePagination\r\n                        title={`Arrival Details of ${baseDetails.vendor}`}\r\n                        maxHeightOption\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={dialogs.nextStep}\r\n                onClose={closeDialogs}\r\n                fullScreen\r\n            >\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    postOrder();\r\n                }}>\r\n                    <DialogTitle className='d-flex flex-wrap align-items-center border-bottom '>\r\n                        <span className=\"flex-grow-1\">Create Invoice</span>\r\n                        <span>\r\n                            <Button onClick={closeDialogs} type=\"button\" className='me-2'>back</Button>\r\n                            <Button type='submit' variant=\"contained\">submit</Button>\r\n                        </span>\r\n                    </DialogTitle>\r\n\r\n                    <DialogContent className=\"table-responsive\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                <label>Vendor</label>\r\n                                <input\r\n                                    disabled={true}\r\n                                    value={vendorList?.find(ven =>\r\n                                        isEqualNumber(ven?.Retailer_Id, invoiceDetails?.Retailer_Id)\r\n                                    )?.Retailer_Name ?? 'Not Mapped'}\r\n                                    className={inputStyle}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                <label>Branch <RequiredStar /></label>\r\n                                <select\r\n                                    className={inputStyle}\r\n                                    value={invoiceDetails?.Branch_Id}\r\n                                    required\r\n                                    onChange={e => setInvoiceDetails(pre => ({ ...pre, Branch_Id: e.target.value }))}\r\n                                >\r\n                                    <option value=\"\">select</option>\r\n                                    {branches.map((o, i) => (\r\n                                        <option value={o?.BranchId} key={i}>{o?.BranchName}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                <label>Date <RequiredStar /></label>\r\n                                <input\r\n                                    value={invoiceDetails?.Po_Inv_Date}\r\n                                    type=\"date\"\r\n                                    required\r\n                                    className={inputStyle}\r\n                                    onChange={e => setInvoiceDetails(pre => ({ ...pre, Po_Inv_Date: e.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                <label>Ref Number</label>\r\n                                <input\r\n                                    value={invoiceDetails?.Ref_Po_Inv_No}\r\n                                    className={inputStyle}\r\n                                    onChange={e => setInvoiceDetails(pre => ({ ...pre, Ref_Po_Inv_No: e.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                <label>GST Type <RequiredStar /></label>\r\n                                <select\r\n                                    className={inputStyle}\r\n                                    onChange={e => setInvoiceDetails(pre => ({ ...pre, GST_Inclusive: Number(e.target.value) }))}\r\n                                    value={invoiceDetails.GST_Inclusive}\r\n                                    required\r\n                                >\r\n                                    <option value={1}>Inclusive Tax</option>\r\n                                    <option value={0}>Exclusive Tax</option>\r\n                                    <option value={2}>Not Taxable</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                <label>Tax Type</label>\r\n                                <select\r\n                                    className={inputStyle}\r\n                                    onChange={e => setInvoiceDetails(pre => ({ ...pre, IS_IGST: Number(e.target.value) }))}\r\n                                    value={invoiceDetails.IS_IGST}\r\n                                >\r\n                                    <option value='0'>GST</option>\r\n                                    <option value='1'>IGST</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className={tdStyle}>SNo</td>\r\n                                        <td className={tdStyle}>Item</td>\r\n                                        <td className={tdStyle}>Rate</td>\r\n                                        <td className={tdStyle}>Quantity</td>\r\n                                        <td className={tdStyle}>Act-Qty</td>\r\n                                        <td className={tdStyle}>Unit</td>\r\n                                        <td className={tdStyle}>Amount</td>\r\n                                        <td className={tdStyle}>Branch</td>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {selectedItems.map((row, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className={tdStyle}>{i + 1}</td>\r\n                                            <td className={tdStyle}>{findProductDetails(products, row.Item_Id)?.Product_Name ?? 'Not found'}</td>\r\n                                            <td className={tdStyle}>\r\n                                                <input\r\n                                                    value={row?.Item_Rate}\r\n                                                    type=\"number\"\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Item_Rate', e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <input\r\n                                                    value={row?.Bill_Qty}\r\n                                                    type=\"number\"\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Bill_Qty', e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <input\r\n                                                    value={row?.Act_Qty}\r\n                                                    type=\"number\"\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Act_Qty', e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <select\r\n                                                    value={row?.Unit_Id}\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => {\r\n                                                        const selectedIndex = e.target.selectedIndex;\r\n                                                        const label = e.target.options[selectedIndex].text;\r\n                                                        const value = e.target.value;\r\n                                                        changeSelectedObjects(row, 'Unit_Id', value);\r\n                                                        changeSelectedObjects(row, 'Unit_Name', label);\r\n                                                    }}\r\n                                                    required\r\n                                                >\r\n                                                    <option value=\"\">select</option>\r\n                                                    {productUOM.map((o, i) => (\r\n                                                        <option value={o.Unit_Id} key={i} >{o.Units}</option>\r\n                                                    ))}\r\n                                                </select>\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <input\r\n                                                    value={row?.Amount}\r\n                                                    type=\"number\"\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Amount', e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <select\r\n                                                    value={row?.Location_Id}\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Location_Id', e.target.value)}\r\n                                                >\r\n                                                    <option value=\"\">select</option>\r\n                                                    {godownLocations.map((o, i) => (\r\n                                                        <option value={o?.Godown_Id} key={i}>{o?.Godown_Name}</option>\r\n                                                    ))}\r\n                                                </select>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border p-2\" rowSpan={isEqualNumber(invoiceDetails.IS_IGST, 1) ? 4 : 5}>\r\n                                            Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                                        </td>\r\n                                        <td className=\"border p-2\">Total Taxable Amount</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {NumberFormat(totalValueBeforeTax.TotalValue)}\r\n                                        </td>\r\n                                    </tr>\r\n                                    {!IS_IGST ? (\r\n                                        <>\r\n                                            <tr>\r\n                                                <td className=\"border p-2\">CGST</td>\r\n                                                <td className=\"border p-2\">\r\n                                                    {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"border p-2\">SGST</td>\r\n                                                <td className=\"border p-2\">\r\n                                                    {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                                </td>\r\n                                            </tr>\r\n                                        </>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td className=\"border p-2\">IGST</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {NumberFormat(totalValueBeforeTax.TotalTax)}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n                                    <tr>\r\n                                        <td className=\"border p-2\">Round Off</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {NumberFormat(\r\n                                                Total_Invoice_value - (\r\n                                                    totalValueBeforeTax.TotalValue + totalValueBeforeTax.TotalTax\r\n                                                )\r\n                                            )}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border p-2\">Total</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {NumberFormat(Total_Invoice_value)}\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        {/* <FilterableTable\r\n                            dataArray={selectedItems}\r\n                            columns={[\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Item',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        findProductDetails(products, row.Item_Id)?.Product_Name ?? 'Not found'\r\n                                    )\r\n                                },\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Rate',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <input\r\n                                            value={row?.Item_Rate}\r\n                                            type=\"number\"\r\n                                            className={inputStyle}\r\n                                            onChange={e => changeSelectedObjects(row, 'Item_Rate', e.target.value)}\r\n                                            required\r\n                                        />\r\n                                    )\r\n                                },\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Quantity',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <input\r\n                                            value={row?.Bill_Qty}\r\n                                            type=\"number\"\r\n                                            className={inputStyle}\r\n                                            onChange={e => changeSelectedObjects(row, 'Bill_Qty', e.target.value)}\r\n                                            required\r\n                                        />\r\n                                    )\r\n                                },\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Weight',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <input\r\n                                            value={row?.Weight}\r\n                                            type=\"number\"\r\n                                            className={inputStyle}\r\n                                            onChange={e => changeSelectedObjects(row, 'Weight', e.target.value)}\r\n                                            required\r\n                                        />\r\n                                    )\r\n                                },\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Unit',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <select\r\n                                            value={row?.Unit_Id}\r\n                                            type=\"number\"\r\n                                            className={inputStyle}\r\n                                            onChange={e => {\r\n                                                const selectedIndex = e.target.selectedIndex;\r\n                                                const label = e.target.options[selectedIndex].text;\r\n                                                const value = e.target.value;\r\n                                                changeSelectedObjects(row, 'Unit_Id', value);\r\n                                                changeSelectedObjects(row, 'Unit_Name', label);\r\n                                            }}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">select</option>\r\n                                            {productUOM.map((o, i) => (\r\n                                                <option value={o.Unit_Id} key={i} >{o.Units}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    )\r\n                                },\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Amount',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <input\r\n                                            value={row?.Amount}\r\n                                            type=\"number\"\r\n                                            className={inputStyle}\r\n                                            onChange={e => changeSelectedObjects(row, 'Amount', e.target.value)}\r\n                                            required\r\n                                        />\r\n                                    )\r\n                                },\r\n                            ]}\r\n                            EnableSerialNumber\r\n                        /> */}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PurchaseInvoiceManagement;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","FilterableTable","_ref","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Boolean","find","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","value","console","log","colSpan","Number","TableActions","anchorEl","setAnchorEl","popOverOpen","_Fragment","Tooltip","event","currentTarget","MoreVert","Popover","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","MenuItem","disabled","ListItemIcon","ToggleOn","color","ToggleOff","ListItemText","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","Download","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","btn","name","icon","onclick","createPopUpMenu","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","RequiredStar","fontWeight","customTableStyles","table","width","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","taxCalc","amount","percentage","RoundNumber","findProductDetails","_arr$find","productid","obj","Product_Id","_vendorList$find$Reta","_vendorList$find","loadingOn","loadingOff","initialInvoiceValue","PIN_Id","Po_Inv_No","Ref_Po_Inv_No","Branch_Id","Po_Inv_Date","ISOString","Retailer_Id","GST_Inclusive","IS_IGST","Narration","isConverted","CSGT_Total","SGST_Total","IGST_Total","Round_off","Total_Before_Tax","Total_Tax","Total_Invoice_value","Cancel_status","Created_by","Altered_by","Created_on","Alterd_on","Trans_Type","Alter_Id","Approved_By","Approve_Status","itemsRowDetails","POI_St_Id","DeliveryId","OrderId","S_No","Item_Id","Bill_Qty","Item_Rate","Act_Qty","Free_Qty","Unit_Id","Unit_Name","Taxable_Rate","Amount","Total_Qty","Taxble","HSN_Code","Taxable_Amount","Tax_Rate","Cgst","Cgst_Amo","Sgst","Sgst_Amo","Igst","Igst_Amo","Final_Amo","vendorList","setVendorList","branches","setBranches","productUOM","setProductUOM","products","setProducts","godownLocations","setGodownLocations","baseDetails","setBaseDetails","vendor","vendorId","deliveryDetails","setDeliveryDetails","invoiceDetails","setInvoiceDetails","selectedItems","setSelectedItems","dialogs","setDialogs","nextStep","tdStyle","inputStyle","isExclusiveBill","isInclusive","isNotTaxableBill","reduce","item","itemRate","billQty","Multiplication","product","gstPercentage","Igst_P","Gst_P","tax","totalValueBeforeTax","acc","TotalValue","itemTax","basePrice","Subraction","TotalTax","fetchLink","then","success","catch","changeItems","itemDetail","deleteOption","prev","preItems","reStruc","productDetails","ItemId","Quantity","BilledRate","itemTaxRate","fromEntries","_Number","_ref4","_ref5","Id","LocationId","Weight","closeDialogs","changeSelectedObjects","updatedValue","parseFloat","newItem","Division","Card","Button","CardContent","minHeight","maxWidth","Select","label","onChange","options","isDisabled","Retailer_Name","styles","isSearchable","placeholder","maxMenuHeight","getVendorInfo","finally","Search","_ref6","padding","checked","findIndex","_ref7","_row$Weight","Units","Dialog","fullScreen","onSubmit","preventDefault","method","bodyData","Product_Array","toast","message","DialogTitle","DialogContent","ven","required","BranchId","BranchName","_findProductDetails$P","_findProductDetails","Product_Name","selectedIndex","text","Location_Id","Godown_Id","Godown_Name","rowSpan","numberToWords","DialogActions","createSvgIcon","d","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","React","inProps","ref","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx","getCardUtilityClass","CardRoot","overflow","raised","elevation"],"sourceRoot":""}