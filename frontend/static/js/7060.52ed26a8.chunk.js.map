{"version":3,"file":"static/js/7060.52ed26a8.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Dashboard/chartComp.jsx","Pages/Dashboard/erp/SOA.jsx","Pages/Attendance/attendanceComp.jsx","Pages/Dashboard/managementDashboard.jsx","Pages/Dashboard/commonDashboard.jsx"],"sourcesContent":["import React, { Fragment, useRef, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton, Button } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {boolean} [props.PDFPrintOption]\r\n * @param {boolean} [props.ExcelPrintOption]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    } \r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({...o, Sno: i + 1}))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(false);\r\n    const tableHeight = showFullHeight ? ' max-content ' : tableMaxHeight;\r\n    const printRef = useRef(null);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                    column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                                )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                            column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                        )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex align-items-center flex-wrap mb-2\">\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0 ps-3'>{title}</h6>}\r\n                {PDFPrintOption && (\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='primary'\r\n                        className='me-2'\r\n                        // onClick={handlePrint}\r\n                        onClick={() => generatePDF(dataArray, columns)}\r\n                        disabled={isEqualNumber(dataArray?.length, 0)}\r\n                        startIcon={<Download />}\r\n                    >Download PDF</Button>\r\n                )}\r\n                {ExcelPrintOption && (\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='success'\r\n                        className='me-2'\r\n                        onClick={() => exportToExcel(dataArray, columns)}\r\n                        disabled={isEqualNumber(dataArray?.length, 0)}\r\n                        startIcon={<Download />}\r\n                    >Download Excel</Button>\r\n                )}\r\n                <div>\r\n                    <label className=\"form-check-label p-1 pe-2\" htmlFor=\"fullHeight\">Max Height</label>\r\n                    <input\r\n                        className=\"form-check-input shadow-none\"\r\n                        style={{ padding: '0.7em' }}\r\n                        type=\"checkbox\"\r\n                        id=\"fullHeight\"\r\n                        checked={showFullHeight}\r\n                        onChange={e => setShowFullHeight(e.target.checked)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableHeight }} ref={printRef}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n};\r\n\r\n\r\nexport default FilterableTable;","import React, { useEffect, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-plugin-datalabels';\n\n\nconst PieChartComp = ({ TasksArray }) => {\n    const [chartData, setChartData] = useState(null);\n    const [chartInstance, setChartInstance] = useState(null);\n    const [totalTime, setTotalTime] = useState(null);\n\n    useEffect(() => {\n        if (TasksArray.length > 0) {\n            const totalDuration = TasksArray.reduce((acc, task) => {\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\n                return acc + (end - start);\n            }, 0);\n\n            const firstTaskStart = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[0].Start_Time);\n            const lastTaskEnd = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[TasksArray.length - 1].End_Time);\n            const totalTime = lastTaskEnd - firstTaskStart;\n            const freeTime = totalTime - totalDuration;\n\n            const totalSeconds = Math.floor(totalTime / 1000);\n            const hours = Math.floor(totalSeconds / 3600);\n            const minutes = Math.floor((totalSeconds % 3600) / 60);\n            const seconds = totalSeconds % 60;\n            setTotalTime(`${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`);\n\n            const taskData = TasksArray.map(task => {\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\n                const duration = end - start;\n                return {\n                    label: `${task.Task_Name} (${task.Start_Time} - ${task.End_Time})`,\n                    duration,\n                    backgroundColor: getRandomColor()\n                };\n            });\n\n            const chartData = {\n                labels: taskData.map(task => task.label),\n                datasets: [{\n                    data: taskData.map(task => task.duration),\n                    backgroundColor: taskData.map(task => task.backgroundColor),\n                    borderColor: 'rgba(255, 255, 255, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            chartData.labels.push('Free Time');\n            chartData.datasets[0].data.push(freeTime);\n            chartData.datasets[0].backgroundColor.push('#ADD8E6');\n\n            setChartData(chartData);\n        }\n    }, [TasksArray]);\n\n    useEffect(() => {\n        if (chartData) {\n            if (chartInstance) {\n                chartInstance.destroy();\n            }\n\n            const ctx = document.getElementById('empWokHours');\n            const newChartInstance = new Chart(ctx, {\n                type: 'pie',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    plugins: {\n                        tooltip: {\n                            callbacks: {\n                                label: function (context) {\n                                    // const label = context.label || '';\n                                    const value = context.parsed || 0;\n                                    const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\n                                    const percentage = Math.round((value / total) * 100);\n                                    const minutes = Math.round(value / (1000 * 60));\n                                    return `${minutes} minutes (${percentage}%)`;\n                                }\n                            }\n                        },\n                        datalabels: {\n                            color: '#fff',\n                            formatter: (value, context) => {\n                                const label = context.chart.data.labels[context.dataIndex];\n                                const value1 = context.parsed || 0;\n                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\n                                const percentage = Math.round((value1 / total) * 100);\n                                return `${label}: ${value} (${percentage}%)`;\n                            }\n                        }                        \n                    }\n                }\n            });\n\n            setChartInstance(newChartInstance);\n        }\n    }, [chartData]);\n\n    // for Dynamic background colors\n    const getRandomColor = () => {\n        const letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    };\n\n    return TasksArray.length > 0 ? (\n        <div className='d-flex flex-column align-items-center my-3' style={{ maxHeight: '500px' }}>\n            {totalTime && <p className='my-2'>Total Time: {totalTime}</p>}\n            <canvas id=\"empWokHours\" width=\"400\" height=\"100\"></canvas>\n        </div>\n    ) : (\n        <h5 className=\"text-center my-5\">No Data For PieChart!</h5>\n    )\n};\n\nexport default PieChartComp;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { LaunchOutlined } from '@mui/icons-material'\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Button } from \"@mui/material\";\nimport { useReactToPrint } from 'react-to-print';\nimport { utils as XLSXUtils, writeFile as writeXLSX } from 'xlsx';\nimport logo from '../ic_launcher.png';\nimport { fetchLink } from '../../../Components/fetchComponent'\n\n\nconst SOAComp = () => {\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\n    const [isCustomer, setIsCustomer] = useState(false)\n    const [dataArray, setDataArray] = useState([]);\n    const UserId = parseData?.UserId;\n    // const token = parseData?.Autheticate_Id;\n    const [total, setTotal] = useState(0)\n    const [dialog, setDialog] = useState(false)\n    const [SOA, setSOA] = useState([])\n    const [clickedRow, setClickedRow] = useState({})\n    const today = new Date();\n    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 2);\n\n    const [selectedRange, setSelectedRange] = useState({\n        from: firstDayOfMonth.toISOString().split('T')[0],\n        to: new Date().toISOString().split('T')[0],\n    });\n\n    const imageSource = logo\n    const [closingBalance, setClosingBalance] = useState({ debit: 0, credit: 0 });\n    const printRef = useRef()\n\n    useEffect(() => {\n        fetchLink({\n            address: `userModule/customer/getBalance?UserId=${UserId}`\n        }).then(data => {\n            if (data.status === 'Success') {\n                setDataArray(data.data)\n                let temp = 0;\n                data.data?.forEach(obj => {\n                    temp += Number(obj.Bal_Amount)\n                })\n                setTotal(temp)\n            }\n            if (data?.isCustomer) {\n                setIsCustomer(true)\n            } else {\n                setIsCustomer(false)\n            }\n        }).catch(e => console.error(e))\n    }, [])\n\n    const getInfo = (prop, mode) => {\n        let rowData;\n        if (mode && mode === 1) {\n            rowData = clickedRow;\n        } else {\n            rowData = prop\n        }\n        setClickedRow(rowData)\n        setDialog(true);\n        fetchLink({\n            address: `userModule/customer/StatementOfAccound?Cust_Id=${rowData?.Cust_Id}&Acc_Id=${rowData?.tally_id}&Company_Id=${rowData?.Company_Id}&Fromdate=${selectedRange?.from}&Todate=${selectedRange?.to}`\n        }).then(data => {\n            setSOA(data.data)\n            let bal = { debit: 0, credit: 0 }\n            data?.data?.forEach(obj => {\n                bal.debit += Number(obj.Debit_Amt)\n                bal.credit += Number(obj.Credit_Amt)\n            })\n            setClosingBalance(bal)\n        }).catch(e => console.error(e))\n    }\n\n    const handleClose = () => {\n        setDialog(false);\n        setSOA([]);\n        setClickedRow({});\n        setSelectedRange({\n            from: firstDayOfMonth.toISOString().split('T')[0],\n            to: new Date().toISOString().split('T')[0],\n        })\n    }\n\n    const handlePrint = useReactToPrint({\n        content: () => printRef.current,\n    });\n\n    const generateExcel = (data) => {\n        const worksheet = XLSXUtils.json_to_sheet(data);\n        const workbook = XLSXUtils.book_new();\n        XLSXUtils.book_append_sheet(workbook, worksheet, 'Sheet1');\n        writeXLSX(workbook, `erpsmt_SOA_${new Date().toLocaleDateString('en-IN', {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        })}.xlsx`);\n    }\n\n    return isCustomer ? (\n        <>\n            <div className=\"card\">\n                <div className=\"card-header py-3 bg-white\" >\n                    <p className=\"mb-0 fw-bold\" >\n                        <span>Balance of {parseData?.Name}</span>\n                        <span className={total > 0 ? 'text-primary' : 'text-danger'}> &nbsp;( {total.toLocaleString('en-IN') + (total < 0 ? ' CR' : ' DR')} )</span>\n                    </p>\n                </div>\n                <div className=\"card-body p-0 table-responsive\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th style={{ fontSize: '13px' }}>S.No</th>\n                                <th style={{ fontSize: '13px' }}> - </th>\n                                <th style={{ fontSize: '13px' }}>Company</th>\n                                <th style={{ fontSize: '13px' }}>Ledger</th>\n                                <th style={{ fontSize: '13px' }}>Balance</th>\n                                <th style={{ fontSize: '13px' }}>Dr/Cr</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {dataArray.map((o, i) => (\n                                <tr key={i}>\n                                    <td style={{ fontSize: '13px' }}>{i + 1}</td>\n                                    <td style={{ fontSize: '13px' }}>\n                                        <button\n                                            className=\"icon-btn\"\n                                            onClick={() => { getInfo(o) }}>\n                                            <LaunchOutlined sx={{ fontSize: 'inherit' }} />\n                                        </button>\n                                    </td>\n                                    <td style={{ fontSize: '13px' }}>{o?.Company_Name}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.ledger_name}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.Bal_Amount?.toLocaleString('en-IN')}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.CR_DR}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <Dialog\n                open={dialog}\n                onClose={handleClose}\n                fullScreen\n                fullWidth>\n                <DialogTitle className=\"border-bottom text-primary d-flex align-items-center fa-18\">\n                    <span className=\"flex-grow-1\">Transaction Report of {clickedRow?.Customer_name}</span>\n                    <Button\n                        className=\"fw-bold\"\n                        onClick={handlePrint} >\n                        PDF\n                    </Button>\n                    <Button\n                        className=\"ms-1 fw-bold\"\n                        onClick={() => {\n                            const transformedData = SOA.map((o, i) => ({\n                                Sno: i + 1,\n                                Date: new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\n                                    day: '2-digit',\n                                    month: '2-digit',\n                                    year: 'numeric',\n                                }),\n                                Purticular: o?.Ledger_Desc,\n                                InvoiceNo: o?.invoice_no,\n                                Debit: Boolean(Number(o.Debit_Amt)) ? o.Debit_Amt.toLocaleString('en-IN') : '',\n                                Credit: Boolean(Number(o.Credit_Amt)) ? o.Credit_Amt.toLocaleString('en-IN') : '',\n                                Company: o?.Company_Name,\n                                Ledger: o?.Ledger_Name,\n                                Mobile_Number: o?.Mobile_no\n                            }));\n                            generateExcel(transformedData);\n                        }}\n                    >\n                        excel\n                    </Button>\n                </DialogTitle>\n                <DialogContent className=\"rounded-2 shadow m-4 mb-2 p-0\" >\n                    <div className=\"row align-content-center\">\n                        <div className=\"col-lg-1\">\n                            <img src={imageSource} alt=\"Company Logo\" className=\"smtlogo\" />\n                        </div>\n                        <div className=\"col-lg-4 p-2 ps-3\">\n                            <table className=\"table border-0\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0\">Company</td>\n                                        <td className=\"border-0\">{clickedRow?.Company_Name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Ledger Name</td>\n                                        <td className=\"border-0\">{clickedRow?.ledger_name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Contact Person</td>\n                                        <td className=\"border-0\">{SOA[0]?.Contact_Person}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Mobile</td>\n                                        <td className=\"border-0\">{SOA[0]?.Mobile_no}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n\n                        </div>\n                        <div className=\"col-lg-4 p-2\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0\">Opening Balnce</td>\n                                        <td className=\"border-0 text-primary\">{\n                                            SOA[0]?.Debit_Amt > 0\n                                                ? SOA[0]?.Debit_Amt.toLocaleString('en-IN') + ' DR'\n                                                : SOA[0]?.Credit_Amt.toLocaleString('en-IN') + ' CR'\n                                        }\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Closing Balance</td>\n                                        <td className=\"border-0 text-primary\">{\n                                            (closingBalance?.debit - closingBalance?.credit) < 0\n                                                ? (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + \" CR\"\n                                                : (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + ' DR'\n                                        }\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"col-lg-3 p-2\">\n                            <table className=\"table border-0\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0\">From :</td>\n                                        <td className=\"p-0 border-0\">\n                                            <input\n                                                type=\"date\"\n                                                className=\"form-control w-auto ms-2\"\n                                                onChange={(e) => setSelectedRange({ ...selectedRange, from: e.target.value })}\n                                                value={selectedRange.from} />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">To :</td>\n                                        <td className=\"p-0 border-0\">\n                                            <input\n                                                type=\"date\"\n                                                className=\"form-control w-auto ms-2\"\n                                                onChange={(e) => {\n                                                    if (selectedRange.from && selectedRange.from <= e.target.value) {\n                                                        setSelectedRange({ ...selectedRange, to: e.target.value });\n                                                    } else {\n                                                        window.alert('Invald Date Range')\n                                                    }\n                                                }}\n                                                value={selectedRange.to}\n                                                disabled={!selectedRange.from} />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\"></td>\n                                        <td className=\"border-0\">\n                                            <button\n                                                className=\"btn text-white\"\n                                                style={{ backgroundColor: 'rgb(66, 34, 225)' }}\n                                                onClick={() => { getInfo('', 1) }}>Search</button>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                    <div className=\"p-2 table-responsive\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th className=\"fa-13 tble-hed-stick\">-</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Date</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Particulars</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Invoice No</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Dr</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Cr</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {SOA.map((o, i) => (\n                                    <tr key={i}>\n                                        <td className=\"fa-13 bg-light\">{i + 1}</td>\n                                        <td className=\"fa-13 bg-light\">\n                                            {new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\n                                                day: '2-digit',\n                                                month: '2-digit',\n                                                year: 'numeric',\n                                            })}\n                                        </td>\n                                        <td className=\"fa-13 bg-light\">{o.Ledger_Desc}</td>\n                                        <td className=\"fa-13\">{o.invoice_no}</td>\n                                        <td className=\"fa-13\">{o.Debit_Amt.toLocaleString('en-IN')}</td>\n                                        <td className=\"fa-13 bg-light\">{o.Credit_Amt.toLocaleString('en-IN')}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n\n                    {/* printable div */}\n                    <div className=\"d-none\">\n                        <div className=\"d-block px-5 py-2\" ref={printRef}>\n                            <img src={imageSource} alt=\"smtlogo\" className=\"smtlogo\" />\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Company</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{clickedRow?.Company_Name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Ledger Name</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{clickedRow?.ledger_name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Contact Person</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{SOA[0]?.Contact_Person}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Mobile</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{SOA[0]?.Mobile_no}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">From</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{selectedRange.from}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">To</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{selectedRange.to}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Opening Balance</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">\n                                            {\n                                                SOA[0]?.Debit_Amt > 0\n                                                    ? SOA[0]?.Debit_Amt.toLocaleString('en-IN') + ' DR'\n                                                    : SOA[0]?.Credit_Amt.toLocaleString('en-IN') + ' CR'\n                                            }\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Closing Balance</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">\n                                            {\n                                                (closingBalance?.debit - closingBalance?.credit) < 0\n                                                    ? (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + \" CR\"\n                                                    : (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + ' DR'\n                                            }\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <div className=\"p-2 table-responsive\">\n                                <table className=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th className=\"fa-13 tble-hed-stick\">-</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Date</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Particulars</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Invoice No</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Dr</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Cr</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {SOA.map((o, i) => (\n                                            <tr key={i}>\n                                                <td className=\"fa-13 bg-light\">{i + 1}</td>\n                                                <td className=\"fa-13 bg-light\">\n                                                    {new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\n                                                        day: '2-digit',\n                                                        month: '2-digit',\n                                                        year: 'numeric',\n                                                    })}\n                                                </td>\n                                                <td className=\"fa-13 bg-light\">{o.Ledger_Desc}</td>\n                                                <td className=\"fa-13\">{o.invoice_no}</td>\n                                                <td className=\"fa-13\">{Boolean(Number(o.Debit_Amt)) && o.Debit_Amt.toLocaleString('en-IN')}</td>\n                                                <td className=\"fa-13 bg-light\">{Boolean(Number(o.Credit_Amt)) && o.Credit_Amt.toLocaleString('en-IN')}</td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} variant='contained' color='error'>Close</Button>\n                </DialogActions>\n            </Dialog>\n\n\n        </>\n    ) : <></>\n}\n\nexport default SOAComp;","import { Button, Card, CardContent, Dialog, DialogContent, DialogTitle, DialogActions } from \"@mui/material\"\nimport { useEffect, useState } from \"react\";\nimport { LocalDate, LocalTime } from \"../../Components/functions\";\nimport { toast } from \"react-toastify\";\nimport { fetchLink } from '../../Components/fetchComponent'\n\nconst AttendanceComp = () => {\n    const storage = JSON.parse(localStorage.getItem('user'));\n    const initialValue = {\n        Latitude: null,\n        Longitude: null,\n        error: null,\n        UserId: storage.UserId,\n        Description: '',\n        dialog: false\n    }\n    const [lastAttendance, setLastAttendance] = useState({});\n    const [reload, setReload] = useState(false);\n    const [inputValue, setInputValue] = useState(initialValue);\n\n    useEffect(() => {\n        setLastAttendance({})\n        fetchLink({\n            address: `empAttendance/attendance?UserId=${storage?.UserId}`,\n        }).then(data => {\n            if (data?.success && data?.data?.length > 0) {\n                setLastAttendance(data?.data[0])\n            }\n        }).catch(e => console.error(e))            \n    }, [storage?.UserId, reload])\n\n    const getLocation = async () => {\n\n        try {\n\n            const position = await new Promise((resolve, reject) => {\n                navigator.geolocation.getCurrentPosition(resolve, reject);\n            });\n\n            const { latitude, longitude } = position.coords;\n\n            setInputValue(pre => ({\n                ...pre,\n                Latitude: latitude,\n                Longitude: longitude,\n                error: null\n            }));\n\n            return true;\n\n        } catch (error) {\n            if (error.code === error.PERMISSION_DENIED) {\n                setInputValue(pre => ({\n                    ...pre,\n                    Latitude: null,\n                    Longitude: null,\n                    error: 'Location access denied'\n                }));\n\n                toast.warn('Allow Location Access');\n            } else {\n                setInputValue(pre => ({\n                    ...pre,\n                    Latitude: null,\n                    Longitude: null,\n                    error: error.message\n                }));\n            }\n\n            return false;\n        }\n    };\n\n    const StartDay = () => {\n        getLocation().then(hasLocationAccess => {\n            if (hasLocationAccess) {\n                if (inputValue?.Latitude && inputValue?.Longitude) {\n                    fetchLink({\n                        address: `empAttendance/attendance`,\n                        method: 'POST',\n                        bodyData: {\n                            UserId: inputValue?.UserId,\n                            Latitude: inputValue?.Latitude,\n                            Longitude: inputValue?.Longitude\n                        }\n                    }).then(data => {\n                        setReload(!reload)\n                        if (data.success) {\n                            toast.success(data.message)\n                        } else {\n                            toast.error(data.message)\n                        }\n                    })\n                } else {\n                    toast.warn('Please Retry')\n                }\n            } else {\n                toast.error('There is a problem in get location')\n            }\n        });\n    };\n\n    const EndDay = () => {\n        fetchLink({\n            address: `empAttendance/attendance`,\n            method: 'PUT',\n            bodyData: {\n                Id: lastAttendance?.Id,\n                Description: inputValue?.Description\n            }\n        }).then(data => {\n            if (data.success) {\n                setReload(!reload)\n                toast.success(data.message);\n                resetValues()\n            } else {\n                toast.error(data.message)\n            }\n        })\n    }\n\n    const resetValues = () => {\n        setInputValue(initialValue)\n    }\n\n    return (\n        <>\n            <Card className=\"col-xl-4    col-lg-6 col-md-6\">\n                <div className=\"d-flex justify-content-between align-items-center p-3 border-bottom\">\n                    <h5 className=\"mb-0\">Attendance</h5>\n                    <Button\n                        variant='outlined'\n                        onClick={StartDay}\n                        disabled={Boolean(lastAttendance?.Active_Status)}\n                    >\n                        START Day\n                    </Button>\n                </div>\n                {Boolean(lastAttendance?.Active_Status) && (\n                    <>\n                        <CardContent >\n                            <div className=\"fw-bold text-muted\">\n                                <div className=\"d-flex justify-content-between\">\n                                    <span>Start Date</span><br />\n                                    <span>{lastAttendance?.Start_Date ? LocalDate(lastAttendance?.Start_Date) : ' --:--:-- '}</span>\n                                </div>\n                                <div className=\"d-flex justify-content-between\">\n                                    <span>In Time</span>\n                                    <span>{lastAttendance?.Start_Date ? LocalTime(lastAttendance?.Start_Date) : ' --:--:-- '}</span>\n                                </div>\n                            </div>\n                        </CardContent>\n                        <div className=\"border-top p-3 d-flex justify-content-end\">\n                            <Button variant='outlined' onClick={() => setInputValue(pre => ({ ...pre, dialog: true }))}>End Day</Button>\n                        </div>\n                    </>\n                )}\n            </Card>\n\n            <Dialog\n                open={inputValue?.dialog}\n                onClose={resetValues}\n                fullWidth maxWidth='md'\n            >\n                <DialogTitle>Cloase Attendance</DialogTitle>\n                <DialogContent>\n                    <label className=\"mb-3\">Work Summary</label>\n                    <textarea \n                        value={inputValue?.Description}\n                        className=\"cus-inpt\"\n                        rows={5}\n                        onChange={e => setInputValue(pre => ({ ...pre, Description: e.target.value}))}\n                        placeholder=\"Narrate the today's work summary\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={resetValues}>Cancel</Button>\n                    <Button variant='outlined' onClick={EndDay}>Confirm</Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\n\nexport default AttendanceComp;","import { useEffect, useState } from \"react\"\nimport { groupData, ISOString, NumberFormat } from \"../../Components/functions\";\nimport { ShoppingCart } from \"@mui/icons-material\";\nimport { LuArrowUpWideNarrow } from \"react-icons/lu\";\nimport { HiOutlineCurrencyRupee } from \"react-icons/hi\";\nimport { IoReceiptOutline } from \"react-icons/io5\";\nimport { BsCartPlus } from \"react-icons/bs\";\nimport { PiHandCoinsFill } from \"react-icons/pi\";\nimport { FaCubesStacked } from \"react-icons/fa6\";\nimport { fetchLink } from \"../../Components/fetchComponent\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\nimport FilterableTable from '../../Components/filterableTable2';\n\n\nconst getIcons = (str) => {\n    const iconArr = [\n        {\n            str: 'SALES',\n            icon: <LuArrowUpWideNarrow style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'PURCHASE',\n            icon: <ShoppingCart style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'RECEIPT',\n            icon: <IoReceiptOutline style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'PAYMENT',\n            icon: <HiOutlineCurrencyRupee style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'EXPENCES',\n            icon: <PiHandCoinsFill style={{ fontSize: '80px' }} />\n        },\n        {\n            str: 'PURCHASE ORDER',\n            icon: <BsCartPlus style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'STOCK VALUE',\n            icon: <FaCubesStacked style={{ fontSize: '70px' }} />,\n        },\n    ]\n\n    return iconArr.find(o => str === o.str)?.icon || <></>\n}\n\n\nconst CardComp = ({ title, icon, firstVal, secondVal, classCount, onClick }) => {\n    return (\n        <>\n            <div className={`col-xxl-3 col-lg-4 col-md-6 col-sm-12 p-2`}>\n                <div onClick={onClick} className={\"coloredDiv d-flex align-items-center text-light cus-shadow coloredDiv\" + classCount}>\n                    <div className=\"flex-grow-1 p-3\">\n                        <h5 >{title}</h5>\n                        <h3 className=\"fa-16 text-end pe-3\">\n                            <span style={{ fontSize: '30px' }}>{firstVal ? firstVal : 0} </span>\n                            {secondVal && '(' + secondVal + ')'}\n                        </h3>\n                    </div>\n                    {icon}\n                </div>\n            </div>\n        </>\n    )\n}\n\n\nconst ManagementDashboard = () => {\n    const storage = JSON.parse(localStorage.getItem('user'));\n    const UserAccess = Number(storage?.UserTypeId) === 2 || Number(storage?.UserTypeId) === 0 || Number(storage?.UserTypeId) === 1;\n\n    const [mangementReport, setMangementReport] = useState([]);\n    const [secRow, setSecRow] = useState([]);\n    const [theredRow, setTheredRow] = useState([]);\n\n    const [popUpDetails, setPopUpDetails] = useState({\n        salesDetails: [],\n    });\n\n    const [popUpDialogs, setPopUpDialogs] = useState({\n        salesDetails: false,\n    })\n\n    const [filter, setFilter] = useState({\n        date: ISOString(),\n    });\n\n    useEffect(() => {\n        if (UserAccess && storage.Company_id) {\n            fetchLink({\n                address: `dashboard/erp/dashboardData?Fromdate=${filter?.date}&Company_Id=${storage.Company_id}`\n            })\n                .then(data => {\n                    if (data.success) {\n                        setMangementReport(data?.data[0])\n                        setSecRow(data?.data[1])\n                        setTheredRow(data?.data[2]);\n                    }\n                })\n                .catch(e => console.error(e))\n        }\n    }, [UserAccess, filter.date]);\n\n    useEffect(() => {\n        if (UserAccess) {\n            fetchLink({\n                address: `dashboard/salesInfo?Fromdate=${filter?.date}&Todate=${filter?.date}`,\n                headers: {\n                    'Db': storage?.Company_id\n                }\n            }).then(data => {\n                if (data.success) {\n                    setPopUpDetails(pre => ({\n                        ...pre,\n                        salesDetails: data.data ?? []\n                    }));\n                } else {\n                    setPopUpDetails(pre => ({ ...pre, salesDetails: []}));\n                }\n            }).catch(e => console.error(e))\n        }\n    }, [filter.date]);\n\n    const salesDetailsGrouped = groupData(popUpDetails?.salesDetails, 'Party_Group');\n\n    return (\n        <>\n            <input\n                type=\"date\"\n                className=\"cus-inpt w-auto m-1\"\n                value={filter.date}\n                onChange={e => setFilter(pre => ({ ...pre, date: e.target.value }))}\n            />\n\n            <div className=\"p-1 row\">\n                {theredRow?.map((o, i) => (\n                    <CardComp\n                        key={i}\n                        icon={getIcons('STOCK VALUE')}\n                        title={'STOCK VALUE'}\n                        classCount={16}\n                        firstVal={o?.Stock_Value ? NumberFormat(parseInt(o?.Stock_Value)) : 0}\n                    />\n                ))}\n                {mangementReport?.map((o, i) => (\n                    <CardComp\n                        key={i}\n                        title={o?.Trans_Type}\n                        onClick={() => {\n                            switch (o?.Trans_Type) {\n                                case 'SALES':\n                                    setPopUpDialogs(pre => ({ ...pre, salesDetails: true }));\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }}\n                        icon={o?.Trans_Type ? getIcons(o?.Trans_Type) : undefined}\n                        classCount={i + 7}\n                        firstVal={o?.Trans_Amount ? NumberFormat(parseInt(o?.Trans_Amount)) : 0}\n                        secondVal={o?.Trans_Count ? NumberFormat(o?.Trans_Count) : 0}\n                    />\n                ))}\n                {secRow?.map((o, i) => (\n                    <CardComp\n                        key={i}\n                        title={'EXPENCES'}\n                        icon={getIcons('EXPENCES')}\n                        classCount={19}\n                        firstVal={o?.Total_Cost_Vlaue ? NumberFormat(o?.Total_Cost_Vlaue) : 0}\n                    />\n                ))}\n            </div>\n\n            <Dialog\n                open={popUpDialogs.salesDetails}\n                onClose={() => setPopUpDialogs(pre => ({ ...pre, salesDetails: false }))}\n                fullWidth maxWidth='sm'\n            >\n                <DialogTitle>\n                    <span>\n                        <h4 className='d-flex justify-content-between flex-wrap'>\n                            <span>Sales Details</span>\n                            <span>\n                                {NumberFormat(\n                                    popUpDetails?.salesDetails?.reduce((sum, item) => sum += Number(item?.Amount), 0)\n                                )}\n                            </span>\n                        </h4>\n                    </span>\n                </DialogTitle>\n                <DialogContent>\n                    {/* <DisplayArrayData \n                        dataArray={popUpDetails.salesDetails} \n                        columns={Object.keys(popUpDetails?.salesDetails[0] ?? {}).map(head => ({\n                            Column_Name: head,\n                            Data_Type: 'string'\n                        }))} \n                    /> */}\n                    <FilterableTable \n                        dataArray={salesDetailsGrouped}\n                        columns={[\n                            {\n                                Field_Name: 'Party_Group',\n                                Fied_Data: 'string',\n                                isVisible: 1,\n                            },\n                            {\n                                isCustomCell: true,\n                                ColumnHeader: 'Total Amount',\n                                Cell: ({ row }) => NumberFormat(row?.groupedData?.reduce((acc, item) => acc + Number(item?.Amount), 0)),\n                                isVisible: 1,\n                            },\n                        ]}\n                        disablePagination={true}\n                        EnableSerialNumber\n                        isExpendable={true}\n                        expandableComp={({ row }) => (\n                            <FilterableTable \n                                dataArray={row?.groupedData ?? []}\n                                columns={[\n                                    {\n                                        Field_Name: 'Payment_Mode',\n                                        Fied_Data: 'string',\n                                        isVisible: 1,\n                                    },\n                                    {\n                                        Field_Name: 'Amount',\n                                        Fied_Data: 'number',\n                                        isVisible: 1,\n                                    },\n                                ]}\n                                disablePagination={true}\n                            />\n                        )}\n                    />\n                    {/* <div className=\"table-responsive\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    {Object.keys(popUpDetails?.salesDetails[0] ?? {}).map(head => (\n                                        <th className=\"fa-14 border \">{head}</th>\n                                    ))}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    {Object.keys(popUpDetails.salesDetails).map(head => (\n                                        <th className=\"fa-14 border \">{head}</th>\n                                    ))}\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div> */}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setPopUpDialogs(pre => ({ ...pre, salesDetails: false }))}></Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nexport default ManagementDashboard;","import { useEffect, useState } from \"react\"\nimport { CiCalendarDate } from \"react-icons/ci\";\nimport { CgSandClock } from \"react-icons/cg\";\nimport { HiUsers } from \"react-icons/hi2\";\nimport { RxLapTimer } from \"react-icons/rx\";\nimport { TbTargetArrow } from \"react-icons/tb\";\nimport { BiTask } from \"react-icons/bi\";\nimport PieChartComp from \"./chartComp\";\nimport { Card, CardHeader, CardContent, Paper, FormControlLabel, Switch } from '@mui/material'\nimport SOAComp from \"./erp/SOA\";\nimport AttendanceComp from \"../Attendance/attendanceComp\";\nimport ManagementDashboard from \"./managementDashboard\";\nimport { fetchLink } from '../../Components/fetchComponent'\nimport { ISOString } from \"../../Components/functions\";\n\n\n\nconst CommonDashboard = () => {\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\n    const [dashboardData, setDashboardData] = useState({});\n    const [workedDetais, setWorkedDetais] = useState([]);\n    const [myTasks, setMyTasks] = useState([]);\n    const [tallyDetails, setTallyDetails] = useState([]);\n    const isAdmin = Number(parseData?.UserTypeId) === 0 || Number(parseData?.UserTypeId) === 1\n    const isMangement = Number(parseData?.UserTypeId) === 2\n    const isEmp = Number(parseData?.UserTypeId) === 6 || Number(parseData?.UserTypeId) === 3;\n    const isCustomer = Number(parseData?.UserTypeId) === 4 || Number(parseData?.UserTypeId) === 5;\n    const [dispTask, setDispTask] = useState(false)\n\n    useEffect(() => {\n        if (isAdmin || isEmp || isMangement) {\n            fetchLink({\n                address: `dashboard/dashboardData?UserType=${parseData?.UserTypeId}&Emp_Id=${parseData?.UserId}`\n            })\n            .then(data => {\n                if (data.success) {\n                    setDashboardData(data.data[0]);\n                } else {\n                    setDashboardData({});\n                }\n            })\n            .catch(e => {\n                console.error(e);\n            });\n        }\n    }, [parseData?.UserId, parseData?.UserTypeId, isAdmin, isMangement, isEmp]);\n\n    useEffect(() => {\n        if (isEmp) {\n            fetchLink({\n                address:`dashboard/getTallyData?UserId=${parseData?.UserId}`\n            }).then(data => {\n                if (data.success) {\n                    setTallyDetails(data.data);\n                } else {\n                    setTallyDetails([])\n                }\n            }).catch(e => console.error(e))\n        }\n    }, [isEmp])\n\n    useEffect(() => {\n        if (isEmp) {\n            fetchLink({\n                address:`taskManagement/task/work?Emp_Id=${parseData?.UserId}&from=${ISOString()}&to=${ISOString()}`\n            }).then(data => {\n                if (data.success) {\n                    setWorkedDetais(data.data);\n                } else {\n                    setTallyDetails([])\n                }\n            }).catch(e => console.error(e))\n\n            fetchLink({\n                address:`taskManagement/tasks/myTasks?Emp_Id=${parseData?.UserId}&reqDate=${ISOString()}`\n            }).then(data => {\n                if (data.success) {\n                    data.data.sort((a, b) => {\n                        const [aHours, aMinutes] = a?.Sch_Time.split(':').map(Number);\n                        const [bHours, bMinutes] = b?.Sch_Time.split(':').map(Number);\n                        if (aHours !== bHours) {\n                            return aHours - bHours;\n                        }\n                        return aMinutes - bMinutes;\n                    });\n                    setMyTasks(data.data);\n                } else {\n                    setMyTasks([])\n                }\n            }).catch(e => console.error(e))\n        }\n    }, [isEmp, parseData?.UserId])\n\n    const CardComp = ({ title, icon, firstVal, secondVal, classCount }) => {\n        return (\n            <>\n                <div className={`${(isAdmin || isMangement) && 'col-xxl-3'} col-lg-4 col-md-6 col-sm-12 p-2`}>\n                    <div className={\"coloredDiv d-flex align-items-center text-light cus-shadow coloredDiv\" + classCount}>\n                        <div className=\"flex-grow-1 p-3\">\n                            <h5 className=\"text-uppercase\">{title}</h5>\n                            <h3 className=\"fa-16 text-end pe-3\">\n                                <span style={{ fontSize: '30px' }}>{firstVal ? firstVal : 0} </span>\n                                {secondVal && '/' + secondVal}\n                            </h3>\n                        </div>\n                        {icon}\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n    const minFormat = (val) => {\n        const hour = Math.floor(Number(val) / 60);\n        const minutes = Number(val) % 60;\n        const formatHour = hour < 10 ? '0' + hour : hour;\n        const formatMinute = minutes < 10 ? '0' + minutes : minutes;\n\n        return (formatHour && formatMinute) ? formatHour + ':' + formatMinute : '00:00';\n    }\n\n    const statusColor = (id) => {\n        const numId = Number(id);\n        const color = ['bg-dark', 'bg-info', 'bg-warning', 'bg-success', 'bg-danger'];\n        return color[numId]\n    }\n\n    return (\n        <>\n            {isCustomer && <SOAComp />}\n\n            {(isMangement || isAdmin) && <ManagementDashboard />}\n\n            {(isAdmin || isMangement) && (\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={dispTask}\n                            onChange={e => setDispTask(e.target.checked)}\n                        />\n                    }\n                    label=\"Show Task Management\"\n                    className=\" fw-bold text-primary\"\n                />\n            )}\n\n            <div className=\"px-1\">\n                {((isAdmin || isMangement) && dispTask) && (\n                    <div className=\"row\">\n                        <CardComp\n                            title={'Projects'}\n                            icon={<TbTargetArrow style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.ActiveProjects}\n                            secondVal={dashboardData?.AllProjects}\n                            classCount={'1'}\n                        />\n                        <CardComp\n                            title={'Schedule'}\n                            icon={<CiCalendarDate style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.ActiveSchedule}\n                            secondVal={dashboardData?.AllSchedule}\n                            classCount={'2'}\n                        />\n                        <CardComp\n                            title={'Completed Tasks'}\n                            icon={<BiTask style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.TaskCompleted}\n                            // secondVal={dashboardData?.TaskAssigned}\n                            classCount={'3'}\n                        />\n                        <CardComp\n                            title={'Employee'}\n                            icon={<HiUsers style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.EmployeeCounts}\n                            secondVal={Number(dashboardData?.EmployeeCounts) + dashboardData?.OtherUsers}\n                            classCount={'4'}\n                        />\n                        <CardComp\n                            title={'Worked Hours'}\n                            icon={<RxLapTimer style={{ fontSize: '80px' }} />}\n                            firstVal={minFormat(dashboardData?.TotalMinutes)}\n                            classCount={'5'}\n                        />\n                        <CardComp\n                            title={'Today Tasks'}\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.TodayTaskCompleted}\n                            secondVal={dashboardData?.TodayTasks}\n                            classCount={'6'}\n                        />\n                    </div>\n                )}\n                {isEmp && (\n                    <div className=\"row\">\n                        <CardComp\n                            title={'Completed Tasks'}\n                            firstVal={dashboardData?.TaskCompleted}\n                            secondVal={dashboardData?.TotalTasks}\n                            icon={<BiTask style={{ fontSize: '80px' }} />}\n                            classCount={'1'} />\n                        <CardComp\n                            title={'Today Tasks'}\n                            firstVal={dashboardData?.TodayTaskCompleted}\n                            secondVal={dashboardData?.TodayTasks}\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\n                            classCount={'2'} />\n                        <CardComp\n                            title={'Total Work Hours'}\n                            firstVal={minFormat(dashboardData?.WorkedMinutes)}\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\n                            classCount={'3'} />\n                    </div>\n                )}\n            </div>\n\n            <br />\n\n            {isEmp && <AttendanceComp />}\n\n            <br />\n\n            {(isEmp && workedDetais.length > 0) && (\n                <>\n                    <Card>\n                        <CardContent sx={{ pb: 2 }}>\n                            <h5>Today Activity</h5>\n                            <PieChartComp TasksArray={workedDetais} />\n                            <br />\n                        </CardContent>\n                    </Card>\n                    <br />\n                </>\n            )}\n\n            {(isEmp && myTasks.length > 0) && (\n                <Card>\n                    <CardHeader title={'Today Tasks:' + myTasks.length} sx={{ pb: 0 }} />\n                    <CardContent>\n\n                        <div className=\"table-responsive\">\n                            <table className=\"table mb-1 \">\n                                <thead>\n                                    <tr>\n                                        <th className=\"fa-13 border\">SNo</th>\n                                        <th className=\"fa-13 border\">Task</th>\n                                        <th className=\"fa-13 border\">Timer Based</th>\n                                        <th className=\"fa-13 border\">Schedule</th>\n                                        <th className=\"fa-13 border\">Duration</th>\n                                        <th className=\"fa-13 border\">Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {myTasks.map((o, i) => (\n                                        <tr key={i}>\n                                            <td className=\"fa-13 border\">{i + 1}</td>\n                                            <td className=\"fa-13 border\">{o?.Task_Name}</td>\n                                            <td className=\"fa-13 border text-center\">\n                                                <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(Number(o?.Timer_Based) === 1 ? 3 : 1)}`}>\n                                                    {Number(o?.Timer_Based) === 1 ? 'Yes' : 'No'}\n                                                </span>\n                                            </td>\n                                            <td className=\"fa-13 border text-center\">{o?.Sch_Time} - {o?.EN_Time}</td>\n                                            <td className=\"fa-13 border text-center\">{o?.Sch_Period}</td>\n                                            <td className=\"fa-13 border text-center\">\n                                                <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(o?.Work_Id ? 3 : 1)}`}>\n                                                    {o?.Work_Id ? 'Completed' : 'Pending'}\n                                                </span>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </CardContent>\n                </Card>\n            )}\n\n            <br />\n\n            {(isEmp && tallyDetails?.length > 0) && (\n                <Card component={Paper}>\n                    <CardHeader title=\"Tally Entries\" sx={{ pb: 0 }} />\n                    <CardContent>\n                        <div className=\"table-responsive\">\n                            <table className=\"table\">\n                                <thead>\n                                    <tr>\n                                        <th className=\"fa-13 border\">Sno</th>\n                                        <th className=\"fa-13 border\">Particulars</th>\n                                        <th className=\"fa-13 border\">Value</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {tallyDetails?.map((o, i) => (\n                                        <tr key={i}>\n                                            <td className=\"fa-13 border\">{i + 1}</td>\n                                            <td className=\"fa-13 border\">{o?.Particulars}</td>\n                                            <td className=\"fa-13 border\">{o?.Tally_Count}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </CardContent>\n                </Card>\n            )}\n\n        </>\n    )\n}\n\n\nexport default CommonDashboard"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","FilterableTable","_ref","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","PDFPrintOption","ExcelPrintOption","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","printRef","useRef","columnAlign","type","class","columnVerticalAlign","sortedData","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Boolean","align","find","verticalAlign","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","value","console","log","Fied_Data","colSpan","Number","useReactToPrint","content","current","Button","variant","color","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","disabled","startIcon","Download","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","htmlFor","style","padding","id","checked","onChange","target","TableContainer","component","Paper","maxHeight","ref","Table","stickyHeader","TableHead","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","TasksArray","chartData","setChartData","chartInstance","setChartInstance","totalTime","setTotalTime","useEffect","totalDuration","reduce","acc","task","start","Date","toISOString","split","Start_Time","End_Time","firstTaskStart","freeTime","totalSeconds","Math","floor","hours","minutes","seconds","padStart","taskData","duration","label","Task_Name","getRandomColor","labels","datasets","borderColor","borderWidth","push","destroy","ctx","document","getElementById","newChartInstance","Chart","options","responsive","plugins","tooltip","callbacks","context","parsed","total","dataset","curr","percentage","round","datalabels","formatter","chart","dataIndex","value1","random","width","height","SOAComp","_SOA$","_SOA$2","_SOA$3","_SOA$4","_SOA$5","_SOA$6","_SOA$7","_SOA$8","_SOA$9","_SOA$10","parseData","JSON","parse","localStorage","getItem","isCustomer","setIsCustomer","setDataArray","UserId","setTotal","dialog","setDialog","SOA","setSOA","clickedRow","setClickedRow","today","firstDayOfMonth","getFullYear","getMonth","selectedRange","setSelectedRange","to","imageSource","logo","closingBalance","setClosingBalance","debit","credit","fetchLink","address","then","status","_data$data","temp","obj","Bal_Amount","catch","getInfo","prop","mode","_rowData","_rowData2","_rowData3","rowData","Cust_Id","tally_id","Company_Id","_data$data2","bal","Debit_Amt","Credit_Amt","handleClose","handlePrint","_Fragment","Name","toLocaleString","_o$Bal_Amount","LaunchOutlined","Company_Name","ledger_name","CR_DR","Dialog","onClose","fullScreen","fullWidth","DialogTitle","Customer_name","XLSXUtils","writeXLSX","toLocaleDateString","day","month","year","hour","minute","second","generateExcel","Ledger_Date","Purticular","Ledger_Desc","InvoiceNo","invoice_no","Debit","Credit","Company","Ledger","Ledger_Name","Mobile_Number","Mobile_no","DialogContent","src","alt","Contact_Person","window","alert","DialogActions","AttendanceComp","storage","initialValue","Latitude","Longitude","Description","lastAttendance","setLastAttendance","reload","setReload","inputValue","setInputValue","success","resetValues","Card","StartDay","async","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","code","PERMISSION_DENIED","toast","warn","message","getLocation","hasLocationAccess","method","bodyData","Active_Status","CardContent","Start_Date","maxWidth","placeholder","EndDay","Id","getIcons","str","_iconArr$find","icon","LuArrowUpWideNarrow","ShoppingCart","IoReceiptOutline","HiOutlineCurrencyRupee","PiHandCoinsFill","BsCartPlus","FaCubesStacked","CardComp","firstVal","secondVal","classCount","ManagementDashboard","_popUpDetails$salesDe","UserAccess","UserTypeId","mangementReport","setMangementReport","secRow","setSecRow","theredRow","setTheredRow","popUpDetails","setPopUpDetails","salesDetails","popUpDialogs","setPopUpDialogs","setFilter","date","ISOString","Company_id","salesDetailsGrouped","groupData","Stock_Value","Trans_Type","Trans_Amount","Trans_Count","Total_Cost_Vlaue","sum","item","Amount","_row$groupedData","groupedData","_row$groupedData2","CommonDashboard","dashboardData","setDashboardData","workedDetais","setWorkedDetais","myTasks","setMyTasks","tallyDetails","setTallyDetails","isAdmin","isMangement","isEmp","dispTask","setDispTask","aHours","aMinutes","Sch_Time","bHours","bMinutes","minFormat","formatHour","formatMinute","statusColor","FormControlLabel","control","Switch","TbTargetArrow","ActiveProjects","AllProjects","CiCalendarDate","ActiveSchedule","AllSchedule","BiTask","TaskCompleted","HiUsers","EmployeeCounts","OtherUsers","RxLapTimer","TotalMinutes","CgSandClock","TodayTaskCompleted","TodayTasks","TotalTasks","WorkedMinutes","pb","PieChartComp","CardHeader","Timer_Based","EN_Time","Sch_Period","Work_Id","Particulars","Tally_Count"],"sourceRoot":""}