{"version":3,"file":"static/js/7060.28918ed9.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Dashboard/chartComp.jsx","Pages/Dashboard/erp/SOA.jsx","Pages/Attendance/attendanceComp.jsx","Pages/Dashboard/managementDashboard.jsx","Pages/Dashboard/commonDashboard.jsx"],"sourcesContent":["import React, { Fragment, useRef, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton, Button, Popover, MenuList, MenuItem, ListItemIcon, ListItemText, Tooltip } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} name\r\n * @property {Element} icon\r\n * @property {Function} onclick\r\n * @property {boolean} disabled\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n * @param {boolean} [props.PDFPrintOption]\r\n * @param {boolean} [props.ExcelPrintOption]\r\n * @param {boolean} [props.maxHeightOption]\r\n * @param {React.ReactElement} [props.ButtonArea]\r\n * @param {Array<Menu>} props.MenuButtons\r\n */\r\n\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'middle') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst createPopUpMenu = (name, icon, onclick, disabled = false) => (\r\n    <MenuItem\r\n        onClick={onclick}\r\n        disabled={disabled}\r\n    >\r\n        <ListItemIcon>{icon}</ListItemIcon>\r\n        <ListItemText>{name}</ListItemText>\r\n    </MenuItem>\r\n)\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = []\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                    column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                                )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                            column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                        )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const TableActions = () => {\r\n        const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n        const popOverOpen = Boolean(anchorEl);\r\n\r\n        const handleClick = (event) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Tooltip title='Export options and more...'>\r\n                    <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </Tooltip>\r\n\r\n                <Popover\r\n                    open={popOverOpen}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                >\r\n                    <MenuList>\r\n\r\n                        {maxHeightOption && (\r\n                            <MenuItem\r\n                                onClick={() => setShowFullHeight(pre => !pre)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    {showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />\r\n                                    }\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    color={showFullHeight ? 'success' : ''}\r\n                                >Max Height</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {PDFPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => generatePDF(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download PDF</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {ExcelPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => exportToExcel(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download Excel</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {MenuButtons.map(btn => createPopUpMenu(btn.name, btn.icon, btn.onclick, btn.disabled))}\r\n\r\n                    </MenuList>\r\n                </Popover>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='rounded-3 bg-white overflow-hidden'>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {/* {maxHeightOption && (\r\n                    <div>\r\n                        <label className=\"form-check-label p-1\" htmlFor=\"fullHeight\">Max Height</label>\r\n                        <input\r\n                            className=\"form-check-input shadow-none\"\r\n                            style={{ padding: '0.7em' }}\r\n                            type=\"checkbox\"\r\n                            id=\"fullHeight\"\r\n                            checked={showFullHeight}\r\n                            onChange={e => setShowFullHeight(e.target.checked)}\r\n                        />\r\n                    </div>\r\n                )} */}\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && <TableActions />}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: []\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    // createPopUpMenu,\r\n}","import React, { useEffect, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-plugin-datalabels';\n\n\nconst PieChartComp = ({ TasksArray }) => {\n    const [chartData, setChartData] = useState(null);\n    const [chartInstance, setChartInstance] = useState(null);\n    const [totalTime, setTotalTime] = useState(null);\n\n    useEffect(() => {\n        if (TasksArray.length > 0) {\n            const totalDuration = TasksArray.reduce((acc, task) => {\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\n                return acc + (end - start);\n            }, 0);\n\n            const firstTaskStart = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[0].Start_Time);\n            const lastTaskEnd = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[TasksArray.length - 1].End_Time);\n            const totalTime = lastTaskEnd - firstTaskStart;\n            const freeTime = totalTime - totalDuration;\n\n            const totalSeconds = Math.floor(totalTime / 1000);\n            const hours = Math.floor(totalSeconds / 3600);\n            const minutes = Math.floor((totalSeconds % 3600) / 60);\n            const seconds = totalSeconds % 60;\n            setTotalTime(`${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`);\n\n            const taskData = TasksArray.map(task => {\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\n                const duration = end - start;\n                return {\n                    label: `${task.Task_Name} (${task.Start_Time} - ${task.End_Time})`,\n                    duration,\n                    backgroundColor: getRandomColor()\n                };\n            });\n\n            const chartData = {\n                labels: taskData.map(task => task.label),\n                datasets: [{\n                    data: taskData.map(task => task.duration),\n                    backgroundColor: taskData.map(task => task.backgroundColor),\n                    borderColor: 'rgba(255, 255, 255, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            chartData.labels.push('Free Time');\n            chartData.datasets[0].data.push(freeTime);\n            chartData.datasets[0].backgroundColor.push('#ADD8E6');\n\n            setChartData(chartData);\n        }\n    }, [TasksArray]);\n\n    useEffect(() => {\n        if (chartData) {\n            if (chartInstance) {\n                chartInstance.destroy();\n            }\n\n            const ctx = document.getElementById('empWokHours');\n            const newChartInstance = new Chart(ctx, {\n                type: 'pie',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    plugins: {\n                        tooltip: {\n                            callbacks: {\n                                label: function (context) {\n                                    // const label = context.label || '';\n                                    const value = context.parsed || 0;\n                                    const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\n                                    const percentage = Math.round((value / total) * 100);\n                                    const minutes = Math.round(value / (1000 * 60));\n                                    return `${minutes} minutes (${percentage}%)`;\n                                }\n                            }\n                        },\n                        datalabels: {\n                            color: '#fff',\n                            formatter: (value, context) => {\n                                const label = context.chart.data.labels[context.dataIndex];\n                                const value1 = context.parsed || 0;\n                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\n                                const percentage = Math.round((value1 / total) * 100);\n                                return `${label}: ${value} (${percentage}%)`;\n                            }\n                        }                        \n                    }\n                }\n            });\n\n            setChartInstance(newChartInstance);\n        }\n    }, [chartData]);\n\n    // for Dynamic background colors\n    const getRandomColor = () => {\n        const letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    };\n\n    return TasksArray.length > 0 ? (\n        <div className='d-flex flex-column align-items-center my-3' style={{ maxHeight: '500px' }}>\n            {totalTime && <p className='my-2'>Total Time: {totalTime}</p>}\n            <canvas id=\"empWokHours\" width=\"400\" height=\"100\"></canvas>\n        </div>\n    ) : (\n        <h5 className=\"text-center my-5\">No Data For PieChart!</h5>\n    )\n};\n\nexport default PieChartComp;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { LaunchOutlined } from '@mui/icons-material'\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Button } from \"@mui/material\";\nimport { useReactToPrint } from 'react-to-print';\nimport { utils as XLSXUtils, writeFile as writeXLSX } from 'xlsx';\nimport logo from '../ic_launcher.png';\nimport { fetchLink } from '../../../Components/fetchComponent'\n\n\nconst SOAComp = () => {\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\n    const [isCustomer, setIsCustomer] = useState(false)\n    const [dataArray, setDataArray] = useState([]);\n    const UserId = parseData?.UserId;\n    // const token = parseData?.Autheticate_Id;\n    const [total, setTotal] = useState(0)\n    const [dialog, setDialog] = useState(false)\n    const [SOA, setSOA] = useState([])\n    const [clickedRow, setClickedRow] = useState({})\n    const today = new Date();\n    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 2);\n\n    const [selectedRange, setSelectedRange] = useState({\n        from: firstDayOfMonth.toISOString().split('T')[0],\n        to: new Date().toISOString().split('T')[0],\n    });\n\n    const imageSource = logo\n    const [closingBalance, setClosingBalance] = useState({ debit: 0, credit: 0 });\n    const printRef = useRef()\n\n    useEffect(() => {\n        fetchLink({\n            address: `userModule/customer/getBalance?UserId=${UserId}`\n        }).then(data => {\n            if (data.status === 'Success') {\n                setDataArray(data.data)\n                let temp = 0;\n                data.data?.forEach(obj => {\n                    temp += Number(obj.Bal_Amount)\n                })\n                setTotal(temp)\n            }\n            if (data?.isCustomer) {\n                setIsCustomer(true)\n            } else {\n                setIsCustomer(false)\n            }\n        }).catch(e => console.error(e))\n    }, [])\n\n    const getInfo = (prop, mode) => {\n        let rowData;\n        if (mode && mode === 1) {\n            rowData = clickedRow;\n        } else {\n            rowData = prop\n        }\n        setClickedRow(rowData)\n        setDialog(true);\n        fetchLink({\n            address: `userModule/customer/StatementOfAccound?Cust_Id=${rowData?.Cust_Id}&Acc_Id=${rowData?.tally_id}&Company_Id=${rowData?.Company_Id}&Fromdate=${selectedRange?.from}&Todate=${selectedRange?.to}`\n        }).then(data => {\n            setSOA(data.data)\n            let bal = { debit: 0, credit: 0 }\n            data?.data?.forEach(obj => {\n                bal.debit += Number(obj.Debit_Amt)\n                bal.credit += Number(obj.Credit_Amt)\n            })\n            setClosingBalance(bal)\n        }).catch(e => console.error(e))\n    }\n\n    const handleClose = () => {\n        setDialog(false);\n        setSOA([]);\n        setClickedRow({});\n        setSelectedRange({\n            from: firstDayOfMonth.toISOString().split('T')[0],\n            to: new Date().toISOString().split('T')[0],\n        })\n    }\n\n    const handlePrint = useReactToPrint({\n        content: () => printRef.current,\n    });\n\n    const generateExcel = (data) => {\n        const worksheet = XLSXUtils.json_to_sheet(data);\n        const workbook = XLSXUtils.book_new();\n        XLSXUtils.book_append_sheet(workbook, worksheet, 'Sheet1');\n        writeXLSX(workbook, `erpsmt_SOA_${new Date().toLocaleDateString('en-IN', {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        })}.xlsx`);\n    }\n\n    return isCustomer ? (\n        <>\n            <div className=\"card\">\n                <div className=\"card-header py-3 bg-white\" >\n                    <p className=\"mb-0 fw-bold\" >\n                        <span>Balance of {parseData?.Name}</span>\n                        <span className={total > 0 ? 'text-primary' : 'text-danger'}> &nbsp;( {total.toLocaleString('en-IN') + (total < 0 ? ' CR' : ' DR')} )</span>\n                    </p>\n                </div>\n                <div className=\"card-body p-0 table-responsive\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th style={{ fontSize: '13px' }}>S.No</th>\n                                <th style={{ fontSize: '13px' }}> - </th>\n                                <th style={{ fontSize: '13px' }}>Company</th>\n                                <th style={{ fontSize: '13px' }}>Ledger</th>\n                                <th style={{ fontSize: '13px' }}>Balance</th>\n                                <th style={{ fontSize: '13px' }}>Dr/Cr</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {dataArray.map((o, i) => (\n                                <tr key={i}>\n                                    <td style={{ fontSize: '13px' }}>{i + 1}</td>\n                                    <td style={{ fontSize: '13px' }}>\n                                        <button\n                                            className=\"icon-btn\"\n                                            onClick={() => { getInfo(o) }}>\n                                            <LaunchOutlined sx={{ fontSize: 'inherit' }} />\n                                        </button>\n                                    </td>\n                                    <td style={{ fontSize: '13px' }}>{o?.Company_Name}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.ledger_name}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.Bal_Amount?.toLocaleString('en-IN')}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.CR_DR}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <Dialog\n                open={dialog}\n                onClose={handleClose}\n                fullScreen\n                fullWidth>\n                <DialogTitle className=\"border-bottom text-primary d-flex align-items-center fa-18\">\n                    <span className=\"flex-grow-1\">Transaction Report of {clickedRow?.Customer_name}</span>\n                    <Button\n                        className=\"fw-bold\"\n                        onClick={handlePrint} >\n                        PDF\n                    </Button>\n                    <Button\n                        className=\"ms-1 fw-bold\"\n                        onClick={() => {\n                            const transformedData = SOA.map((o, i) => ({\n                                Sno: i + 1,\n                                Date: new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\n                                    day: '2-digit',\n                                    month: '2-digit',\n                                    year: 'numeric',\n                                }),\n                                Purticular: o?.Ledger_Desc,\n                                InvoiceNo: o?.invoice_no,\n                                Debit: Boolean(Number(o.Debit_Amt)) ? o.Debit_Amt.toLocaleString('en-IN') : '',\n                                Credit: Boolean(Number(o.Credit_Amt)) ? o.Credit_Amt.toLocaleString('en-IN') : '',\n                                Company: o?.Company_Name,\n                                Ledger: o?.Ledger_Name,\n                                Mobile_Number: o?.Mobile_no\n                            }));\n                            generateExcel(transformedData);\n                        }}\n                    >\n                        excel\n                    </Button>\n                </DialogTitle>\n                <DialogContent className=\"rounded-2 shadow m-4 mb-2 p-0\" >\n                    <div className=\"row align-content-center\">\n                        <div className=\"col-lg-1\">\n                            <img src={imageSource} alt=\"Company Logo\" className=\"smtlogo\" />\n                        </div>\n                        <div className=\"col-lg-4 p-2 ps-3\">\n                            <table className=\"table border-0\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0\">Company</td>\n                                        <td className=\"border-0\">{clickedRow?.Company_Name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Ledger Name</td>\n                                        <td className=\"border-0\">{clickedRow?.ledger_name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Contact Person</td>\n                                        <td className=\"border-0\">{SOA[0]?.Contact_Person}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Mobile</td>\n                                        <td className=\"border-0\">{SOA[0]?.Mobile_no}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n\n                        </div>\n                        <div className=\"col-lg-4 p-2\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0\">Opening Balnce</td>\n                                        <td className=\"border-0 text-primary\">{\n                                            SOA[0]?.Debit_Amt > 0\n                                                ? SOA[0]?.Debit_Amt.toLocaleString('en-IN') + ' DR'\n                                                : SOA[0]?.Credit_Amt.toLocaleString('en-IN') + ' CR'\n                                        }\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Closing Balance</td>\n                                        <td className=\"border-0 text-primary\">{\n                                            (closingBalance?.debit - closingBalance?.credit) < 0\n                                                ? (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + \" CR\"\n                                                : (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + ' DR'\n                                        }\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"col-lg-3 p-2\">\n                            <table className=\"table border-0\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0\">From :</td>\n                                        <td className=\"p-0 border-0\">\n                                            <input\n                                                type=\"date\"\n                                                className=\"form-control w-auto ms-2\"\n                                                onChange={(e) => setSelectedRange({ ...selectedRange, from: e.target.value })}\n                                                value={selectedRange.from} />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">To :</td>\n                                        <td className=\"p-0 border-0\">\n                                            <input\n                                                type=\"date\"\n                                                className=\"form-control w-auto ms-2\"\n                                                onChange={(e) => {\n                                                    if (selectedRange.from && selectedRange.from <= e.target.value) {\n                                                        setSelectedRange({ ...selectedRange, to: e.target.value });\n                                                    } else {\n                                                        window.alert('Invald Date Range')\n                                                    }\n                                                }}\n                                                value={selectedRange.to}\n                                                disabled={!selectedRange.from} />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\"></td>\n                                        <td className=\"border-0\">\n                                            <button\n                                                className=\"btn text-white\"\n                                                style={{ backgroundColor: 'rgb(66, 34, 225)' }}\n                                                onClick={() => { getInfo('', 1) }}>Search</button>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                    <div className=\"p-2 table-responsive\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th className=\"fa-13 tble-hed-stick\">-</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Date</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Particulars</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Invoice No</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Dr</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Cr</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {SOA.map((o, i) => (\n                                    <tr key={i}>\n                                        <td className=\"fa-13 bg-light\">{i + 1}</td>\n                                        <td className=\"fa-13 bg-light\">\n                                            {new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\n                                                day: '2-digit',\n                                                month: '2-digit',\n                                                year: 'numeric',\n                                            })}\n                                        </td>\n                                        <td className=\"fa-13 bg-light\">{o.Ledger_Desc}</td>\n                                        <td className=\"fa-13\">{o.invoice_no}</td>\n                                        <td className=\"fa-13\">{o.Debit_Amt.toLocaleString('en-IN')}</td>\n                                        <td className=\"fa-13 bg-light\">{o.Credit_Amt.toLocaleString('en-IN')}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n\n                    {/* printable div */}\n                    <div className=\"d-none\">\n                        <div className=\"d-block px-5 py-2\" ref={printRef}>\n                            <img src={imageSource} alt=\"smtlogo\" className=\"smtlogo\" />\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Company</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{clickedRow?.Company_Name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Ledger Name</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{clickedRow?.ledger_name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Contact Person</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{SOA[0]?.Contact_Person}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Mobile</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{SOA[0]?.Mobile_no}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">From</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{selectedRange.from}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">To</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{selectedRange.to}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Opening Balance</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">\n                                            {\n                                                SOA[0]?.Debit_Amt > 0\n                                                    ? SOA[0]?.Debit_Amt.toLocaleString('en-IN') + ' DR'\n                                                    : SOA[0]?.Credit_Amt.toLocaleString('en-IN') + ' CR'\n                                            }\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Closing Balance</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">\n                                            {\n                                                (closingBalance?.debit - closingBalance?.credit) < 0\n                                                    ? (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + \" CR\"\n                                                    : (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + ' DR'\n                                            }\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <div className=\"p-2 table-responsive\">\n                                <table className=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th className=\"fa-13 tble-hed-stick\">-</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Date</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Particulars</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Invoice No</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Dr</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Cr</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {SOA.map((o, i) => (\n                                            <tr key={i}>\n                                                <td className=\"fa-13 bg-light\">{i + 1}</td>\n                                                <td className=\"fa-13 bg-light\">\n                                                    {new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\n                                                        day: '2-digit',\n                                                        month: '2-digit',\n                                                        year: 'numeric',\n                                                    })}\n                                                </td>\n                                                <td className=\"fa-13 bg-light\">{o.Ledger_Desc}</td>\n                                                <td className=\"fa-13\">{o.invoice_no}</td>\n                                                <td className=\"fa-13\">{Boolean(Number(o.Debit_Amt)) && o.Debit_Amt.toLocaleString('en-IN')}</td>\n                                                <td className=\"fa-13 bg-light\">{Boolean(Number(o.Credit_Amt)) && o.Credit_Amt.toLocaleString('en-IN')}</td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} variant='contained' color='error'>Close</Button>\n                </DialogActions>\n            </Dialog>\n\n\n        </>\n    ) : <></>\n}\n\nexport default SOAComp;","import { Button, Card, CardContent, Dialog, DialogContent, DialogTitle, DialogActions } from \"@mui/material\"\nimport { useEffect, useState } from \"react\";\nimport { LocalDate, LocalTime } from \"../../Components/functions\";\nimport { toast } from \"react-toastify\";\nimport { fetchLink } from '../../Components/fetchComponent'\n\nconst AttendanceComp = () => {\n    const storage = JSON.parse(localStorage.getItem('user'));\n    const initialValue = {\n        Latitude: null,\n        Longitude: null,\n        error: null,\n        UserId: storage.UserId,\n        Description: '',\n        dialog: false\n    }\n    const [lastAttendance, setLastAttendance] = useState({});\n    const [reload, setReload] = useState(false);\n    const [inputValue, setInputValue] = useState(initialValue);\n\n    useEffect(() => {\n        setLastAttendance({})\n        fetchLink({\n            address: `empAttendance/attendance?UserId=${storage?.UserId}`,\n        }).then(data => {\n            if (data?.success && data?.data?.length > 0) {\n                setLastAttendance(data?.data[0])\n            }\n        }).catch(e => console.error(e))            \n    }, [storage?.UserId, reload])\n\n    const getLocation = async () => {\n\n        try {\n\n            const position = await new Promise((resolve, reject) => {\n                navigator.geolocation.getCurrentPosition(resolve, reject);\n            });\n\n            const { latitude, longitude } = position.coords;\n\n            setInputValue(pre => ({\n                ...pre,\n                Latitude: latitude,\n                Longitude: longitude,\n                error: null\n            }));\n\n            return true;\n\n        } catch (error) {\n            if (error.code === error.PERMISSION_DENIED) {\n                setInputValue(pre => ({\n                    ...pre,\n                    Latitude: null,\n                    Longitude: null,\n                    error: 'Location access denied'\n                }));\n\n                toast.warn('Allow Location Access');\n            } else {\n                setInputValue(pre => ({\n                    ...pre,\n                    Latitude: null,\n                    Longitude: null,\n                    error: error.message\n                }));\n            }\n\n            return false;\n        }\n    };\n\n    const StartDay = () => {\n        getLocation().then(hasLocationAccess => {\n            if (hasLocationAccess) {\n                if (inputValue?.Latitude && inputValue?.Longitude) {\n                    fetchLink({\n                        address: `empAttendance/attendance`,\n                        method: 'POST',\n                        bodyData: {\n                            UserId: inputValue?.UserId,\n                            Latitude: inputValue?.Latitude,\n                            Longitude: inputValue?.Longitude\n                        }\n                    }).then(data => {\n                        setReload(!reload)\n                        if (data.success) {\n                            toast.success(data.message)\n                        } else {\n                            toast.error(data.message)\n                        }\n                    })\n                } else {\n                    toast.warn('Please Retry')\n                }\n            } else {\n                toast.error('There is a problem in get location')\n            }\n        });\n    };\n\n    const EndDay = () => {\n        fetchLink({\n            address: `empAttendance/attendance`,\n            method: 'PUT',\n            bodyData: {\n                Id: lastAttendance?.Id,\n                Description: inputValue?.Description\n            }\n        }).then(data => {\n            if (data.success) {\n                setReload(!reload)\n                toast.success(data.message);\n                resetValues()\n            } else {\n                toast.error(data.message)\n            }\n        })\n    }\n\n    const resetValues = () => {\n        setInputValue(initialValue)\n    }\n\n    return (\n        <>\n            <Card className=\"col-xl-4    col-lg-6 col-md-6\">\n                <div className=\"d-flex justify-content-between align-items-center p-3 border-bottom\">\n                    <h5 className=\"mb-0\">Attendance</h5>\n                    <Button\n                        variant='outlined'\n                        onClick={StartDay}\n                        disabled={Boolean(lastAttendance?.Active_Status)}\n                    >\n                        START Day\n                    </Button>\n                </div>\n                {Boolean(lastAttendance?.Active_Status) && (\n                    <>\n                        <CardContent >\n                            <div className=\"fw-bold text-muted\">\n                                <div className=\"d-flex justify-content-between\">\n                                    <span>Start Date</span><br />\n                                    <span>{lastAttendance?.Start_Date ? LocalDate(lastAttendance?.Start_Date) : ' --:--:-- '}</span>\n                                </div>\n                                <div className=\"d-flex justify-content-between\">\n                                    <span>In Time</span>\n                                    <span>{lastAttendance?.Start_Date ? LocalTime(lastAttendance?.Start_Date) : ' --:--:-- '}</span>\n                                </div>\n                            </div>\n                        </CardContent>\n                        <div className=\"border-top p-3 d-flex justify-content-end\">\n                            <Button variant='outlined' onClick={() => setInputValue(pre => ({ ...pre, dialog: true }))}>End Day</Button>\n                        </div>\n                    </>\n                )}\n            </Card>\n\n            <Dialog\n                open={inputValue?.dialog}\n                onClose={resetValues}\n                fullWidth maxWidth='md'\n            >\n                <DialogTitle>Cloase Attendance</DialogTitle>\n                <DialogContent>\n                    <label className=\"mb-3\">Work Summary</label>\n                    <textarea \n                        value={inputValue?.Description}\n                        className=\"cus-inpt\"\n                        rows={5}\n                        onChange={e => setInputValue(pre => ({ ...pre, Description: e.target.value}))}\n                        placeholder=\"Narrate the today's work summary\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={resetValues}>Cancel</Button>\n                    <Button variant='outlined' onClick={EndDay}>Confirm</Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\n\nexport default AttendanceComp;","import { useEffect, useState } from \"react\"\nimport { groupData, ISOString, NumberFormat } from \"../../Components/functions\";\nimport { ShoppingCart } from \"@mui/icons-material\";\nimport { LuArrowUpWideNarrow } from \"react-icons/lu\";\nimport { HiOutlineCurrencyRupee } from \"react-icons/hi\";\nimport { IoReceiptOutline } from \"react-icons/io5\";\nimport { BsCartPlus } from \"react-icons/bs\";\nimport { PiHandCoinsFill } from \"react-icons/pi\";\nimport { FaCubesStacked } from \"react-icons/fa6\";\nimport { fetchLink } from \"../../Components/fetchComponent\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\nimport FilterableTable from '../../Components/filterableTable2';\n\n\nconst getIcons = (str) => {\n    const iconArr = [\n        {\n            str: 'SALES',\n            icon: <LuArrowUpWideNarrow style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'PURCHASE',\n            icon: <ShoppingCart style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'RECEIPT',\n            icon: <IoReceiptOutline style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'PAYMENT',\n            icon: <HiOutlineCurrencyRupee style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'EXPENCES',\n            icon: <PiHandCoinsFill style={{ fontSize: '80px' }} />\n        },\n        {\n            str: 'PURCHASE ORDER',\n            icon: <BsCartPlus style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'STOCK VALUE',\n            icon: <FaCubesStacked style={{ fontSize: '70px' }} />,\n        },\n    ]\n\n    return iconArr.find(o => str === o.str)?.icon || <></>\n}\n\n\nconst CardComp = ({ title, icon, firstVal, secondVal, classCount, onClick }) => {\n    return (\n        <>\n            <div className={`col-xxl-3 col-lg-4 col-md-6 col-sm-12 p-2`}>\n                <div onClick={onClick} className={\"coloredDiv d-flex align-items-center text-light cus-shadow coloredDiv\" + classCount}>\n                    <div className=\"flex-grow-1 p-3\">\n                        <h5 >{title}</h5>\n                        <h3 className=\"fa-16 text-end pe-3\">\n                            <span style={{ fontSize: '30px' }}>{firstVal ? firstVal : 0} </span>\n                            {secondVal && '(' + secondVal + ')'}\n                        </h3>\n                    </div>\n                    {icon}\n                </div>\n            </div>\n        </>\n    )\n}\n\n\nconst ManagementDashboard = () => {\n    const storage = JSON.parse(localStorage.getItem('user'));\n    const UserAccess = Number(storage?.UserTypeId) === 2 || Number(storage?.UserTypeId) === 0 || Number(storage?.UserTypeId) === 1;\n\n    const [mangementReport, setMangementReport] = useState([]);\n    const [secRow, setSecRow] = useState([]);\n    const [theredRow, setTheredRow] = useState([]);\n\n    const [popUpDetails, setPopUpDetails] = useState({\n        salesDetails: [],\n    });\n\n    const [popUpDialogs, setPopUpDialogs] = useState({\n        salesDetails: false,\n    })\n\n    const [filter, setFilter] = useState({\n        date: ISOString(),\n    });\n\n    useEffect(() => {\n        if (UserAccess && storage.Company_id) {\n            fetchLink({\n                address: `dashboard/erp/dashboardData?Fromdate=${filter?.date}&Company_Id=${storage.Company_id}`\n            })\n                .then(data => {\n                    if (data.success) {\n                        setMangementReport(data?.data[0])\n                        setSecRow(data?.data[1])\n                        setTheredRow(data?.data[2]);\n                    }\n                })\n                .catch(e => console.error(e))\n        }\n    }, [UserAccess, filter.date]);\n\n    useEffect(() => {\n        if (UserAccess) {\n            fetchLink({\n                address: `dashboard/salesInfo?Fromdate=${filter?.date}&Todate=${filter?.date}`,\n                headers: {\n                    'Db': storage?.Company_id\n                }\n            }).then(data => {\n                if (data.success) {\n                    setPopUpDetails(pre => ({\n                        ...pre,\n                        salesDetails: data.data ?? []\n                    }));\n                } else {\n                    setPopUpDetails(pre => ({ ...pre, salesDetails: []}));\n                }\n            }).catch(e => console.error(e))\n        }\n    }, [filter.date]);\n\n    const salesDetailsGrouped = groupData(popUpDetails?.salesDetails, 'Party_Group');\n\n    return (\n        <>\n            <input\n                type=\"date\"\n                className=\"cus-inpt w-auto m-1\"\n                value={filter.date}\n                onChange={e => setFilter(pre => ({ ...pre, date: e.target.value }))}\n            />\n\n            <div className=\"p-1 row\">\n                {theredRow?.map((o, i) => (\n                    <CardComp\n                        key={i}\n                        icon={getIcons('STOCK VALUE')}\n                        title={'STOCK VALUE'}\n                        classCount={16}\n                        firstVal={o?.Stock_Value ? NumberFormat(parseInt(o?.Stock_Value)) : 0}\n                    />\n                ))}\n                {mangementReport?.map((o, i) => (\n                    <CardComp\n                        key={i}\n                        title={o?.Trans_Type}\n                        onClick={() => {\n                            switch (o?.Trans_Type) {\n                                case 'SALES':\n                                    setPopUpDialogs(pre => ({ ...pre, salesDetails: true }));\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }}\n                        icon={o?.Trans_Type ? getIcons(o?.Trans_Type) : undefined}\n                        classCount={i + 7}\n                        firstVal={o?.Trans_Amount ? NumberFormat(parseInt(o?.Trans_Amount)) : 0}\n                        secondVal={o?.Trans_Count ? NumberFormat(o?.Trans_Count) : 0}\n                    />\n                ))}\n                {secRow?.map((o, i) => (\n                    <CardComp\n                        key={i}\n                        title={'EXPENCES'}\n                        icon={getIcons('EXPENCES')}\n                        classCount={19}\n                        firstVal={o?.Total_Cost_Vlaue ? NumberFormat(o?.Total_Cost_Vlaue) : 0}\n                    />\n                ))}\n            </div>\n\n            <Dialog\n                open={popUpDialogs.salesDetails}\n                onClose={() => setPopUpDialogs(pre => ({ ...pre, salesDetails: false }))}\n                fullWidth maxWidth='sm'\n            >\n                <DialogTitle>\n                    <span>\n                        <h4 className='d-flex justify-content-between flex-wrap'>\n                            <span>Sales Details</span>\n                            <span>\n                                {NumberFormat(\n                                    popUpDetails?.salesDetails?.reduce((sum, item) => sum += Number(item?.Amount), 0)\n                                )}\n                            </span>\n                        </h4>\n                    </span>\n                </DialogTitle>\n                <DialogContent>\n                    {/* <DisplayArrayData \n                        dataArray={popUpDetails.salesDetails} \n                        columns={Object.keys(popUpDetails?.salesDetails[0] ?? {}).map(head => ({\n                            Column_Name: head,\n                            Data_Type: 'string'\n                        }))} \n                    /> */}\n                    <FilterableTable \n                        dataArray={salesDetailsGrouped}\n                        columns={[\n                            {\n                                Field_Name: 'Party_Group',\n                                Fied_Data: 'string',\n                                isVisible: 1,\n                            },\n                            {\n                                isCustomCell: true,\n                                ColumnHeader: 'Total Amount',\n                                Cell: ({ row }) => NumberFormat(row?.groupedData?.reduce((acc, item) => acc + Number(item?.Amount), 0)),\n                                isVisible: 1,\n                            },\n                        ]}\n                        disablePagination={true}\n                        EnableSerialNumber\n                        isExpendable={true}\n                        expandableComp={({ row }) => (\n                            <FilterableTable \n                                dataArray={row?.groupedData ?? []}\n                                columns={[\n                                    {\n                                        Field_Name: 'Payment_Mode',\n                                        Fied_Data: 'string',\n                                        isVisible: 1,\n                                    },\n                                    {\n                                        Field_Name: 'Amount',\n                                        Fied_Data: 'number',\n                                        isVisible: 1,\n                                    },\n                                ]}\n                                disablePagination={true}\n                            />\n                        )}\n                    />\n                    {/* <div className=\"table-responsive\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    {Object.keys(popUpDetails?.salesDetails[0] ?? {}).map(head => (\n                                        <th className=\"fa-14 border \">{head}</th>\n                                    ))}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    {Object.keys(popUpDetails.salesDetails).map(head => (\n                                        <th className=\"fa-14 border \">{head}</th>\n                                    ))}\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div> */}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setPopUpDialogs(pre => ({ ...pre, salesDetails: false }))}></Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nexport default ManagementDashboard;","import { useEffect, useState } from \"react\"\nimport { CiCalendarDate } from \"react-icons/ci\";\nimport { CgSandClock } from \"react-icons/cg\";\nimport { HiUsers } from \"react-icons/hi2\";\nimport { RxLapTimer } from \"react-icons/rx\";\nimport { TbTargetArrow } from \"react-icons/tb\";\nimport { BiTask } from \"react-icons/bi\";\nimport PieChartComp from \"./chartComp\";\nimport { Card, CardHeader, CardContent, Paper, FormControlLabel, Switch } from '@mui/material'\nimport SOAComp from \"./erp/SOA\";\nimport AttendanceComp from \"../Attendance/attendanceComp\";\nimport ManagementDashboard from \"./managementDashboard\";\nimport { fetchLink } from '../../Components/fetchComponent'\nimport { ISOString } from \"../../Components/functions\";\n\n\n\nconst CommonDashboard = () => {\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\n    const [dashboardData, setDashboardData] = useState({});\n    const [workedDetais, setWorkedDetais] = useState([]);\n    const [myTasks, setMyTasks] = useState([]);\n    const [tallyDetails, setTallyDetails] = useState([]);\n    const isAdmin = Number(parseData?.UserTypeId) === 0 || Number(parseData?.UserTypeId) === 1\n    const isMangement = Number(parseData?.UserTypeId) === 2\n    const isEmp = Number(parseData?.UserTypeId) === 6 || Number(parseData?.UserTypeId) === 3;\n    const isCustomer = Number(parseData?.UserTypeId) === 4 || Number(parseData?.UserTypeId) === 5;\n    const [dispTask, setDispTask] = useState(false)\n\n    useEffect(() => {\n        if (isAdmin || isEmp || isMangement) {\n            fetchLink({\n                address: `dashboard/dashboardData?UserType=${parseData?.UserTypeId}&Emp_Id=${parseData?.UserId}`\n            })\n            .then(data => {\n                if (data.success) {\n                    setDashboardData(data.data[0]);\n                } else {\n                    setDashboardData({});\n                }\n            })\n            .catch(e => {\n                console.error(e);\n            });\n        }\n    }, [parseData?.UserId, parseData?.UserTypeId, isAdmin, isMangement, isEmp]);\n\n    useEffect(() => {\n        if (isEmp) {\n            fetchLink({\n                address:`dashboard/getTallyData?UserId=${parseData?.UserId}`\n            }).then(data => {\n                if (data.success) {\n                    setTallyDetails(data.data);\n                } else {\n                    setTallyDetails([])\n                }\n            }).catch(e => console.error(e))\n        }\n    }, [isEmp])\n\n    useEffect(() => {\n        if (isEmp) {\n            fetchLink({\n                address:`taskManagement/task/work?Emp_Id=${parseData?.UserId}&from=${ISOString()}&to=${ISOString()}`\n            }).then(data => {\n                if (data.success) {\n                    setWorkedDetais(data.data);\n                } else {\n                    setTallyDetails([])\n                }\n            }).catch(e => console.error(e))\n\n            fetchLink({\n                address:`taskManagement/tasks/myTasks?Emp_Id=${parseData?.UserId}&reqDate=${ISOString()}`\n            }).then(data => {\n                if (data.success) {\n                    data.data.sort((a, b) => {\n                        const [aHours, aMinutes] = a?.Sch_Time.split(':').map(Number);\n                        const [bHours, bMinutes] = b?.Sch_Time.split(':').map(Number);\n                        if (aHours !== bHours) {\n                            return aHours - bHours;\n                        }\n                        return aMinutes - bMinutes;\n                    });\n                    setMyTasks(data.data);\n                } else {\n                    setMyTasks([])\n                }\n            }).catch(e => console.error(e))\n        }\n    }, [isEmp, parseData?.UserId])\n\n    const CardComp = ({ title, icon, firstVal, secondVal, classCount }) => {\n        return (\n            <>\n                <div className={`${(isAdmin || isMangement) && 'col-xxl-3'} col-lg-4 col-md-6 col-sm-12 p-2`}>\n                    <div className={\"coloredDiv d-flex align-items-center text-light cus-shadow coloredDiv\" + classCount}>\n                        <div className=\"flex-grow-1 p-3\">\n                            <h5 className=\"text-uppercase\">{title}</h5>\n                            <h3 className=\"fa-16 text-end pe-3\">\n                                <span style={{ fontSize: '30px' }}>{firstVal ? firstVal : 0} </span>\n                                {secondVal && '/' + secondVal}\n                            </h3>\n                        </div>\n                        {icon}\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n    const minFormat = (val) => {\n        const hour = Math.floor(Number(val) / 60);\n        const minutes = Number(val) % 60;\n        const formatHour = hour < 10 ? '0' + hour : hour;\n        const formatMinute = minutes < 10 ? '0' + minutes : minutes;\n\n        return (formatHour && formatMinute) ? formatHour + ':' + formatMinute : '00:00';\n    }\n\n    const statusColor = (id) => {\n        const numId = Number(id);\n        const color = ['bg-dark', 'bg-info', 'bg-warning', 'bg-success', 'bg-danger'];\n        return color[numId]\n    }\n\n    return (\n        <>\n            {isCustomer && <SOAComp />}\n\n            {(isMangement || isAdmin) && <ManagementDashboard />}\n\n            {(isAdmin || isMangement) && (\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={dispTask}\n                            onChange={e => setDispTask(e.target.checked)}\n                        />\n                    }\n                    label=\"Show Task Management\"\n                    className=\" fw-bold text-primary\"\n                />\n            )}\n\n            <div className=\"px-1\">\n                {((isAdmin || isMangement) && dispTask) && (\n                    <div className=\"row\">\n                        <CardComp\n                            title={'Projects'}\n                            icon={<TbTargetArrow style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.ActiveProjects}\n                            secondVal={dashboardData?.AllProjects}\n                            classCount={'1'}\n                        />\n                        <CardComp\n                            title={'Schedule'}\n                            icon={<CiCalendarDate style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.ActiveSchedule}\n                            secondVal={dashboardData?.AllSchedule}\n                            classCount={'2'}\n                        />\n                        <CardComp\n                            title={'Completed Tasks'}\n                            icon={<BiTask style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.TaskCompleted}\n                            // secondVal={dashboardData?.TaskAssigned}\n                            classCount={'3'}\n                        />\n                        <CardComp\n                            title={'Employee'}\n                            icon={<HiUsers style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.EmployeeCounts}\n                            secondVal={Number(dashboardData?.EmployeeCounts) + dashboardData?.OtherUsers}\n                            classCount={'4'}\n                        />\n                        <CardComp\n                            title={'Worked Hours'}\n                            icon={<RxLapTimer style={{ fontSize: '80px' }} />}\n                            firstVal={minFormat(dashboardData?.TotalMinutes)}\n                            classCount={'5'}\n                        />\n                        <CardComp\n                            title={'Today Tasks'}\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.TodayTaskCompleted}\n                            secondVal={dashboardData?.TodayTasks}\n                            classCount={'6'}\n                        />\n                    </div>\n                )}\n                {isEmp && (\n                    <div className=\"row\">\n                        <CardComp\n                            title={'Completed Tasks'}\n                            firstVal={dashboardData?.TaskCompleted}\n                            secondVal={dashboardData?.TotalTasks}\n                            icon={<BiTask style={{ fontSize: '80px' }} />}\n                            classCount={'1'} />\n                        <CardComp\n                            title={'Today Tasks'}\n                            firstVal={dashboardData?.TodayTaskCompleted}\n                            secondVal={dashboardData?.TodayTasks}\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\n                            classCount={'2'} />\n                        <CardComp\n                            title={'Total Work Hours'}\n                            firstVal={minFormat(dashboardData?.WorkedMinutes)}\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\n                            classCount={'3'} />\n                    </div>\n                )}\n            </div>\n\n            <br />\n\n            {isEmp && <AttendanceComp />}\n\n            <br />\n\n            {(isEmp && workedDetais.length > 0) && (\n                <>\n                    <Card>\n                        <CardContent sx={{ pb: 2 }}>\n                            <h5>Today Activity</h5>\n                            <PieChartComp TasksArray={workedDetais} />\n                            <br />\n                        </CardContent>\n                    </Card>\n                    <br />\n                </>\n            )}\n\n            {(isEmp && myTasks.length > 0) && (\n                <Card>\n                    <CardHeader title={'Today Tasks:' + myTasks.length} sx={{ pb: 0 }} />\n                    <CardContent>\n\n                        <div className=\"table-responsive\">\n                            <table className=\"table mb-1 \">\n                                <thead>\n                                    <tr>\n                                        <th className=\"fa-13 border\">SNo</th>\n                                        <th className=\"fa-13 border\">Task</th>\n                                        <th className=\"fa-13 border\">Timer Based</th>\n                                        <th className=\"fa-13 border\">Schedule</th>\n                                        <th className=\"fa-13 border\">Duration</th>\n                                        <th className=\"fa-13 border\">Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {myTasks.map((o, i) => (\n                                        <tr key={i}>\n                                            <td className=\"fa-13 border\">{i + 1}</td>\n                                            <td className=\"fa-13 border\">{o?.Task_Name}</td>\n                                            <td className=\"fa-13 border text-center\">\n                                                <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(Number(o?.Timer_Based) === 1 ? 3 : 1)}`}>\n                                                    {Number(o?.Timer_Based) === 1 ? 'Yes' : 'No'}\n                                                </span>\n                                            </td>\n                                            <td className=\"fa-13 border text-center\">{o?.Sch_Time} - {o?.EN_Time}</td>\n                                            <td className=\"fa-13 border text-center\">{o?.Sch_Period}</td>\n                                            <td className=\"fa-13 border text-center\">\n                                                <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(o?.Work_Id ? 3 : 1)}`}>\n                                                    {o?.Work_Id ? 'Completed' : 'Pending'}\n                                                </span>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </CardContent>\n                </Card>\n            )}\n\n            <br />\n\n            {(isEmp && tallyDetails?.length > 0) && (\n                <Card component={Paper}>\n                    <CardHeader title=\"Tally Entries\" sx={{ pb: 0 }} />\n                    <CardContent>\n                        <div className=\"table-responsive\">\n                            <table className=\"table\">\n                                <thead>\n                                    <tr>\n                                        <th className=\"fa-13 border\">Sno</th>\n                                        <th className=\"fa-13 border\">Particulars</th>\n                                        <th className=\"fa-13 border\">Value</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {tallyDetails?.map((o, i) => (\n                                        <tr key={i}>\n                                            <td className=\"fa-13 border\">{i + 1}</td>\n                                            <td className=\"fa-13 border\">{o?.Particulars}</td>\n                                            <td className=\"fa-13 border\">{o?.Tally_Count}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </CardContent>\n                </Card>\n            )}\n\n        </>\n    )\n}\n\n\nexport default CommonDashboard"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","FilterableTable","_ref","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Boolean","find","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","value","console","log","colSpan","Number","TableActions","anchorEl","setAnchorEl","popOverOpen","_Fragment","Tooltip","event","currentTarget","MoreVert","Popover","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","MenuItem","disabled","ListItemIcon","ToggleOn","color","ToggleOff","ListItemText","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","Download","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","btn","name","icon","onclick","createPopUpMenu","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","TasksArray","chartData","setChartData","chartInstance","setChartInstance","totalTime","setTotalTime","useEffect","totalDuration","reduce","acc","task","start","Date","toISOString","split","Start_Time","End_Time","firstTaskStart","freeTime","totalSeconds","Math","floor","hours","minutes","seconds","padStart","taskData","duration","label","Task_Name","getRandomColor","labels","datasets","borderColor","borderWidth","push","destroy","ctx","document","getElementById","newChartInstance","Chart","options","responsive","plugins","tooltip","callbacks","context","parsed","total","dataset","curr","percentage","round","datalabels","formatter","chart","dataIndex","value1","random","id","width","height","SOAComp","_SOA$","_SOA$2","_SOA$3","_SOA$4","_SOA$5","_SOA$6","_SOA$7","_SOA$8","_SOA$9","_SOA$10","parseData","JSON","parse","localStorage","getItem","isCustomer","setIsCustomer","setDataArray","UserId","setTotal","dialog","setDialog","SOA","setSOA","clickedRow","setClickedRow","today","firstDayOfMonth","getFullYear","getMonth","selectedRange","setSelectedRange","to","imageSource","logo","closingBalance","setClosingBalance","debit","credit","printRef","useRef","fetchLink","address","then","status","_data$data","temp","obj","Bal_Amount","catch","getInfo","prop","mode","_rowData","_rowData2","_rowData3","rowData","Cust_Id","tally_id","Company_Id","_data$data2","bal","Debit_Amt","Credit_Amt","handlePrint","useReactToPrint","content","current","Name","toLocaleString","_o$Bal_Amount","LaunchOutlined","Company_Name","ledger_name","CR_DR","Dialog","fullScreen","fullWidth","DialogTitle","Customer_name","Button","XLSXUtils","writeXLSX","toLocaleDateString","day","month","year","hour","minute","second","generateExcel","Ledger_Date","Purticular","Ledger_Desc","InvoiceNo","invoice_no","Debit","Credit","Company","Ledger","Ledger_Name","Mobile_Number","Mobile_no","DialogContent","src","alt","Contact_Person","onChange","window","alert","ref","DialogActions","variant","AttendanceComp","storage","initialValue","Latitude","Longitude","Description","lastAttendance","setLastAttendance","reload","setReload","inputValue","setInputValue","success","resetValues","Card","StartDay","async","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","code","PERMISSION_DENIED","toast","warn","message","getLocation","hasLocationAccess","method","bodyData","Active_Status","CardContent","Start_Date","maxWidth","placeholder","EndDay","Id","getIcons","str","_iconArr$find","LuArrowUpWideNarrow","ShoppingCart","IoReceiptOutline","HiOutlineCurrencyRupee","PiHandCoinsFill","BsCartPlus","FaCubesStacked","CardComp","firstVal","secondVal","classCount","ManagementDashboard","_popUpDetails$salesDe","UserAccess","UserTypeId","mangementReport","setMangementReport","secRow","setSecRow","theredRow","setTheredRow","popUpDetails","setPopUpDetails","salesDetails","popUpDialogs","setPopUpDialogs","setFilter","date","ISOString","Company_id","salesDetailsGrouped","groupData","Stock_Value","Trans_Type","Trans_Amount","Trans_Count","Total_Cost_Vlaue","sum","item","Amount","_row$groupedData","groupedData","_row$groupedData2","CommonDashboard","dashboardData","setDashboardData","workedDetais","setWorkedDetais","myTasks","setMyTasks","tallyDetails","setTallyDetails","isAdmin","isMangement","isEmp","dispTask","setDispTask","aHours","aMinutes","Sch_Time","bHours","bMinutes","minFormat","formatHour","formatMinute","statusColor","FormControlLabel","control","Switch","checked","TbTargetArrow","ActiveProjects","AllProjects","CiCalendarDate","ActiveSchedule","AllSchedule","BiTask","TaskCompleted","HiUsers","EmployeeCounts","OtherUsers","RxLapTimer","TotalMinutes","CgSandClock","TodayTaskCompleted","TodayTasks","TotalTasks","WorkedMinutes","pb","PieChartComp","CardHeader","Timer_Based","EN_Time","Sch_Period","Work_Id","Particulars","Tally_Count"],"sourceRoot":""}