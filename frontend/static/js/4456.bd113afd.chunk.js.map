{"version":3,"file":"static/js/4456.bd113afd.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/requiredStar.jsx","Components/tablecolumn.js","Pages/Sales/SalesReportComponent/newInvoiceTemplate.jsx","Pages/Sales/convertedStatus.js","../node_modules/@mui/icons-material/esm/Clear.js","../node_modules/@mui/icons-material/esm/ClearAll.js","Pages/Sales/SalesReportComponent/newSaleOrderCreation.jsx","Pages/Sales/saleOrder.jsx","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Close.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Download.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Save.js","../node_modules/@mui/icons-material/esm/Visibility.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = ''\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {title && <h6 className='fw-bold text-muted'>{title}</h6>}\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableMaxHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.element,\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined\r\n};\r\n\r\n\r\nexport default FilterableTable;","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\nimport SMT_LOGO from './smt.png';\n\nexport const customTableStyles = {\n    table: {\n        style: {\n            width: 'auto',\n            backgroundColor: 'transparent',\n            // borderRadius: '5px',\n        }\n    },\n    rows: {\n        style: {\n            backgroundColor: 'transparent',\n        },\n    },\n    headCells: {\n        style: {\n            backgroundColor: '#6b9080f8',\n            color: 'white',\n            fontSize: '14px',\n            // borderRadius: '5px',\n        },\n    },\n};\n\nexport const customSelectStyles = {\n    control: (provided, state) => ({\n        ...provided,\n        height: '45px',\n        background: 'rgba(255, 255, 255, 0.322)'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n\nexport const customSelectStyles2 = {\n    control: (provided, state) => ({\n        ...provided,\n        background: 'transparent',\n        border: 'none',\n        color: 'rgba(255, 255, 255, 0.322)',\n        // minWidth: '160px'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        color: 'black',\n        zIndex: 9999,\n    }),\n};\n\nexport const MainMenu = [\n    {\n        id: 1,\n        headname: 'Menu ID',\n        variant: 'head',\n        align: 'left',\n        width: 100\n    },\n    {\n        id: 2,\n        headname: 'MenuName',\n    },\n    {\n        id: 3,\n        headname: 'Read Rights'\n    },\n    {\n        id: 4,\n        headname: 'Add Rights'\n    },\n    {\n        id: 5,\n        headname: 'Edit Rights'\n    },\n    {\n        id: 6,\n        headname: 'Delete Rights'\n    },\n    {\n        id: 7,\n        headname: 'Print Rights'\n    },\n    {\n        id: 8,\n        headname: 'Action'\n    }\n];\n\nexport const companyDetails = [\n    {\n        dataBase: 1,\n        name: 'SHANKAR TRADERS',\n        business: 'Wholesale Merchant in Dhall',\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33AADFS6973R1ZD',\n        phone: '984-313-1353, 984-335-5166',\n        fssai: '12418012000818',\n        bankAccount: '0021 5032 0885 122',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 2,\n        name: 'SMT AGRO PRODUCTS',\n        business: '',\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33ACMFS3420Q1ZQ',\n        phone: '0452-4371625',\n        fssai: '12418012000818',\n        bankAccount: '0025 3031 0875 947',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 3,\n        name: 'BHAVANI TRADERS',\n        business: '',\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\n        logo: SMT_LOGO,\n        gstin: '33AAEFB6728J1ZG',\n        phone: '958-559-7641, 958-559-7614',\n        fssai: '12418012000670',\n        bankAccount: '0021 5005 0800 309',\n        ifsc: 'TMBL0000002'\n    },\n]","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, Button, DialogActions } from '@mui/material';\r\nimport { Close, Download } from '@mui/icons-material';\r\nimport { checkIsNumber, isEqualNumber, isGraterNumber, LocalDate, NumberFormat, numberToWords, Multiplication, Subraction, Addition } from '../../../Components/functions';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\n\r\n\r\nconst taxCalc = (method = 1, amount = 0, percentage = 0) => {\r\n    if (isEqualNumber(method, 1) && checkIsNumber(amount) && checkIsNumber(percentage)) {\r\n        return amount - (amount * (100 / (100 + percentage)));\r\n    } else if (isEqualNumber(method, 0) && checkIsNumber(amount) && checkIsNumber(percentage)) {\r\n        return amount * (percentage / 100);\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst InvoiceBillTemplate = ({ orderDetails, orderProducts, download, actionOpen, clearDetails, children, TitleText }) => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const [open, setOpen] = useState(false);\r\n    const [products, setProducts] = useState([]);\r\n    const [retailerInfo, setRetailerInfo] = useState({});\r\n    const [companyInfo, setCompanyInfo] = useState({});\r\n    const printRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/products?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProducts(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/company?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setCompanyInfo(data?.data[0] ? data?.data[0] : {})\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    useEffect(() => {\r\n        if (actionOpen) {\r\n            setOpen(true);\r\n        }\r\n    }, [actionOpen])\r\n\r\n    useEffect(() => {\r\n        if (orderDetails?.Retailer_Id) {\r\n            fetchLink({\r\n                address: `masters/retailers/info?Retailer_Id=${orderDetails?.Retailer_Id}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setRetailerInfo(data?.data[0] ? data?.data[0] : {})\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [orderDetails?.Retailer_Id])\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        if (clearDetails) {\r\n            clearDetails();\r\n        }\r\n    };\r\n\r\n    const includedProducts = orderProducts.filter(orderProduct => {\r\n        return products?.some(product => isEqualNumber(\r\n            orderProduct?.Item_Id, product?.Product_Id\r\n        ) && isGraterNumber(orderProduct?.Bill_Qty, 0));\r\n    });\r\n\r\n    const Total_Invoice_value = includedProducts.reduce((o, item) => {\r\n        const product = findProductDetails(products, item.Item_Id);\r\n        const itemRate = parseFloat(item?.Item_Rate);\r\n        const billQty = parseInt(item?.Bill_Qty);\r\n        const Amount = Multiplication(billQty, itemRate)\r\n        const gstPercentage = isEqualNumber(orderDetails.IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n        if (isEqualNumber(orderDetails.GST_Inclusive, 1)) {\r\n            return o += Amount;\r\n        } else {\r\n            const tax = taxCalc(0, itemRate, gstPercentage)\r\n            return o += (Amount + (tax * billQty));\r\n        }\r\n    }, 0);\r\n\r\n    const totalValueBeforeTax = includedProducts.reduce((acc, item) => {\r\n        const product = findProductDetails(products, item.Item_Id);\r\n        const itemRate = parseFloat(item?.Item_Rate) || 0;\r\n        const billQty = parseInt(item?.Bill_Qty) || 0;\r\n        const gstPercentage = isEqualNumber(orderDetails.IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n        if (isEqualNumber(orderDetails.GST_Inclusive, 1)) {\r\n            const itemTax = taxCalc(1, itemRate, gstPercentage)\r\n            const basePrice = Subraction(itemRate, itemTax);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, basePrice);\r\n        } else {\r\n            const itemTax = taxCalc(0, itemRate, gstPercentage);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, itemRate);\r\n        }\r\n\r\n        return acc;\r\n    }, {\r\n        TotalValue: 0,\r\n        TotalTax: 0\r\n    });\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    const extraDetails = [\r\n        {\r\n            labelOne: 'Invoice No',\r\n            dataOne: orderDetails?.So_Id,\r\n            labelTwo: 'Dated',\r\n            dataTwo: LocalDate(orderDetails?.So_Date),\r\n        },\r\n        {\r\n            labelOne: 'Delivery Note',\r\n            dataOne: '',\r\n            labelTwo: 'Mode/Terms of Payment',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Reference No. & Date',\r\n            dataOne: '',\r\n            labelTwo: 'Other References',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Buyer\\'s Order No',\r\n            dataOne: '',\r\n            labelTwo: 'Dated',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Dispatch Doc No',\r\n            dataOne: '',\r\n            labelTwo: 'Delivery Note Date',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Dispatched through',\r\n            dataOne: '',\r\n            labelTwo: 'Destination',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Bill of Lading/LR-RR No',\r\n            dataOne: '',\r\n            labelTwo: 'Motor Vehicle No',\r\n            dataTwo: '',\r\n        },\r\n    ]\r\n\r\n    const TaxData = orderProducts?.reduce((data, item) => {\r\n        const HSNindex = data.findIndex(obj => obj.hsnCode == item.HSN_Code);\r\n\r\n        const {\r\n            Taxable_Amount, Cgst_Amo, Sgst_Amo, Igst_Amo, HSN_Code,\r\n            Cgst, Sgst, Igst,\r\n        } = item;\r\n\r\n        if (HSNindex !== -1) {\r\n            const prev = data[HSNindex];\r\n            const newValue = {\r\n                ...prev,\r\n                taxableValue: prev.taxableValue + Taxable_Amount,\r\n                cgst: Addition(prev.cgst, Cgst_Amo),\r\n                sgst: Addition(prev.sgst, Sgst_Amo),\r\n                igst: Addition(prev.igst, Igst_Amo),\r\n                totalTax: prev.totalTax + Number(orderDetails.IS_IGST ? Igst_Amo : Addition(Cgst_Amo, Sgst_Amo)),\r\n            };\r\n\r\n            data[HSNindex] = newValue;\r\n            return data;\r\n        }\r\n\r\n        const newEntry = {\r\n            hsnCode: HSN_Code,\r\n            taxableValue: Taxable_Amount,\r\n            cgst: Cgst_Amo,\r\n            cgstPercentage: Cgst,\r\n            sgst: Sgst_Amo,\r\n            sgstPercentage: Sgst,\r\n            igst: Igst_Amo,\r\n            igstPercentage: Igst,\r\n            totalTax: orderDetails.IS_IGST ? Number(Igst_Amo) : Addition(Cgst_Amo, Sgst_Amo),\r\n        };\r\n\r\n        return [...data, newEntry];\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <span onClick={handleOpen}>{children}</span>\r\n\r\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth='lg'>\r\n\r\n                <DialogTitle>Order Preview</DialogTitle>\r\n\r\n                <DialogContent ref={printRef}>\r\n                    <h3 className='text-center mb-2'>{TitleText ?? 'Invoice Details'}</h3>\r\n\r\n                    {/* General Info */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 p-0 border border-bottom-0 border-end-0\"> {/* Company Info */}\r\n                            <div className=\"border-bottom p-2\">\r\n                                <p className='m-0 fa-17'>{companyInfo?.Company_Name}</p>\r\n                                <p className='m-0 fa-14'>Address: {companyInfo?.Company_Address}</p>\r\n                                {/* <p className='m-0 fa-14'></p> */}\r\n                                <p className='m-0 fa-14'>City: {companyInfo?.Region} - {companyInfo?.Pincode}</p>\r\n                                <p className='m-0 fa-14'>GSTIN / UIN: {companyInfo?.Gst_Number}</p>\r\n                                <p className='m-0 fa-14'>State: {companyInfo?.State}</p>\r\n                                <p className='m-0 fa-14'>Code: </p>\r\n                            </div>\r\n                            <div className=\"p-2\"> {/* buyer info */}\r\n                                <p className='m-0 fa-12'>Buyer (Bill to)</p>\r\n                                <p className='m-0 fa-15'>{retailerInfo?.Retailer_Name}</p>\r\n                                <p className='m-0 fa-14'>{retailerInfo?.Reatailer_Address}</p>\r\n                                <p className='m-0 fa-14'>{retailerInfo?.Reatailer_City} - {retailerInfo?.PinCode}</p>\r\n                                <p className='m-0 fa-14'>GSTIN / UIN: {companyInfo?.Gstno}</p>\r\n                                <p className='m-0 fa-14'>State Name: {companyInfo?.StateGet}</p>\r\n                                <p className='m-0 fa-14'>Code: </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-6 p-0 border border-bottom-0\">\r\n                            <table className=\"table m-0\">\r\n                                <tbody>\r\n                                    {extraDetails.map((detail, index) => (\r\n                                        <tr key={index}>\r\n                                            <td className=\"border-end fa-12 p-0 px-1\">\r\n                                                <p className=\"m-0\">{detail.labelOne}</p>\r\n                                                <p className=\"m-0\">&emsp;{detail.dataOne}</p>\r\n                                            </td>\r\n                                            <td className='fa-12 p-0 px-1'>\r\n                                                <p className=\"m-0\">{detail.labelTwo}</p>\r\n                                                <p className=\"m-0\">&emsp;{detail.dataTwo}</p>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                    <tr>\r\n                                        <td colSpan={2} className='border-0 fa-12 p-0'>\r\n                                            <p className=\"m-0\">Terms of Delivery</p>\r\n                                            <p className=\"m-0\"></p>\r\n                                            <br />\r\n                                            <br />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Product Info */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-0\">\r\n                            <table className=\"table m-0\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className='border bg-light fa-14'>Sno</td>\r\n                                        <td className='border bg-light fa-14'>Product</td>\r\n                                        <td className='border bg-light fa-14'>HSN/SAC</td>\r\n                                        <td className='border bg-light fa-14 text-end'>Quantity</td>\r\n                                        <td className='border bg-light fa-14 text-end'>Rate</td>\r\n                                        <td className='border bg-light fa-14 text-end'>\r\n                                            <p className='m-2 '>Rate</p>\r\n                                            <p className='m-0 '>\r\n                                                {isEqualNumber(\r\n                                                    orderDetails.GST_Inclusive, 1\r\n                                                ) ? '(Incl. of Tax)' : '(Excl. of Tax)'}\r\n                                            </p>\r\n                                        </td>\r\n                                        <td className='border bg-light fa-14 text-end'>Amount</td>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n\r\n                                    {includedProducts.map((o, i) => {\r\n                                        const productDetails = findProductDetails(products, o.Item_Id);\r\n                                        const percentage = (orderDetails.IS_IGST ? productDetails?.Igst_P : productDetails?.Gst_P) ?? 0;\r\n                                        const uom = o?.UOM;\r\n                                        const quantity = Number(o?.Bill_Qty || 0);\r\n                                        const Item_Rate = Number(o?.Item_Rate || 0);\r\n                                        const itemTax = taxCalc(orderDetails.GST_Inclusive, Item_Rate, percentage)\r\n                                        const amount = quantity * Item_Rate;\r\n                                        const amountTax = taxCalc(orderDetails.GST_Inclusive, amount, percentage)\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className='border fa-13'>{i + 1}</td>\r\n                                                <td className='border fa-13'>{productDetails?.Product_Name}</td>\r\n                                                <td className='border fa-13'>{productDetails?.HSN_Code}</td>\r\n\r\n                                                <td className='border fa-13 text-end'>\r\n                                                    {NumberFormat(quantity)}\r\n                                                    {uom && ' (' + uom + ') '}\r\n                                                </td>\r\n\r\n                                                <td className='border fa-13 text-end'> {/* taxable item value */}\r\n                                                    {NumberFormat(isEqualNumber(\r\n                                                        orderDetails.GST_Inclusive, 1\r\n                                                    ) ? (Item_Rate - itemTax) : Item_Rate)}\r\n                                                </td>\r\n\r\n                                                <td className='border fa-13 text-end'> {/* rate per item */}\r\n                                                    {NumberFormat(isEqualNumber(\r\n                                                        orderDetails.GST_Inclusive, 1\r\n                                                    ) ? Item_Rate : (Item_Rate + itemTax))}\r\n                                                </td>\r\n\r\n                                                <td className='border fa-13 text-end'> {/* taxable amount (qty * rate) */}\r\n                                                    {/* {NumberFormat(isEqualNumber(\r\n                                                    orderDetails.GST_Inclusive, 1\r\n                                                ) ? amount : (amount + amountTax))} */}\r\n                                                    {NumberFormat(isEqualNumber(\r\n                                                        orderDetails.GST_Inclusive, 1\r\n                                                    ) ? (amount - amountTax) : amount)}\r\n                                                    {/* {NumberFormat(o?.Taxable_Amount)} */}\r\n                                                </td>\r\n\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n\r\n                                    <tr>\r\n                                        <td\r\n                                            className=\"border p-2\"\r\n                                            rowSpan={isEqualNumber(orderDetails.IS_IGST, 1) ? 4 : 5}\r\n                                            colSpan={4}\r\n                                        >\r\n                                            <p className='m-0'>Amount Chargeable (in words):</p>\r\n                                            <p className='m-0'>&emsp; INR {numberToWords(parseInt(Total_Invoice_value))} Only.</p>\r\n                                        </td>\r\n                                        <td className=\"border p-2 fa-14\" colSpan={2}>Total Taxable Amount</td>\r\n                                        <td className=\"border p-2 text-end fa-14\">\r\n                                            {NumberFormat(totalValueBeforeTax.TotalValue)}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    {!isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                        <>\r\n                                            <tr>\r\n                                                <td className=\"border p-2 fa-14\" colSpan={2}>CGST</td>\r\n                                                <td className=\"border p-2 text-end fa-14\">\r\n                                                    {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                                    {/* {includedProducts.reduce((gst, item) => gst += item.Cgst_Amo, 0)} */}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"border p-2 fa-14\" colSpan={2}>SGST</td>\r\n                                                <td className=\"border p-2 fa-14 text-end\">\r\n                                                    {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                                    {/* {includedProducts.reduce((gst, item) => gst += item.Sgst_Amo, 0)} */}\r\n                                                </td>\r\n                                            </tr>\r\n                                        </>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td className=\"border p-2 fa-14\" colSpan={2}>IGST</td>\r\n                                            <td className=\"border p-2 fa-14 text-end\">\r\n                                                {NumberFormat(totalValueBeforeTax.TotalTax)}\r\n                                                {/* {includedProducts.reduce((gst, item) => gst += item.Igst_Amo, 0)} */}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n\r\n                                    <tr>\r\n                                        <td className=\"border p-2 fa-14\" colSpan={2}>Round Off</td>\r\n                                        <td className=\"border p-2 fa-14 text-end\">\r\n                                            {NumberFormat(\r\n                                                Total_Invoice_value - (\r\n                                                    totalValueBeforeTax.TotalValue + totalValueBeforeTax.TotalTax\r\n                                                )\r\n                                            )}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"border p-2 fa-14\" colSpan={2}>Total</td>\r\n                                        <td className=\"border p-2 fa-14 text-end fw-bold\">\r\n                                            {NumberFormat(Total_Invoice_value)}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Tax Calculations */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-0\">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className=\"border bg-light fa-14 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>HSN / SAC</td>\r\n                                        <td className=\"border bg-light fa-14 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>Taxable Value</td>\r\n                                        {isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                            <td className=\"border bg-light fa-14 text-center\" colSpan={2}>IGST Tax</td>\r\n                                        ) : (\r\n                                            <>\r\n                                                <td className=\"border bg-light fa-14 text-center\" colSpan={2}>Central Tax</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\" colSpan={2}>State Tax</td>\r\n                                            </>\r\n                                        )}\r\n                                        <td className=\"border bg-light fa-14 text-center\">Total</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        {isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                            <>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Rate</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Amount</td>\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Rate</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Amount</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Rate</td>\r\n                                                <td className=\"border bg-light fa-14 text-center\">Amount</td>\r\n                                            </>\r\n                                        )}\r\n                                        <td className=\"border bg-light fa-14 text-center\">Tax Amount</td>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {TaxData.map((o, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className=\"border fa-13 text-end\">{o?.hsnCode}</td>\r\n                                                <td className=\"border fa-13 text-end\">{NumberFormat(o?.taxableValue)}</td>\r\n                                                {orderDetails.IS_IGST ? (\r\n                                                    <>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.igstPercentage)}</td>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.igst)}</td>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.cgstPercentage)}</td>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.cgst)}</td>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.sgstPercentage)}</td>\r\n                                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.sgst)}</td>\r\n                                                    </>\r\n                                                )}\r\n                                                <td className=\"border fa-13 text-end\">\r\n                                                    {NumberFormat(o?.totalTax)}\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                    <tr>\r\n                                        <td className=\"border fa-13 text-end\">Total</td>\r\n                                        <td className=\"border fa-13 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.taxableValue), 0))}\r\n                                        </td>\r\n\r\n                                        {orderDetails.IS_IGST ? (\r\n                                            <>\r\n                                                <td className=\"border fa-13 text-end\"></td>\r\n                                                <td className=\"border fa-13 text-end fw-bold\">\r\n                                                    {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.igst), 0))}\r\n                                                </td>\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <td className=\"border fa-13 text-end\"></td>\r\n                                                <td className=\"border fa-13 text-end fw-bold\">\r\n                                                    {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.cgst), 0))}\r\n                                                </td>\r\n                                                <td className=\"border fa-13 text-end\"></td>\r\n                                                <td className=\"border fa-13 text-end fw-bold\">\r\n                                                    {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.sgst), 0))}\r\n                                                </td>\r\n                                            </>\r\n                                        )}\r\n\r\n                                        <td className=\"border fa-13 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.totalTax), 0))}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td \r\n                                            colSpan={isEqualNumber(orderDetails.IS_IGST, 1) ? 5 : 7}\r\n                                            className='border fa-13 fw-bold'\r\n                                        >\r\n                                            Tax Amount (in words) : INR &nbsp;\r\n                                            {numberToWords(\r\n                                                parseInt(\r\n                                                    TaxData.reduce((sum, item) => sum += Number(item.totalTax), 0)\r\n                                                )\r\n                                            )} only.\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <div className=\"col-12 text-center\">\r\n                            <p>This is a Computer Generated Invoice</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button startIcon={<Close />} variant='outlined' color='error' onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    {download && (\r\n                        <Button\r\n                            startIcon={<Download />}\r\n                            variant='outlined'\r\n                            onClick={handlePrint}\r\n                        >\r\n                            Download\r\n                        </Button>\r\n                    )}\r\n                </DialogActions>\r\n\r\n            </Dialog >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvoiceBillTemplate;","export const convertedStatus = [\r\n    {\r\n        id: 0,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 1,\r\n        label: 'Verified',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Converted',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 13h14v-2H5zm-2 4h14v-2H3zM7 7v2h14V7z\"\n}), 'ClearAll');","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Dialog, DialogTitle, DialogContent, DialogActions, IconButton } from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\nimport { isEqualNumber, isGraterNumber, isValidObject, ISOString, getUniqueData, Multiplication, Division, NumberFormat, Subraction, numberToWords, checkIsNumber, Addition } from \"../../../Components/functions\";\r\nimport { Add, Clear, ClearAll, Delete, Edit, Save } from \"@mui/icons-material\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nconst taxCalc = (method = 1, amount = 0, percentage = 0) => {\r\n    if (isEqualNumber(method, 1) && checkIsNumber(amount) && checkIsNumber(percentage)) {\r\n        return amount - (amount * (100 / (100 + percentage)));\r\n    } else if (isEqualNumber(method, 0) && checkIsNumber(amount) && checkIsNumber(percentage)) {\r\n        return amount * (percentage / 100);\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\n\r\n\r\nconst NewSaleOrderCreation = ({ editValues, loadingOn, loadingOff, reload, switchScreen }) => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    // const [productGroup, setProductGroup] = useState([]);\r\n    const [productBrand, setProductBrand] = useState([]);\r\n    const [productUOM, setProductUOM] = useState([]);\r\n    // const [salesPerson, setSalePerson] = useState([]);\r\n    const [companyInfo, setCompanyInfo] = useState({});\r\n\r\n    const initialValue = {\r\n        Company_Id: storage?.Company_id,\r\n        So_Date: ISOString(),\r\n        Retailer_Id: '',\r\n        Retailer_Name: 'Select',\r\n        Sales_Person_Id: storage?.UserId,\r\n        Sales_Person_Name: storage?.Name,\r\n        Branch_Id: storage?.BranchId,\r\n        Narration: '',\r\n        Created_by: storage?.UserId,\r\n        Product_Array: [],\r\n        So_Id: '',\r\n        GST_Inclusive: 1,\r\n        IS_IGST: 0,\r\n    }\r\n\r\n    const productInitialDetails = {\r\n        Item_Id: '',\r\n        ItemName: 'Search Item',\r\n        Bill_Qty: 0,\r\n        Item_Rate: 0,\r\n        UOM: '',\r\n        Units: '',\r\n        Product: {},\r\n        Group: 'Search Group',\r\n        GroupID: '',\r\n        Brand: 'Search Brand',\r\n        BrandID: '',\r\n        Amount: 0\r\n    }\r\n\r\n    const [orderDetails, setOrderDetails] = useState(initialValue)\r\n    const [orderProducts, setOrderProducts] = useState([]);\r\n    const [productDetails, setProductDetails] = useState(productInitialDetails);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [addProductDialog, setAddProductDialog] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(editValues)) {\r\n            setOrderDetails(pre => ({\r\n                ...pre,\r\n                So_Date: editValues?.So_Date,\r\n                Retailer_Id: editValues?.Retailer_Id,\r\n                Retailer_Name: editValues?.Retailer_Name,\r\n                Sales_Person_Id: editValues?.Sales_Person_Id,\r\n                Sales_Person_Name: editValues?.Sales_Person_Name,\r\n                Branch_Id: editValues?.Branch_Id,\r\n                Narration: editValues?.Narration,\r\n                Created_by: editValues?.Created_by,\r\n                So_Id: editValues?.So_Id,\r\n                GST_Inclusive: editValues?.GST_Inclusive,\r\n                IS_IGST: editValues?.IS_IGST,\r\n            }));\r\n            setOrderProducts(editValues?.Products_List?.map(pro => ({\r\n                ...pro,\r\n                Item_Id: pro.Item_Id ?? '',\r\n                ItemName: pro?.Product_Name ?? \"\",\r\n                Bill_Qty: pro?.Bill_Qty ?? 0,\r\n                Item_Rate: pro?.Item_Rate ?? 0,\r\n                UOM: pro?.Unit_Id ?? '',\r\n                Units: pro?.Units ?? '',\r\n                Product: {\r\n                    ...pro,\r\n                    Cgst_P: Number(pro?.Cgst) ?? 0,\r\n                    Sgst_P: Number(pro?.Sgst) ?? 0,\r\n                    Igst_P: Number(pro?.Igst) ?? 0,\r\n                    Gst_P: Addition(pro?.Cgst, pro?.Sgst) ?? 0\r\n                } ?? {},\r\n                Group: 'Search Group',\r\n                GroupID: '',\r\n                Brand: 'Search Brand',\r\n                BrandID: '',\r\n                Amount: pro?.Amount ?? 0\r\n            })));\r\n            setIsEdit(true)\r\n        } else {\r\n            setOrderDetails(initialValue);\r\n            setOrderProducts([])\r\n            setIsEdit(false)\r\n        }\r\n    }, [editValues])\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/uom`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProductUOM(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/products?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProducts(data.data);\r\n                // const uniqueGroup = getUniqueData(data.data, 'Product_Group', ['Pro_Group']);\r\n                // setProductGroup(uniqueGroup);\r\n                const uniqueBrand = getUniqueData(data.data, 'Brand', ['Brand_Name']);\r\n                setProductBrand(uniqueBrand);\r\n                // const uniqueUOM = getUniqueData(data.data, 'UOM_Id', ['Units']);\r\n                // setProductUOM(uniqueUOM)\r\n            } else {\r\n                setProducts([]);\r\n                // setProductGroup([])\r\n                setProductBrand([]);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        // fetchLink({\r\n        //     address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        // }).then(data => {\r\n        //     if (data.success) {\r\n        //         setSalePerson(data.data)\r\n        //     }\r\n        // }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/company?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setCompanyInfo(data?.data[0] ? data?.data[0] : {})\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    const handleProductInputChange = (productId, value, rate, obj, UOM_Id, Units) => {\r\n        const productIndex = orderProducts.findIndex(item => isEqualNumber(item.Item_Id, productId));\r\n\r\n        if (productIndex !== -1) {\r\n            const updatedValues = [...orderProducts];\r\n            updatedValues[productIndex].Bill_Qty = Number(value);\r\n            updatedValues[productIndex].Item_Rate = Number(rate);\r\n            updatedValues[productIndex].UOM = UOM_Id;\r\n            updatedValues[productIndex].Units = Units;\r\n            updatedValues[productIndex].Amount = Multiplication(value, rate);\r\n            updatedValues[productIndex] = { ...updatedValues[productIndex], Product: obj }\r\n\r\n            setOrderProducts(updatedValues);\r\n        } else {\r\n            setOrderProducts(prevValues => [...prevValues, {\r\n                Item_Id: productId,\r\n                Bill_Qty: Number(value),\r\n                Item_Rate: Number(rate),\r\n                UOM: UOM_Id,\r\n                Units: Units,\r\n                Amount: Multiplication(value, rate),\r\n                Product: obj\r\n            }]);\r\n        }\r\n    };\r\n\r\n    const postSaleOrder = () => {\r\n        if (orderProducts?.length > 0 && orderDetails?.Retailer_Id) {\r\n            loadingOn();\r\n            fetchLink({\r\n                address: `sales/saleOrder`,\r\n                method: isEdit ? 'PUT' : 'POST',\r\n                bodyData: {\r\n                    ...orderDetails,\r\n                    Product_Array: orderProducts.filter(o => isGraterNumber(o?.Bill_Qty, 0))\r\n                }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    toast.success(data?.message);\r\n                    reload()\r\n                    setOrderDetails(initialValue);\r\n                    setOrderProducts([])\r\n                } else {\r\n                    toast.error(data?.message)\r\n                }\r\n            }).catch(e => console.error(e)).finally(() => loadingOff())\r\n\r\n        } else {\r\n            if (orderProducts.length <= 0) {\r\n                return toast.error('Enter any one product quantity')\r\n            }\r\n            if (!orderDetails?.Retailer_Id) {\r\n                return toast.error('Select Retailer')\r\n            }\r\n        }\r\n    }\r\n\r\n    const closeAddProduct = () => {\r\n        setAddProductDialog(false);\r\n        setProductDetails(productInitialDetails);\r\n    }\r\n\r\n    const Total_Invoice_value = orderProducts.reduce((o, item) => {\r\n        const product = findProductDetails(products, item.Item_Id);\r\n        const itemRate = parseFloat(item?.Item_Rate);\r\n        const billQty = parseInt(item?.Bill_Qty);\r\n        const Amount = Multiplication(billQty, itemRate)\r\n        const gstPercentage = isEqualNumber(orderDetails.IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n        if (isEqualNumber(orderDetails.GST_Inclusive, 1)) {\r\n            return o += Amount;\r\n        } else {\r\n            const tax = taxCalc(0, itemRate, gstPercentage)\r\n            return o += (Amount + (tax * billQty));\r\n        }\r\n    }, 0);\r\n\r\n    const totalValueBeforeTax = orderProducts.reduce((acc, item) => {\r\n        const product = findProductDetails(products, item.Item_Id);\r\n        const itemRate = parseFloat(item?.Item_Rate) || 0;\r\n        const billQty = parseInt(item?.Bill_Qty) || 0;\r\n        const gstPercentage = isEqualNumber(orderDetails.IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n        if (isEqualNumber(orderDetails.GST_Inclusive, 1)) {\r\n            const itemTax = taxCalc(1, itemRate, gstPercentage)\r\n            const basePrice = Subraction(itemRate, itemTax);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, basePrice);\r\n        } else {\r\n            const itemTax = taxCalc(0, itemRate, gstPercentage);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, itemRate);\r\n        }\r\n\r\n        return acc;\r\n    }, {\r\n        TotalValue: 0,\r\n        TotalTax: 0\r\n    });\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"p-3 pt-0\">\r\n                {/* CompnayInfo  */}\r\n                <div className=\"p-3 bg-light rounded-3 mb-3 shadow-sm\">\r\n                    <h5 className=\"border-bottom\">From:</h5>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-8 col-md-7\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\" colSpan={2}>\r\n                                            {companyInfo?.Company_Name}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Address:</td>\r\n                                        <td className=\"border-0 bg-light\">{companyInfo?.Company_Address}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Phone:</td>\r\n                                        <td className=\"border-0 bg-light\">{companyInfo?.Telephone_Number}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"col-lg-4 col-md-5\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Date:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                value={orderDetails?.So_Date ? ISOString(orderDetails?.So_Date) : ''}\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, So_Date: e.target.value })}\r\n                                                className=\"cus-inpt p-1\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Invoice Type:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <select\r\n                                                className=\"cus-inpt p-1\"\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, GST_Inclusive: Number(e.target.value) })}\r\n                                                value={orderDetails.GST_Inclusive}\r\n                                            >\r\n                                                <option value={1}>Inclusive Tax</option>\r\n                                                <option value={0}>Exclusive Tax</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Tax Type:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <select\r\n                                                className=\"cus-inpt p-1\"\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, IS_IGST: Number(e.target.value) })}\r\n                                                value={orderDetails.IS_IGST}\r\n                                            >\r\n                                                <option value='0'>GST</option>\r\n                                                <option value='1'>IGST</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Customer Info */}\r\n\r\n                <div className=\"p-3 bg-light rounded-3 mb-3 shadow-sm\">\r\n                    <h5 className=\"border-bottom\">To:</h5>\r\n                    <div className=\"row \">\r\n                        <div className=\"col-md-6\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Retailer Name:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <Select\r\n                                                value={{ value: orderDetails?.Retailer_Id, label: orderDetails?.Retailer_Name }}\r\n                                                onChange={(e) => setOrderDetails({ ...orderDetails, Retailer_Id: e.value, Retailer_Name: e.label })}\r\n                                                options={[\r\n                                                    { value: '', label: 'select', isDisabled: true },\r\n                                                    ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                                ]}\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable={true}\r\n                                                placeholder={\"Retailer Name\"}\r\n                                                maxMenuHeight={200}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Address:</td>\r\n                                        <td className=\"border-0 bg-light\">{storage.Name}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Phone:</td>\r\n                                        <td className=\"border-0 bg-light\">{ }</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Q-Pay:</td>\r\n                                        <td className=\"border-0 bg-light\">{10}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Frequency Days:</td>\r\n                                        <td className=\"border-0 bg-light\">{20}</td>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Actions */}\r\n                <div className=\"d-flex align-items-end justify-content-end flex-wrap mb-3\">\r\n\r\n                    <Button\r\n                        onClick={() => setAddProductDialog(true)}\r\n                        sx={{ ml: 1 }}\r\n                        variant='outlined'\r\n                        startIcon={<Add />}\r\n                    >Add Product</Button>\r\n                </div>\r\n\r\n                <FilterableTable\r\n                    dataArray={orderProducts}\r\n                    columns={[\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => row?.Product?.Product_Name,\r\n                            ColumnHeader: 'Product',\r\n                            isVisible: 1,\r\n                        },\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => row?.Product?.HSN_Code,\r\n                            ColumnHeader: 'HSN Code',\r\n                            isVisible: 1,\r\n                        },\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => row?.Bill_Qty + ' ' + row?.Units,\r\n                            ColumnHeader: 'Quantity',\r\n                            isVisible: 1,\r\n                            align: 'center'\r\n                        },\r\n                        {\r\n                            Field_Name: 'Item_Rate',\r\n                            ColumnHeader: \"Rate\",\r\n                            Fied_Data: 'number',\r\n                            isVisible: 1,\r\n                            align: 'right'\r\n                        },\r\n                        {\r\n                            ColumnHeader: 'Taxable Amount',\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n                                const percentage = (orderDetails.IS_IGST ? row?.Product?.Igst_P : Addition(row?.Product?.Cgst_P, row?.Product?.Sgst_P)) ?? 0;\r\n                                const amount = row.Amount ?? 0;\r\n                                const tax = taxCalc(orderDetails.GST_Inclusive, amount, percentage)\r\n                                return NumberFormat(\r\n                                    isEqualNumber(orderDetails.GST_Inclusive, 1) ? (amount - tax) : amount\r\n                                )\r\n                            },\r\n                            isVisible: 1,\r\n                            align: 'right'\r\n                        },\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n                                console.log({row})\r\n                                const percentage = (orderDetails.IS_IGST ? row?.Product?.Igst_P : Addition(row?.Product?.Cgst_P, row?.Product?.Sgst_P)) ?? 0;\r\n                                const amount = row.Amount ?? 0;\r\n                                return NumberFormat(\r\n                                    taxCalc(orderDetails.GST_Inclusive, amount, percentage)\r\n                                ) + ' (' + percentage + '%)'\r\n                            },\r\n                            ColumnHeader: 'Tax',\r\n                            isVisible: 1,\r\n                            align: 'right'\r\n                        },\r\n                        {\r\n                            ColumnHeader: 'Amount',\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n                                const percentage = (orderDetails.IS_IGST ? row?.Product?.Igst_P : Addition(row?.Product?.Cgst_P, row?.Product?.Sgst_P)) ?? 0;\r\n                                const amount = row.Amount ?? 0;\r\n                                const tax = taxCalc(orderDetails.GST_Inclusive, amount, percentage)\r\n                                return NumberFormat(\r\n                                    isEqualNumber(orderDetails.GST_Inclusive, 1) ? amount : (amount + tax)\r\n                                )\r\n                            },\r\n                            isVisible: 1,\r\n                            align: 'right'\r\n                        },\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n                                return (\r\n                                    <>\r\n                                        <IconButton\r\n                                            onClick={() => {\r\n                                                setProductDetails({\r\n                                                    Item_Id: row.Item_Id,\r\n                                                    ItemName: row?.Product?.Product_Name,\r\n                                                    Bill_Qty: row.Bill_Qty,\r\n                                                    Item_Rate: row.Item_Rate,\r\n                                                    UOM: row.Product.UOM_Id,\r\n                                                    Product: row.Product,\r\n                                                    Group: row?.Product?.Pro_Group,\r\n                                                    GroupID: row?.Product?.Product_Group,\r\n                                                    Brand: row?.Product?.Brand_Name,\r\n                                                    BrandID: row?.Product?.Brand,\r\n                                                    Amount: row?.Amount\r\n                                                });\r\n                                                setAddProductDialog(true);\r\n                                            }}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <Edit />\r\n                                        </IconButton>\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => {\r\n                                                setOrderProducts(pre => pre.filter(obj => !isEqualNumber(obj.Item_Id, row.Item_Id)))\r\n                                            }}\r\n                                            color='error'\r\n                                        >\r\n                                            <Delete />\r\n                                        </IconButton>\r\n                                    </>\r\n                                )\r\n                            },\r\n                            ColumnHeader: 'Action',\r\n                            isVisible: 1,\r\n                        },\r\n                    ]}\r\n                    EnableSerialNumber\r\n                    CellSize=\"small\"\r\n                    disablePagination={true}\r\n                />\r\n\r\n\r\n                {orderProducts.length > 0 && (\r\n                    <div className=\"d-flex justify-content-end py-2\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"border p-2\" rowSpan={isEqualNumber(orderDetails.IS_IGST, 1) ? 4 : 5}>\r\n                                        Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                                    </td>\r\n                                    <td className=\"border p-2\">Total Taxable Amount</td>\r\n                                    <td className=\"border p-2\">\r\n                                        {NumberFormat(totalValueBeforeTax.TotalValue)}\r\n                                    </td>\r\n                                </tr>\r\n                                {!isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                    <>\r\n                                        <tr>\r\n                                            <td className=\"border p-2\">CGST</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td className=\"border p-2\">SGST</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </>\r\n                                ) : (\r\n                                    <tr>\r\n                                        <td className=\"border p-2\">IGST</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {NumberFormat(totalValueBeforeTax.TotalTax)}\r\n                                        </td>\r\n                                    </tr>\r\n                                )}\r\n                                <tr>\r\n                                    <td className=\"border p-2\">Round Off</td>\r\n                                    <td className=\"border p-2\">\r\n                                        {NumberFormat(\r\n                                            Total_Invoice_value - (\r\n                                                totalValueBeforeTax.TotalValue + totalValueBeforeTax.TotalTax\r\n                                            )\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border p-2\">Total</td>\r\n                                    <td className=\"border p-2\">\r\n                                        {NumberFormat(Total_Invoice_value)}\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n\r\n\r\n                <p className=\"fa-15 mt-3 m-0\">Narration</p>\r\n                <textarea\r\n                    className=\"cus-inpt \"\r\n                    value={orderDetails.Narration}\r\n                    onChange={e => setOrderDetails(pre => ({ ...pre, Narration: e.target.value }))}\r\n                />\r\n\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <Button\r\n                        variant='outlined'\r\n                        startIcon={<Clear />}\r\n                        onClick={switchScreen}\r\n                    >\r\n                        {'cancel'}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={postSaleOrder}\r\n                        sx={{ ml: 1 }}\r\n                        variant='outlined'\r\n                        color='success'\r\n                        startIcon={<Save />}\r\n                        disabled={orderProducts?.length === 0 || !orderDetails?.Retailer_Id}\r\n                    >Save</Button>\r\n                </div>\r\n            </div>\r\n\r\n            <Dialog\r\n                open={addProductDialog}\r\n                onClose={closeAddProduct}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogTitle className=\"border-bottom\">\r\n                    <span>Add Products Details</span>\r\n                </DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    if (productDetails.Item_Id && productDetails.Bill_Qty && productDetails.Item_Rate) {\r\n                        handleProductInputChange(\r\n                            productDetails.Item_Id,\r\n                            productDetails.Bill_Qty,\r\n                            productDetails.Item_Rate,\r\n                            productDetails.Product,\r\n                            productDetails.UOM,\r\n                            productDetails.Units,\r\n                        );\r\n                        closeAddProduct();\r\n                    } else {\r\n                        toast.warn(!productDetails.Item_Id ? 'Select Product' : !productDetails.Bill_Qty ? 'Enter Quantity' : 'Enter Rate or Amount');\r\n                    }\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row pb-5\">\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Brand</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.BrandID, label: productDetails.Brand }}\r\n                                    onChange={(e) => setProductDetails(pre => ({ ...pre, BrandID: e.value, Brand: e.label }))}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...productBrand.map(obj => ({ value: obj?.Brand, label: obj?.Brand_Name }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Brand\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div>\r\n                            {/* <div className=\"col-6 p-2\">\r\n                                <label>Group</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.GroupID, label: productDetails.Group }}\r\n                                    onChange={(e) => setProductDetails(pre => ({ ...pre, GroupID: e.value, Group: e.label }))}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...productGroup.map(obj => ({ value: obj?.Product_Group, label: obj?.Pro_Group }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Group\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div> */}\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Group</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.GroupID, label: productDetails.Group }}\r\n                                    onChange={(e) =>\r\n                                        setProductDetails((pre) => ({ ...pre, GroupID: e.value, Group: e.label }))\r\n                                    }\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...products\r\n                                            .filter(\r\n                                                (pro) =>\r\n                                                    productDetails.BrandID\r\n                                                        ? isEqualNumber(pro.Brand, productDetails.BrandID)\r\n                                                        : true\r\n                                            )\r\n                                            .reduce((acc, pro) => {\r\n                                                if (\r\n                                                    !acc.some((grp) => grp.value === pro.Product_Group)\r\n                                                ) {\r\n                                                    acc.push({\r\n                                                        value: pro.Product_Group,\r\n                                                        label: pro.Pro_Group,\r\n                                                    });\r\n                                                }\r\n                                                return acc;\r\n                                            }, []),\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Group\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 p-2\">\r\n                                <label>Item Name <RequiredStar /></label>\r\n                                <Select\r\n                                    value={{ value: productDetails.Item_Id, label: productDetails.ItemName }}\r\n                                    onChange={e => {\r\n                                        const productInfo = products.find(pro => isEqualNumber(pro.Product_Id, e.value))\r\n                                        setProductDetails(pre => ({\r\n                                            ...pre,\r\n                                            Item_Id: e.value,\r\n                                            ItemName: e.label,\r\n                                            Product: productInfo ?? {},\r\n                                            Group: productInfo.Pro_Group ?? pre.Group,\r\n                                            GroupID: productInfo.Product_Group ?? pre.GroupID,\r\n                                            Brand: productInfo.Brand_Name ?? pre.Brand,\r\n                                            BrandID: productInfo.Brand ?? pre.BrandID,\r\n                                            UOM: productInfo.UOM_Id ?? pre.UOM,\r\n                                            Units: productInfo.Units ?? pre.Units,\r\n                                            Item_Rate: productInfo.Item_Rate ?? 0,\r\n                                            Amount: 0,\r\n                                            Bill_Qty: 0,\r\n                                        }));\r\n                                    }}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...[\r\n                                            ...products\r\n                                                .filter(pro => productDetails.BrandID ? isEqualNumber(pro.Brand, productDetails.BrandID) : true)\r\n                                                .filter(pro => productDetails.GroupID ? isEqualNumber(pro.Product_Group, productDetails.GroupID) : true)\r\n                                        ].map(obj => ({\r\n                                            value: obj?.Product_Id,\r\n                                            label: obj?.Product_Name,\r\n                                            isDisabled: (\r\n                                                orderProducts.findIndex(ind => isEqualNumber(\r\n                                                    ind?.Item_Id, obj?.Product_Id\r\n                                                ))\r\n                                            ) === -1 ? false : true\r\n                                        }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    required\r\n                                    placeholder={\"Select Product\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Quantity <RequiredStar /></label>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    required\r\n                                    value={productDetails.Bill_Qty ? productDetails.Bill_Qty : ''}\r\n                                    onChange={e => {\r\n                                        if (productDetails.Item_Rate) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Amount: Multiplication(productDetails.Item_Rate, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else if (productDetails.Amount) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Item_Rate: Division(pre.Amount, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Bill_Qty: e.target.value,\r\n                                            }));\r\n                                        }\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Rate </label>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    value={productDetails.Item_Rate ? NumberFormat(productDetails.Item_Rate) : ''}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Item_Rate: e.target.value,\r\n                                        Amount: pre.Bill_Qty ? Multiplication(e.target.value, pre.Bill_Qty) : pre.Amount\r\n                                    }))}\r\n                                    min={1}\r\n                                    className=\"cus-inpt\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>UOM</label>\r\n                                <select\r\n                                    value={productDetails.UOM}\r\n                                    onChange={e => {\r\n                                        const selectedIndex = e.target.selectedIndex;\r\n                                        const label = e.target.options[selectedIndex].text;\r\n                                        const value = e.target.value;\r\n                                        setProductDetails(pre => ({ ...pre, UOM: value, Units: label }));\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                >\r\n                                    <option value=\"\" disabled>select</option>\r\n                                    {productUOM.map((o, i) => (\r\n                                        <option value={o.Unit_Id} key={i} >{o.Units}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-md-6 p-2\">\r\n                                <label>Amount</label>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    value={productDetails.Amount ? productDetails.Amount : ''}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Amount: e.target.value,\r\n                                        Item_Rate: pre.Bill_Qty ? Division(e.target.value, pre.Bill_Qty) : pre.Item_Rate\r\n                                    }))}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions className=\"d-flex justify-content-between align-items-center\">\r\n                        <Button onClick={() => setProductDetails(productInitialDetails)} type='button' startIcon={<ClearAll />}>Clear</Button>\r\n                        <span>\r\n                            <Button type=\"button\" onClick={closeAddProduct}>cancel</Button>\r\n                            <Button type='submit' variant=\"outlined\">Add</Button>\r\n                        </span>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default NewSaleOrderCreation;","import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, Button, Dialog, Tooltip, IconButton, DialogTitle, DialogContent, DialogActions } from \"@mui/material\";\r\nimport '../common.css'\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { getPreviousDate, isEqualNumber, ISOString, isValidObject } from \"../../Components/functions\";\r\nimport InvoiceBillTemplate from \"./SalesReportComponent/newInvoiceTemplate\";\r\nimport { Add, Edit, FilterAlt, Visibility } from \"@mui/icons-material\";\r\nimport { convertedStatus } from \"./convertedStatus\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport NewSaleOrderCreation from \"./SalesReportComponent/newSaleOrderCreation\";\r\n\r\n\r\nconst SaleOrderList = ({ loadingOn, loadingOff }) => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [screen, setScreen] = useState(true);\r\n    const [orderInfo, setOrderInfo] = useState({});\r\n    const [viewOrder, setViewOrder] = useState({});\r\n    const [reload, setReload] = useState(false)\r\n\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        Retailer_Id: '',\r\n        RetailerGet: 'ALL',\r\n        Created_by: '',\r\n        CreatedByGet: 'ALL',\r\n        Sales_Person_Id: '',\r\n        SalsePersonGet: 'ALL',\r\n        Cancel_status: 0\r\n    });\r\n\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `sales/saleOrder?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}&Retailer_Id=${filters?.Retailer_Id}&Sales_Person_Id=${filters?.Sales_Person_Id}&Created_by=${filters?.Created_by}&Cancel_status=${filters?.Cancel_status}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSaleOrders(data?.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [\r\n        filters.Fromdate,\r\n        filters?.Todate,\r\n        filters?.Retailer_Id,\r\n        filters?.Sales_Person_Id,\r\n        filters?.Created_by,\r\n        filters?.Cancel_status,\r\n        reload\r\n    ])\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSalePerson(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setUsers(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n\r\n    const saleOrderColumn = [\r\n        {\r\n            Field_Name: 'So_Id',\r\n            ColumnHeader: 'Order ID',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'Retailer_Name',\r\n            ColumnHeader: 'Customer',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'So_Date',\r\n            ColumnHeader: 'Date',\r\n            Fied_Data: 'date',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        // {\r\n        //     Field_Name: 'Products',\r\n        //     ColumnHeader: 'Products / Quantity',\r\n        //     isVisible: 1,\r\n        //     align: 'center',\r\n        //     isCustomCell: true,\r\n        //     Cell: ({ row }) => (\r\n        //         <>\r\n        //             <span>{row?.Products_List?.length ?? 0}</span> /&nbsp;\r\n        //             <span>{row?.Products_List?.reduce((sum, item) => sum += item?.Bill_Qty ?? 0, 0) ?? 0}</span>\r\n        //         </>\r\n        //     )\r\n        // },\r\n        {\r\n            Field_Name: 'Total_Before_Tax',\r\n            ColumnHeader: 'Before Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Tax',\r\n            ColumnHeader: 'Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Invoice_value',\r\n            ColumnHeader: 'Invoice Value',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            ColumnHeader: 'Status',\r\n            isVisible: 1,\r\n            align: 'center',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const convert = convertedStatus.find(status => status.id === Number(row?.isConverted));\r\n                return (\r\n                    <span className={'py-0 fw-bold px-2 rounded-4 fa-12 ' + convert?.color ?? 'bg-secondary text-white'}>\r\n                        {convert?.label ?? 'Undefined'}\r\n                    </span>\r\n                )\r\n            },\r\n        },\r\n        // {\r\n        //     Field_Name: 'Sales_Person_Name',\r\n        //     ColumnHeader: 'Sales Person',\r\n        //     Fied_Data: 'string',\r\n        //     isVisible: 1,\r\n        // },\r\n        {\r\n            Field_Name: 'Action',\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return (\r\n                    <>\r\n                        <Tooltip title='View Order'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List ? row?.Products_List : [],\r\n                                    })\r\n                                }}\r\n                                color='primary' size=\"small\"\r\n                            >\r\n                                <Visibility className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title='Edit'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    switchScreen();\r\n                                    console.log(row);\r\n                                    setOrderInfo({ ...row, isEdit: true });\r\n                                }}\r\n                                size=\"small\"\r\n                            >\r\n                                <Edit className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                    </>\r\n                )\r\n            },\r\n        },\r\n    ];\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                                {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const switchScreen = () => {\r\n        setScreen(!screen)\r\n        setOrderInfo({});\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n        setOrderInfo({});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-3 py-2 d-flex align-items-center justify-content-between\">\r\n                    <h6 className=\"fa-18 m-0 p-0\">{\r\n                        screen\r\n                            ? 'Sale Orders'\r\n                            : isValidObject(orderInfo)\r\n                                ? 'Modify Sale Order'\r\n                                : 'Sale Order Creation'}\r\n                    </h6>\r\n                    <span>\r\n                        {screen && (\r\n                            <Tooltip title='Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog({ ...dialog, filters: true })}\r\n                                >\r\n                                    <FilterAlt />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )}\r\n                        {screen && (\r\n                            <Button\r\n                                variant='outlined'\r\n                                startIcon={<Add />}\r\n                                onClick={switchScreen}\r\n                            >\r\n                                {'New'}\r\n                            </Button>\r\n                        )}\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent className=\"p-0 \">\r\n                    {screen ? (\r\n                        <FilterableTable\r\n                            dataArray={saleOrders}\r\n                            columns={saleOrderColumn}\r\n                            // EnableSerialNumber={true}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                        />\r\n                    ) : (\r\n                        <NewSaleOrderCreation\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => {\r\n                                setReload(pre => !pre);\r\n                                setScreen(pre => !pre)\r\n                            }}\r\n                            switchScreen={switchScreen}\r\n                        />\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            {Object.keys(viewOrder).length > 0 && (\r\n                <InvoiceBillTemplate\r\n                    orderDetails={viewOrder?.orderDetails}\r\n                    orderProducts={viewOrder?.orderProducts}\r\n                    download={true}\r\n                    actionOpen={true}\r\n                    clearDetails={() => setViewOrder({})}\r\n                    TitleText={'Sale Order'}\r\n                />\r\n            )}\r\n\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Retailer_Id, label: filters?.RetailerGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Retailer_Id: e.value, RetailerGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Salse Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Sales_Person_Id, label: filters?.SalsePersonGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Sales_Person_Id: e.value, SalsePersonGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...salesPerson.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Created_by, label: filters?.CreatedByGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Created_by: e.value, CreatedByGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...users.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            type=\"date\"\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={e => setFilters({ ...filters, Cancel_status: Number(e.target.value) })}\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SaleOrderList;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z\"\n}), 'Download');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3m3-10H5V5h10z\"\n}), 'Save');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;"],"names":["FilterableTable","_ref","dataArray","columns","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","columnAlign","type","class","sortedData","data","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","row","index","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","map","column","columnInd","_columnAlign$find2","isEqualNumber","Defult_Display","isVisible","Boolean","isCustomCell","Cell","align","find","String","toLowerCase","Field_Name","Object","entries","_ref3","_columnAlign$find","key","value","console","log","Fied_Data","colSpan","Number","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","ColumnHeader","replace","concat","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","RequiredStar","color","fontWeight","customTableStyles","table","width","rows","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","MainMenu","id","headname","variant","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","taxCalc","method","arguments","amount","percentage","checkIsNumber","findProductDetails","_arr$find","productid","obj","Product_Id","orderDetails","orderProducts","download","actionOpen","clearDetails","TitleText","storage","JSON","parse","localStorage","getItem","products","setProducts","retailerInfo","setRetailerInfo","companyInfo","setCompanyInfo","printRef","useRef","useEffect","fetchLink","Company_id","then","success","catch","e","error","Retailer_Id","handleClose","includedProducts","filter","orderProduct","some","product","Item_Id","isGraterNumber","Bill_Qty","Total_Invoice_value","reduce","o","item","itemRate","parseFloat","Item_Rate","billQty","Amount","Multiplication","gstPercentage","IS_IGST","Igst_P","Gst_P","GST_Inclusive","totalValueBeforeTax","acc","itemTax","basePrice","Subraction","TotalTax","TotalValue","handlePrint","useReactToPrint","content","current","extraDetails","labelOne","dataOne","So_Id","labelTwo","dataTwo","So_Date","TaxData","HSNindex","findIndex","hsnCode","HSN_Code","Taxable_Amount","Cgst_Amo","Sgst_Amo","Igst_Amo","Cgst","Sgst","Igst","prev","newValue","taxableValue","cgst","Addition","sgst","igst","totalTax","newEntry","cgstPercentage","sgstPercentage","igstPercentage","_Fragment","handleOpen","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","ref","Company_Name","Company_Address","Region","Pincode","Gst_Number","State","Retailer_Name","Reatailer_Address","Reatailer_City","PinCode","Gstno","StateGet","detail","i","productDetails","uom","UOM","quantity","amountTax","Product_Name","rowSpan","numberToWords","verticalAlign","sum","DialogActions","Button","startIcon","Close","Download","convertedStatus","label","createSvgIcon","d","editValues","loadingOn","loadingOff","reload","switchScreen","retailers","setRetailers","productBrand","setProductBrand","productUOM","setProductUOM","initialValue","Company_Id","ISOString","Sales_Person_Id","UserId","Sales_Person_Name","Name","Branch_Id","BranchId","Narration","Created_by","Product_Array","productInitialDetails","ItemName","Units","Product","Group","GroupID","Brand","BrandID","setOrderDetails","setOrderProducts","setProductDetails","isEdit","setIsEdit","addProductDialog","setAddProductDialog","_editValues$Products_","isValidObject","Products_List","pro","_pro$Item_Id","_pro$Product_Name","_pro$Bill_Qty","_pro$Item_Rate","_pro$Unit_Id","_pro$Units","_pro$Cgst_P$Sgst_P$Ig","_Number","_Number2","_Number3","_Addition","_pro$Amount","Unit_Id","Cgst_P","Sgst_P","uniqueBrand","getUniqueData","closeAddProduct","Telephone_Number","onChange","Select","options","isDisabled","styles","isSearchable","placeholder","maxMenuHeight","ml","Add","_row$Product","_row$Product2","_ref4","_ref5","_ref6","_row$Product3","_row$Product4","_row$Product5","_row$Amount","tax","_ref7","_ref8","_row$Product6","_row$Product7","_row$Product8","_row$Amount2","_ref9","_ref10","_row$Product9","_row$Product10","_row$Product11","_row$Amount3","_ref11","_row$Product12","_row$Product13","_row$Product14","_row$Product15","_row$Product16","UOM_Id","Pro_Group","Product_Group","Brand_Name","Edit","Delete","Clear","postSaleOrder","bodyData","toast","message","finally","Save","disabled","onSubmit","preventDefault","handleProductInputChange","productId","rate","productIndex","updatedValues","prevValues","warn","grp","push","productInfo","_productInfo$Pro_Grou","_productInfo$Product_","_productInfo$Brand_Na","_productInfo$Brand","_productInfo$UOM_Id","_productInfo$Units","_productInfo$Item_Rat","ind","required","Division","min","selectedIndex","text","ClearAll","saleOrders","setSaleOrders","salesPerson","setSalePerson","users","setUsers","screen","setScreen","orderInfo","setOrderInfo","viewOrder","setViewOrder","setReload","filters","setFilters","Fromdate","getPreviousDate","Todate","RetailerGet","CreatedByGet","SalsePersonGet","Cancel_status","dialog","setDialog","saleOrderColumn","_convert$label","convert","status","isConverted","Tooltip","Visibility","closeDialog","Card","FilterAlt","CardContent","Branch_Name","Round_off","NewSaleOrderCreation","keys","InvoiceBillTemplate","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","padding","paddingBottom","React","inProps","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx","getCardUtilityClass","CardRoot","overflow","raised","elevation"],"sourceRoot":""}