{"version":3,"file":"static/js/7060.11a46d73.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Dashboard/chartComp.jsx","Pages/Dashboard/erp/SOA.jsx","Pages/Attendance/attendanceComp.jsx","Pages/Dashboard/managementDashboard.jsx","Pages/Dashboard/commonDashboard.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = ''\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                            )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                        column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                    )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {title && <h6 className='fw-bold text-muted'>{title}</h6>}\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableMaxHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined\r\n};\r\n\r\n\r\nexport default FilterableTable;","import React, { useEffect, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-plugin-datalabels';\n\n\nconst PieChartComp = ({ TasksArray }) => {\n    const [chartData, setChartData] = useState(null);\n    const [chartInstance, setChartInstance] = useState(null);\n    const [totalTime, setTotalTime] = useState(null);\n\n    useEffect(() => {\n        if (TasksArray.length > 0) {\n            const totalDuration = TasksArray.reduce((acc, task) => {\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\n                return acc + (end - start);\n            }, 0);\n\n            const firstTaskStart = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[0].Start_Time);\n            const lastTaskEnd = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[TasksArray.length - 1].End_Time);\n            const totalTime = lastTaskEnd - firstTaskStart;\n            const freeTime = totalTime - totalDuration;\n\n            const totalSeconds = Math.floor(totalTime / 1000);\n            const hours = Math.floor(totalSeconds / 3600);\n            const minutes = Math.floor((totalSeconds % 3600) / 60);\n            const seconds = totalSeconds % 60;\n            setTotalTime(`${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`);\n\n            const taskData = TasksArray.map(task => {\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\n                const duration = end - start;\n                return {\n                    label: `${task.Task_Name} (${task.Start_Time} - ${task.End_Time})`,\n                    duration,\n                    backgroundColor: getRandomColor()\n                };\n            });\n\n            const chartData = {\n                labels: taskData.map(task => task.label),\n                datasets: [{\n                    data: taskData.map(task => task.duration),\n                    backgroundColor: taskData.map(task => task.backgroundColor),\n                    borderColor: 'rgba(255, 255, 255, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            chartData.labels.push('Free Time');\n            chartData.datasets[0].data.push(freeTime);\n            chartData.datasets[0].backgroundColor.push('#ADD8E6');\n\n            setChartData(chartData);\n        }\n    }, [TasksArray]);\n\n    useEffect(() => {\n        if (chartData) {\n            if (chartInstance) {\n                chartInstance.destroy();\n            }\n\n            const ctx = document.getElementById('empWokHours');\n            const newChartInstance = new Chart(ctx, {\n                type: 'pie',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    plugins: {\n                        tooltip: {\n                            callbacks: {\n                                label: function (context) {\n                                    // const label = context.label || '';\n                                    const value = context.parsed || 0;\n                                    const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\n                                    const percentage = Math.round((value / total) * 100);\n                                    const minutes = Math.round(value / (1000 * 60));\n                                    return `${minutes} minutes (${percentage}%)`;\n                                }\n                            }\n                        },\n                        datalabels: {\n                            color: '#fff',\n                            formatter: (value, context) => {\n                                const label = context.chart.data.labels[context.dataIndex];\n                                const value1 = context.parsed || 0;\n                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\n                                const percentage = Math.round((value1 / total) * 100);\n                                return `${label}: ${value} (${percentage}%)`;\n                            }\n                        }                        \n                    }\n                }\n            });\n\n            setChartInstance(newChartInstance);\n        }\n    }, [chartData]);\n\n    // for Dynamic background colors\n    const getRandomColor = () => {\n        const letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    };\n\n    return TasksArray.length > 0 ? (\n        <div className='d-flex flex-column align-items-center my-3' style={{ maxHeight: '500px' }}>\n            {totalTime && <p className='my-2'>Total Time: {totalTime}</p>}\n            <canvas id=\"empWokHours\" width=\"400\" height=\"100\"></canvas>\n        </div>\n    ) : (\n        <h5 className=\"text-center my-5\">No Data For PieChart!</h5>\n    )\n};\n\nexport default PieChartComp;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { LaunchOutlined } from '@mui/icons-material'\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Button } from \"@mui/material\";\nimport { useReactToPrint } from 'react-to-print';\nimport { utils as XLSXUtils, writeFile as writeXLSX } from 'xlsx';\nimport logo from '../ic_launcher.png';\nimport { fetchLink } from '../../../Components/fetchComponent'\n\n\nconst SOAComp = () => {\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\n    const [isCustomer, setIsCustomer] = useState(false)\n    const [dataArray, setDataArray] = useState([]);\n    const UserId = parseData?.UserId;\n    // const token = parseData?.Autheticate_Id;\n    const [total, setTotal] = useState(0)\n    const [dialog, setDialog] = useState(false)\n    const [SOA, setSOA] = useState([])\n    const [clickedRow, setClickedRow] = useState({})\n    const today = new Date();\n    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 2);\n\n    const [selectedRange, setSelectedRange] = useState({\n        from: firstDayOfMonth.toISOString().split('T')[0],\n        to: new Date().toISOString().split('T')[0],\n    });\n\n    const imageSource = logo\n    const [closingBalance, setClosingBalance] = useState({ debit: 0, credit: 0 });\n    const printRef = useRef()\n\n    useEffect(() => {\n        fetchLink({\n            address: `userModule/customer/getBalance?UserId=${UserId}`\n        }).then(data => {\n            if (data.status === 'Success') {\n                setDataArray(data.data)\n                let temp = 0;\n                data.data?.forEach(obj => {\n                    temp += Number(obj.Bal_Amount)\n                })\n                setTotal(temp)\n            }\n            if (data?.isCustomer) {\n                setIsCustomer(true)\n            } else {\n                setIsCustomer(false)\n            }\n        }).catch(e => console.error(e))\n    }, [])\n\n    const getInfo = (prop, mode) => {\n        let rowData;\n        if (mode && mode === 1) {\n            rowData = clickedRow;\n        } else {\n            rowData = prop\n        }\n        setClickedRow(rowData)\n        setDialog(true);\n        fetchLink({\n            address: `userModule/customer/StatementOfAccound?Cust_Id=${rowData?.Cust_Id}&Acc_Id=${rowData?.tally_id}&Company_Id=${rowData?.Company_Id}&Fromdate=${selectedRange?.from}&Todate=${selectedRange?.to}`\n        }).then(data => {\n            setSOA(data.data)\n            let bal = { debit: 0, credit: 0 }\n            data?.data?.forEach(obj => {\n                bal.debit += Number(obj.Debit_Amt)\n                bal.credit += Number(obj.Credit_Amt)\n            })\n            setClosingBalance(bal)\n        }).catch(e => console.error(e))\n    }\n\n    const handleClose = () => {\n        setDialog(false);\n        setSOA([]);\n        setClickedRow({});\n        setSelectedRange({\n            from: firstDayOfMonth.toISOString().split('T')[0],\n            to: new Date().toISOString().split('T')[0],\n        })\n    }\n\n    const handlePrint = useReactToPrint({\n        content: () => printRef.current,\n    });\n\n    const generateExcel = (data) => {\n        const worksheet = XLSXUtils.json_to_sheet(data);\n        const workbook = XLSXUtils.book_new();\n        XLSXUtils.book_append_sheet(workbook, worksheet, 'Sheet1');\n        writeXLSX(workbook, `erpsmt_SOA_${new Date().toLocaleDateString('en-IN', {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        })}.xlsx`);\n    }\n\n    return isCustomer ? (\n        <>\n            <div className=\"card\">\n                <div className=\"card-header py-3 bg-white\" >\n                    <p className=\"mb-0 fw-bold\" >\n                        <span>Balance of {parseData?.Name}</span>\n                        <span className={total > 0 ? 'text-primary' : 'text-danger'}> &nbsp;( {total.toLocaleString('en-IN') + (total < 0 ? ' CR' : ' DR')} )</span>\n                    </p>\n                </div>\n                <div className=\"card-body p-0 table-responsive\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th style={{ fontSize: '13px' }}>S.No</th>\n                                <th style={{ fontSize: '13px' }}> - </th>\n                                <th style={{ fontSize: '13px' }}>Company</th>\n                                <th style={{ fontSize: '13px' }}>Ledger</th>\n                                <th style={{ fontSize: '13px' }}>Balance</th>\n                                <th style={{ fontSize: '13px' }}>Dr/Cr</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {dataArray.map((o, i) => (\n                                <tr key={i}>\n                                    <td style={{ fontSize: '13px' }}>{i + 1}</td>\n                                    <td style={{ fontSize: '13px' }}>\n                                        <button\n                                            className=\"icon-btn\"\n                                            onClick={() => { getInfo(o) }}>\n                                            <LaunchOutlined sx={{ fontSize: 'inherit' }} />\n                                        </button>\n                                    </td>\n                                    <td style={{ fontSize: '13px' }}>{o?.Company_Name}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.ledger_name}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.Bal_Amount?.toLocaleString('en-IN')}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.CR_DR}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <Dialog\n                open={dialog}\n                onClose={handleClose}\n                fullScreen\n                fullWidth>\n                <DialogTitle className=\"border-bottom text-primary d-flex align-items-center fa-18\">\n                    <span className=\"flex-grow-1\">Transaction Report of {clickedRow?.Customer_name}</span>\n                    <Button\n                        className=\"fw-bold\"\n                        onClick={handlePrint} >\n                        PDF\n                    </Button>\n                    <Button\n                        className=\"ms-1 fw-bold\"\n                        onClick={() => {\n                            const transformedData = SOA.map((o, i) => ({\n                                Sno: i + 1,\n                                Date: new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\n                                    day: '2-digit',\n                                    month: '2-digit',\n                                    year: 'numeric',\n                                }),\n                                Purticular: o?.Ledger_Desc,\n                                InvoiceNo: o?.invoice_no,\n                                Debit: Boolean(Number(o.Debit_Amt)) ? o.Debit_Amt.toLocaleString('en-IN') : '',\n                                Credit: Boolean(Number(o.Credit_Amt)) ? o.Credit_Amt.toLocaleString('en-IN') : '',\n                                Company: o?.Company_Name,\n                                Ledger: o?.Ledger_Name,\n                                Mobile_Number: o?.Mobile_no\n                            }));\n                            generateExcel(transformedData);\n                        }}\n                    >\n                        excel\n                    </Button>\n                </DialogTitle>\n                <DialogContent className=\"rounded-2 shadow m-4 mb-2 p-0\" >\n                    <div className=\"row align-content-center\">\n                        <div className=\"col-lg-1\">\n                            <img src={imageSource} alt=\"Company Logo\" className=\"smtlogo\" />\n                        </div>\n                        <div className=\"col-lg-4 p-2 ps-3\">\n                            <table className=\"table border-0\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0\">Company</td>\n                                        <td className=\"border-0\">{clickedRow?.Company_Name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Ledger Name</td>\n                                        <td className=\"border-0\">{clickedRow?.ledger_name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Contact Person</td>\n                                        <td className=\"border-0\">{SOA[0]?.Contact_Person}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Mobile</td>\n                                        <td className=\"border-0\">{SOA[0]?.Mobile_no}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n\n                        </div>\n                        <div className=\"col-lg-4 p-2\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0\">Opening Balnce</td>\n                                        <td className=\"border-0 text-primary\">{\n                                            SOA[0]?.Debit_Amt > 0\n                                                ? SOA[0]?.Debit_Amt.toLocaleString('en-IN') + ' DR'\n                                                : SOA[0]?.Credit_Amt.toLocaleString('en-IN') + ' CR'\n                                        }\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">Closing Balance</td>\n                                        <td className=\"border-0 text-primary\">{\n                                            (closingBalance?.debit - closingBalance?.credit) < 0\n                                                ? (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + \" CR\"\n                                                : (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + ' DR'\n                                        }\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        <div className=\"col-lg-3 p-2\">\n                            <table className=\"table border-0\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0\">From :</td>\n                                        <td className=\"p-0 border-0\">\n                                            <input\n                                                type=\"date\"\n                                                className=\"form-control w-auto ms-2\"\n                                                onChange={(e) => setSelectedRange({ ...selectedRange, from: e.target.value })}\n                                                value={selectedRange.from} />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\">To :</td>\n                                        <td className=\"p-0 border-0\">\n                                            <input\n                                                type=\"date\"\n                                                className=\"form-control w-auto ms-2\"\n                                                onChange={(e) => {\n                                                    if (selectedRange.from && selectedRange.from <= e.target.value) {\n                                                        setSelectedRange({ ...selectedRange, to: e.target.value });\n                                                    } else {\n                                                        window.alert('Invald Date Range')\n                                                    }\n                                                }}\n                                                value={selectedRange.to}\n                                                disabled={!selectedRange.from} />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0\"></td>\n                                        <td className=\"border-0\">\n                                            <button\n                                                className=\"btn text-white\"\n                                                style={{ backgroundColor: 'rgb(66, 34, 225)' }}\n                                                onClick={() => { getInfo('', 1) }}>Search</button>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                    <div className=\"p-2 table-responsive\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th className=\"fa-13 tble-hed-stick\">-</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Date</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Particulars</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Invoice No</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Dr</th>\n                                    <th className=\"fa-13 tble-hed-stick\">Cr</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {SOA.map((o, i) => (\n                                    <tr key={i}>\n                                        <td className=\"fa-13 bg-light\">{i + 1}</td>\n                                        <td className=\"fa-13 bg-light\">\n                                            {new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\n                                                day: '2-digit',\n                                                month: '2-digit',\n                                                year: 'numeric',\n                                            })}\n                                        </td>\n                                        <td className=\"fa-13 bg-light\">{o.Ledger_Desc}</td>\n                                        <td className=\"fa-13\">{o.invoice_no}</td>\n                                        <td className=\"fa-13\">{o.Debit_Amt.toLocaleString('en-IN')}</td>\n                                        <td className=\"fa-13 bg-light\">{o.Credit_Amt.toLocaleString('en-IN')}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n\n                    {/* printable div */}\n                    <div className=\"d-none\">\n                        <div className=\"d-block px-5 py-2\" ref={printRef}>\n                            <img src={imageSource} alt=\"smtlogo\" className=\"smtlogo\" />\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Company</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{clickedRow?.Company_Name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Ledger Name</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{clickedRow?.ledger_name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Contact Person</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{SOA[0]?.Contact_Person}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Mobile</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{SOA[0]?.Mobile_no}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">From</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{selectedRange.from}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">To</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">{selectedRange.to}</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Opening Balance</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">\n                                            {\n                                                SOA[0]?.Debit_Amt > 0\n                                                    ? SOA[0]?.Debit_Amt.toLocaleString('en-IN') + ' DR'\n                                                    : SOA[0]?.Credit_Amt.toLocaleString('en-IN') + ' CR'\n                                            }\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Closing Balance</td>\n                                        <td className=\"border-0 fa-14 fw-bold\">\n                                            {\n                                                (closingBalance?.debit - closingBalance?.credit) < 0\n                                                    ? (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + \" CR\"\n                                                    : (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + ' DR'\n                                            }\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <div className=\"p-2 table-responsive\">\n                                <table className=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th className=\"fa-13 tble-hed-stick\">-</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Date</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Particulars</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Invoice No</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Dr</th>\n                                            <th className=\"fa-13 tble-hed-stick\">Cr</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {SOA.map((o, i) => (\n                                            <tr key={i}>\n                                                <td className=\"fa-13 bg-light\">{i + 1}</td>\n                                                <td className=\"fa-13 bg-light\">\n                                                    {new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\n                                                        day: '2-digit',\n                                                        month: '2-digit',\n                                                        year: 'numeric',\n                                                    })}\n                                                </td>\n                                                <td className=\"fa-13 bg-light\">{o.Ledger_Desc}</td>\n                                                <td className=\"fa-13\">{o.invoice_no}</td>\n                                                <td className=\"fa-13\">{Boolean(Number(o.Debit_Amt)) && o.Debit_Amt.toLocaleString('en-IN')}</td>\n                                                <td className=\"fa-13 bg-light\">{Boolean(Number(o.Credit_Amt)) && o.Credit_Amt.toLocaleString('en-IN')}</td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} variant='contained' color='error'>Close</Button>\n                </DialogActions>\n            </Dialog>\n\n\n        </>\n    ) : <></>\n}\n\nexport default SOAComp;","import { Button, Card, CardContent, Dialog, DialogContent, DialogTitle, DialogActions } from \"@mui/material\"\nimport { useEffect, useState } from \"react\";\nimport { LocalDate, LocalTime } from \"../../Components/functions\";\nimport { toast } from \"react-toastify\";\nimport { fetchLink } from '../../Components/fetchComponent'\n\nconst AttendanceComp = () => {\n    const storage = JSON.parse(localStorage.getItem('user'));\n    const initialValue = {\n        Latitude: null,\n        Longitude: null,\n        error: null,\n        UserId: storage.UserId,\n        Description: '',\n        dialog: false\n    }\n    const [lastAttendance, setLastAttendance] = useState({});\n    const [reload, setReload] = useState(false);\n    const [inputValue, setInputValue] = useState(initialValue);\n\n    useEffect(() => {\n        setLastAttendance({})\n        fetchLink({\n            address: `empAttendance/attendance?UserId=${storage?.UserId}`,\n        }).then(data => {\n            if (data?.success && data?.data?.length > 0) {\n                setLastAttendance(data?.data[0])\n            }\n        }).catch(e => console.error(e))            \n    }, [storage?.UserId, reload])\n\n    const getLocation = async () => {\n\n        try {\n\n            const position = await new Promise((resolve, reject) => {\n                navigator.geolocation.getCurrentPosition(resolve, reject);\n            });\n\n            const { latitude, longitude } = position.coords;\n\n            setInputValue(pre => ({\n                ...pre,\n                Latitude: latitude,\n                Longitude: longitude,\n                error: null\n            }));\n\n            return true;\n\n        } catch (error) {\n            if (error.code === error.PERMISSION_DENIED) {\n                setInputValue(pre => ({\n                    ...pre,\n                    Latitude: null,\n                    Longitude: null,\n                    error: 'Location access denied'\n                }));\n\n                toast.warn('Allow Location Access');\n            } else {\n                setInputValue(pre => ({\n                    ...pre,\n                    Latitude: null,\n                    Longitude: null,\n                    error: error.message\n                }));\n            }\n\n            return false;\n        }\n    };\n\n    const StartDay = () => {\n        getLocation().then(hasLocationAccess => {\n            if (hasLocationAccess) {\n                if (inputValue?.Latitude && inputValue?.Longitude) {\n                    fetchLink({\n                        address: `empAttendance/attendance`,\n                        method: 'POST',\n                        bodyData: {\n                            UserId: inputValue?.UserId,\n                            Latitude: inputValue?.Latitude,\n                            Longitude: inputValue?.Longitude\n                        }\n                    }).then(data => {\n                        setReload(!reload)\n                        if (data.success) {\n                            toast.success(data.message)\n                        } else {\n                            toast.error(data.message)\n                        }\n                    })\n                } else {\n                    toast.warn('Please Retry')\n                }\n            } else {\n                toast.error('There is a problem in get location')\n            }\n        });\n    };\n\n    const EndDay = () => {\n        fetchLink({\n            address: `empAttendance/attendance`,\n            method: 'PUT',\n            bodyData: {\n                Id: lastAttendance?.Id,\n                Description: inputValue?.Description\n            }\n        }).then(data => {\n            if (data.success) {\n                setReload(!reload)\n                toast.success(data.message);\n                resetValues()\n            } else {\n                toast.error(data.message)\n            }\n        })\n    }\n\n    const resetValues = () => {\n        setInputValue(initialValue)\n    }\n\n    return (\n        <>\n            <Card className=\"col-xl-4    col-lg-6 col-md-6\">\n                <div className=\"d-flex justify-content-between align-items-center p-3 border-bottom\">\n                    <h5 className=\"mb-0\">Attendance</h5>\n                    <Button\n                        variant='outlined'\n                        onClick={StartDay}\n                        disabled={Boolean(lastAttendance?.Active_Status)}\n                    >\n                        START Day\n                    </Button>\n                </div>\n                {Boolean(lastAttendance?.Active_Status) && (\n                    <>\n                        <CardContent >\n                            <div className=\"fw-bold text-muted\">\n                                <div className=\"d-flex justify-content-between\">\n                                    <span>Start Date</span><br />\n                                    <span>{lastAttendance?.Start_Date ? LocalDate(lastAttendance?.Start_Date) : ' --:--:-- '}</span>\n                                </div>\n                                <div className=\"d-flex justify-content-between\">\n                                    <span>In Time</span>\n                                    <span>{lastAttendance?.Start_Date ? LocalTime(lastAttendance?.Start_Date) : ' --:--:-- '}</span>\n                                </div>\n                            </div>\n                        </CardContent>\n                        <div className=\"border-top p-3 d-flex justify-content-end\">\n                            <Button variant='outlined' onClick={() => setInputValue(pre => ({ ...pre, dialog: true }))}>End Day</Button>\n                        </div>\n                    </>\n                )}\n            </Card>\n\n            <Dialog\n                open={inputValue?.dialog}\n                onClose={resetValues}\n                fullWidth maxWidth='md'\n            >\n                <DialogTitle>Cloase Attendance</DialogTitle>\n                <DialogContent>\n                    <label className=\"mb-3\">Work Summary</label>\n                    <textarea \n                        value={inputValue?.Description}\n                        className=\"cus-inpt\"\n                        rows={5}\n                        onChange={e => setInputValue(pre => ({ ...pre, Description: e.target.value}))}\n                        placeholder=\"Narrate the today's work summary\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={resetValues}>Cancel</Button>\n                    <Button variant='outlined' onClick={EndDay}>Confirm</Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\n\nexport default AttendanceComp;","import { useEffect, useState } from \"react\"\nimport { groupData, ISOString, NumberFormat } from \"../../Components/functions\";\nimport { ShoppingCart } from \"@mui/icons-material\";\nimport { LuArrowUpWideNarrow } from \"react-icons/lu\";\nimport { HiOutlineCurrencyRupee } from \"react-icons/hi\";\nimport { IoReceiptOutline } from \"react-icons/io5\";\nimport { BsCartPlus } from \"react-icons/bs\";\nimport { PiHandCoinsFill } from \"react-icons/pi\";\nimport { FaCubesStacked } from \"react-icons/fa6\";\nimport { fetchLink } from \"../../Components/fetchComponent\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\nimport FilterableTable from '../../Components/filterableTable2';\n\n\nconst getIcons = (str) => {\n    const iconArr = [\n        {\n            str: 'SALES',\n            icon: <LuArrowUpWideNarrow style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'PURCHASE',\n            icon: <ShoppingCart style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'RECEIPT',\n            icon: <IoReceiptOutline style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'PAYMENT',\n            icon: <HiOutlineCurrencyRupee style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'EXPENCES',\n            icon: <PiHandCoinsFill style={{ fontSize: '80px' }} />\n        },\n        {\n            str: 'PURCHASE ORDER',\n            icon: <BsCartPlus style={{ fontSize: '80px' }} />,\n        },\n        {\n            str: 'STOCK VALUE',\n            icon: <FaCubesStacked style={{ fontSize: '70px' }} />,\n        },\n    ]\n\n    return iconArr.find(o => str === o.str)?.icon || <></>\n}\n\n\nconst CardComp = ({ title, icon, firstVal, secondVal, classCount, onClick }) => {\n    return (\n        <>\n            <div className={`col-xxl-3 col-lg-4 col-md-6 col-sm-12 p-2`}>\n                <div onClick={onClick} className={\"coloredDiv d-flex align-items-center text-light cus-shadow coloredDiv\" + classCount}>\n                    <div className=\"flex-grow-1 p-3\">\n                        <h5 >{title}</h5>\n                        <h3 className=\"fa-16 text-end pe-3\">\n                            <span style={{ fontSize: '30px' }}>{firstVal ? firstVal : 0} </span>\n                            {secondVal && '(' + secondVal + ')'}\n                        </h3>\n                    </div>\n                    {icon}\n                </div>\n            </div>\n        </>\n    )\n}\n\n\nconst ManagementDashboard = () => {\n    const storage = JSON.parse(localStorage.getItem('user'));\n    const UserAccess = Number(storage?.UserTypeId) === 2 || Number(storage?.UserTypeId) === 0 || Number(storage?.UserTypeId) === 1;\n\n    const [mangementReport, setMangementReport] = useState([]);\n    const [secRow, setSecRow] = useState([]);\n    const [theredRow, setTheredRow] = useState([]);\n\n    const [popUpDetails, setPopUpDetails] = useState({\n        salesDetails: [],\n    });\n\n    const [popUpDialogs, setPopUpDialogs] = useState({\n        salesDetails: false,\n    })\n\n    const [filter, setFilter] = useState({\n        date: ISOString(),\n    });\n\n    useEffect(() => {\n        if (UserAccess && storage.Company_id) {\n            fetchLink({\n                address: `dashboard/erp/dashboardData?Fromdate=${filter?.date}&Company_Id=${storage.Company_id}`\n            })\n                .then(data => {\n                    if (data.success) {\n                        setMangementReport(data?.data[0])\n                        setSecRow(data?.data[1])\n                        setTheredRow(data?.data[2]);\n                    }\n                })\n                .catch(e => console.error(e))\n        }\n    }, [UserAccess, filter.date]);\n\n    useEffect(() => {\n        if (UserAccess) {\n            fetchLink({\n                address: `dashboard/salesInfo?Fromdate=${filter?.date}&Todate=${filter?.date}`,\n                headers: {\n                    'Db': storage?.Company_id\n                }\n            }).then(data => {\n                if (data.success) {\n                    setPopUpDetails(pre => ({\n                        ...pre,\n                        salesDetails: data.data ?? []\n                    }));\n                } else {\n                    setPopUpDetails(pre => ({ ...pre, salesDetails: []}));\n                }\n            }).catch(e => console.error(e))\n        }\n    }, [filter.date]);\n\n    const salesDetailsGrouped = groupData(popUpDetails?.salesDetails, 'Party_Group');\n\n    return (\n        <>\n            <input\n                type=\"date\"\n                className=\"cus-inpt w-auto m-1\"\n                value={filter.date}\n                onChange={e => setFilter(pre => ({ ...pre, date: e.target.value }))}\n            />\n\n            <div className=\"p-1 row\">\n                {theredRow?.map((o, i) => (\n                    <CardComp\n                        key={i}\n                        icon={getIcons('STOCK VALUE')}\n                        title={'STOCK VALUE'}\n                        classCount={16}\n                        firstVal={o?.Stock_Value ? NumberFormat(parseInt(o?.Stock_Value)) : 0}\n                    />\n                ))}\n                {mangementReport?.map((o, i) => (\n                    <CardComp\n                        key={i}\n                        title={o?.Trans_Type}\n                        onClick={() => {\n                            switch (o?.Trans_Type) {\n                                case 'SALES':\n                                    setPopUpDialogs(pre => ({ ...pre, salesDetails: true }));\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }}\n                        icon={o?.Trans_Type ? getIcons(o?.Trans_Type) : undefined}\n                        classCount={i + 7}\n                        firstVal={o?.Trans_Amount ? NumberFormat(parseInt(o?.Trans_Amount)) : 0}\n                        secondVal={o?.Trans_Count ? NumberFormat(o?.Trans_Count) : 0}\n                    />\n                ))}\n                {secRow?.map((o, i) => (\n                    <CardComp\n                        key={i}\n                        title={'EXPENCES'}\n                        icon={getIcons('EXPENCES')}\n                        classCount={19}\n                        firstVal={o?.Total_Cost_Vlaue ? NumberFormat(o?.Total_Cost_Vlaue) : 0}\n                    />\n                ))}\n            </div>\n\n            <Dialog\n                open={popUpDialogs.salesDetails}\n                onClose={() => setPopUpDialogs(pre => ({ ...pre, salesDetails: false }))}\n                fullWidth maxWidth='sm'\n            >\n                <DialogTitle>Sales Details</DialogTitle>\n                <DialogContent>\n                    {/* <DisplayArrayData \n                        dataArray={popUpDetails.salesDetails} \n                        columns={Object.keys(popUpDetails?.salesDetails[0] ?? {}).map(head => ({\n                            Column_Name: head,\n                            Data_Type: 'string'\n                        }))} \n                    /> */}\n                    <FilterableTable \n                        dataArray={salesDetailsGrouped}\n                        columns={[\n                            {\n                                Field_Name: 'Party_Group',\n                                Fied_Data: 'string',\n                                isVisible: 1,\n                            },\n                            {\n                                isCustomCell: true,\n                                ColumnHeader: 'Total Amount',\n                                Cell: ({ row }) => NumberFormat(row?.groupedData?.reduce((acc, item) => acc + Number(item?.Amount), 0)),\n                                isVisible: 1,\n                            },\n                        ]}\n                        disablePagination={true}\n                        EnableSerialNumber\n                        isExpendable={true}\n                        expandableComp={({ row }) => (\n                            <FilterableTable \n                                dataArray={row?.groupedData ?? []}\n                                columns={[\n                                    {\n                                        Field_Name: 'Payment_Mode',\n                                        Fied_Data: 'string',\n                                        isVisible: 1,\n                                    },\n                                    {\n                                        Field_Name: 'Amount',\n                                        Fied_Data: 'number',\n                                        isVisible: 1,\n                                    },\n                                ]}\n                                disablePagination={true}\n                            />\n                        )}\n                    />\n                    {/* <div className=\"table-responsive\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    {Object.keys(popUpDetails?.salesDetails[0] ?? {}).map(head => (\n                                        <th className=\"fa-14 border \">{head}</th>\n                                    ))}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    {Object.keys(popUpDetails.salesDetails).map(head => (\n                                        <th className=\"fa-14 border \">{head}</th>\n                                    ))}\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div> */}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setPopUpDialogs(pre => ({ ...pre, salesDetails: false }))}></Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nexport default ManagementDashboard;","import { useEffect, useState } from \"react\"\nimport { CiCalendarDate } from \"react-icons/ci\";\nimport { CgSandClock } from \"react-icons/cg\";\nimport { HiUsers } from \"react-icons/hi2\";\nimport { RxLapTimer } from \"react-icons/rx\";\nimport { TbTargetArrow } from \"react-icons/tb\";\nimport { BiTask } from \"react-icons/bi\";\nimport PieChartComp from \"./chartComp\";\nimport { Card, CardHeader, CardContent, Paper, FormControlLabel, Switch } from '@mui/material'\nimport SOAComp from \"./erp/SOA\";\nimport AttendanceComp from \"../Attendance/attendanceComp\";\nimport ManagementDashboard from \"./managementDashboard\";\nimport { fetchLink } from '../../Components/fetchComponent'\nimport { ISOString } from \"../../Components/functions\";\n\n\n\nconst CommonDashboard = () => {\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\n    const [dashboardData, setDashboardData] = useState({});\n    const [workedDetais, setWorkedDetais] = useState([]);\n    const [myTasks, setMyTasks] = useState([]);\n    const [tallyDetails, setTallyDetails] = useState([]);\n    const isAdmin = Number(parseData?.UserTypeId) === 0 || Number(parseData?.UserTypeId) === 1\n    const isMangement = Number(parseData?.UserTypeId) === 2\n    const isEmp = Number(parseData?.UserTypeId) === 6 || Number(parseData?.UserTypeId) === 3;\n    const isCustomer = Number(parseData?.UserTypeId) === 4 || Number(parseData?.UserTypeId) === 5;\n    const [dispTask, setDispTask] = useState(false)\n\n    useEffect(() => {\n        if (isAdmin || isEmp || isMangement) {\n            fetchLink({\n                address: `dashboard/dashboardData?UserType=${parseData?.UserTypeId}&Emp_Id=${parseData?.UserId}`\n            })\n            .then(data => {\n                if (data.success) {\n                    setDashboardData(data.data[0]);\n                } else {\n                    setDashboardData({});\n                }\n            })\n            .catch(e => {\n                console.error(e);\n            });\n        }\n    }, [parseData?.UserId, parseData?.UserTypeId, isAdmin, isMangement, isEmp]);\n\n    useEffect(() => {\n        if (isEmp) {\n            fetchLink({\n                address:`dashboard/getTallyData?UserId=${parseData?.UserId}`\n            }).then(data => {\n                if (data.success) {\n                    setTallyDetails(data.data);\n                } else {\n                    setTallyDetails([])\n                }\n            }).catch(e => console.error(e))\n        }\n    }, [isEmp])\n\n    useEffect(() => {\n        if (isEmp) {\n            fetchLink({\n                address:`taskManagement/task/work?Emp_Id=${parseData?.UserId}&from=${ISOString()}&to=${ISOString()}`\n            }).then(data => {\n                if (data.success) {\n                    setWorkedDetais(data.data);\n                } else {\n                    setTallyDetails([])\n                }\n            }).catch(e => console.error(e))\n\n            fetchLink({\n                address:`taskManagement/tasks/myTasks?Emp_Id=${parseData?.UserId}&reqDate=${ISOString()}`\n            }).then(data => {\n                if (data.success) {\n                    data.data.sort((a, b) => {\n                        const [aHours, aMinutes] = a?.Sch_Time.split(':').map(Number);\n                        const [bHours, bMinutes] = b?.Sch_Time.split(':').map(Number);\n                        if (aHours !== bHours) {\n                            return aHours - bHours;\n                        }\n                        return aMinutes - bMinutes;\n                    });\n                    setMyTasks(data.data);\n                } else {\n                    setMyTasks([])\n                }\n            }).catch(e => console.error(e))\n        }\n    }, [isEmp, parseData?.UserId])\n\n    const CardComp = ({ title, icon, firstVal, secondVal, classCount }) => {\n        return (\n            <>\n                <div className={`${(isAdmin || isMangement) && 'col-xxl-3'} col-lg-4 col-md-6 col-sm-12 p-2`}>\n                    <div className={\"coloredDiv d-flex align-items-center text-light cus-shadow coloredDiv\" + classCount}>\n                        <div className=\"flex-grow-1 p-3\">\n                            <h5 className=\"text-uppercase\">{title}</h5>\n                            <h3 className=\"fa-16 text-end pe-3\">\n                                <span style={{ fontSize: '30px' }}>{firstVal ? firstVal : 0} </span>\n                                {secondVal && '/' + secondVal}\n                            </h3>\n                        </div>\n                        {icon}\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n    const minFormat = (val) => {\n        const hour = Math.floor(Number(val) / 60);\n        const minutes = Number(val) % 60;\n        const formatHour = hour < 10 ? '0' + hour : hour;\n        const formatMinute = minutes < 10 ? '0' + minutes : minutes;\n\n        return (formatHour && formatMinute) ? formatHour + ':' + formatMinute : '00:00';\n    }\n\n    const statusColor = (id) => {\n        const numId = Number(id);\n        const color = ['bg-dark', 'bg-info', 'bg-warning', 'bg-success', 'bg-danger'];\n        return color[numId]\n    }\n\n    return (\n        <>\n            {isCustomer && <SOAComp />}\n\n            {(isMangement || isAdmin) && <ManagementDashboard />}\n\n            {(isAdmin || isMangement) && (\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={dispTask}\n                            onChange={e => setDispTask(e.target.checked)}\n                        />\n                    }\n                    label=\"Show Task Management\"\n                    className=\" fw-bold text-primary\"\n                />\n            )}\n\n            <div className=\"px-1\">\n                {((isAdmin || isMangement) && dispTask) && (\n                    <div className=\"row\">\n                        <CardComp\n                            title={'Projects'}\n                            icon={<TbTargetArrow style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.ActiveProjects}\n                            secondVal={dashboardData?.AllProjects}\n                            classCount={'1'}\n                        />\n                        <CardComp\n                            title={'Schedule'}\n                            icon={<CiCalendarDate style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.ActiveSchedule}\n                            secondVal={dashboardData?.AllSchedule}\n                            classCount={'2'}\n                        />\n                        <CardComp\n                            title={'Completed Tasks'}\n                            icon={<BiTask style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.TaskCompleted}\n                            // secondVal={dashboardData?.TaskAssigned}\n                            classCount={'3'}\n                        />\n                        <CardComp\n                            title={'Employee'}\n                            icon={<HiUsers style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.EmployeeCounts}\n                            secondVal={Number(dashboardData?.EmployeeCounts) + dashboardData?.OtherUsers}\n                            classCount={'4'}\n                        />\n                        <CardComp\n                            title={'Worked Hours'}\n                            icon={<RxLapTimer style={{ fontSize: '80px' }} />}\n                            firstVal={minFormat(dashboardData?.TotalMinutes)}\n                            classCount={'5'}\n                        />\n                        <CardComp\n                            title={'Today Tasks'}\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\n                            firstVal={dashboardData?.TodayTaskCompleted}\n                            secondVal={dashboardData?.TodayTasks}\n                            classCount={'6'}\n                        />\n                    </div>\n                )}\n                {isEmp && (\n                    <div className=\"row\">\n                        <CardComp\n                            title={'Completed Tasks'}\n                            firstVal={dashboardData?.TaskCompleted}\n                            secondVal={dashboardData?.TotalTasks}\n                            icon={<BiTask style={{ fontSize: '80px' }} />}\n                            classCount={'1'} />\n                        <CardComp\n                            title={'Today Tasks'}\n                            firstVal={dashboardData?.TodayTaskCompleted}\n                            secondVal={dashboardData?.TodayTasks}\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\n                            classCount={'2'} />\n                        <CardComp\n                            title={'Total Work Hours'}\n                            firstVal={minFormat(dashboardData?.WorkedMinutes)}\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\n                            classCount={'3'} />\n                    </div>\n                )}\n            </div>\n\n            <br />\n\n            {isEmp && <AttendanceComp />}\n\n            <br />\n\n            {(isEmp && workedDetais.length > 0) && (\n                <>\n                    <Card>\n                        <CardContent sx={{ pb: 2 }}>\n                            <h5>Today Activity</h5>\n                            <PieChartComp TasksArray={workedDetais} />\n                            <br />\n                        </CardContent>\n                    </Card>\n                    <br />\n                </>\n            )}\n\n            {(isEmp && myTasks.length > 0) && (\n                <Card>\n                    <CardHeader title={'Today Tasks:' + myTasks.length} sx={{ pb: 0 }} />\n                    <CardContent>\n\n                        <div className=\"table-responsive\">\n                            <table className=\"table mb-1 \">\n                                <thead>\n                                    <tr>\n                                        <th className=\"fa-13 border\">SNo</th>\n                                        <th className=\"fa-13 border\">Task</th>\n                                        <th className=\"fa-13 border\">Timer Based</th>\n                                        <th className=\"fa-13 border\">Schedule</th>\n                                        <th className=\"fa-13 border\">Duration</th>\n                                        <th className=\"fa-13 border\">Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {myTasks.map((o, i) => (\n                                        <tr key={i}>\n                                            <td className=\"fa-13 border\">{i + 1}</td>\n                                            <td className=\"fa-13 border\">{o?.Task_Name}</td>\n                                            <td className=\"fa-13 border text-center\">\n                                                <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(Number(o?.Timer_Based) === 1 ? 3 : 1)}`}>\n                                                    {Number(o?.Timer_Based) === 1 ? 'Yes' : 'No'}\n                                                </span>\n                                            </td>\n                                            <td className=\"fa-13 border text-center\">{o?.Sch_Time} - {o?.EN_Time}</td>\n                                            <td className=\"fa-13 border text-center\">{o?.Sch_Period}</td>\n                                            <td className=\"fa-13 border text-center\">\n                                                <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(o?.Work_Id ? 3 : 1)}`}>\n                                                    {o?.Work_Id ? 'Completed' : 'Pending'}\n                                                </span>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </CardContent>\n                </Card>\n            )}\n\n            <br />\n\n            {(isEmp && tallyDetails?.length > 0) && (\n                <Card component={Paper}>\n                    <CardHeader title=\"Tally Entries\" sx={{ pb: 0 }} />\n                    <CardContent>\n                        <div className=\"table-responsive\">\n                            <table className=\"table\">\n                                <thead>\n                                    <tr>\n                                        <th className=\"fa-13 border\">Sno</th>\n                                        <th className=\"fa-13 border\">Particulars</th>\n                                        <th className=\"fa-13 border\">Value</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {tallyDetails?.map((o, i) => (\n                                        <tr key={i}>\n                                            <td className=\"fa-13 border\">{i + 1}</td>\n                                            <td className=\"fa-13 border\">{o?.Particulars}</td>\n                                            <td className=\"fa-13 border\">{o?.Tally_Count}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </CardContent>\n                </Card>\n            )}\n\n        </>\n    )\n}\n\n\nexport default CommonDashboard"],"names":["FilterableTable","_ref","dataArray","columns","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","columnAlign","type","class","columnVerticalAlign","sortedData","data","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","row","index","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","map","column","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Defult_Display","isVisible","Boolean","isCustomCell","Cell","align","find","String","toLowerCase","verticalAlign","Field_Name","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","key","value","console","log","Fied_Data","colSpan","Number","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","ColumnHeader","replace","concat","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","TasksArray","chartData","setChartData","chartInstance","setChartInstance","totalTime","setTotalTime","useEffect","totalDuration","reduce","acc","task","start","Date","toISOString","split","Start_Time","End_Time","firstTaskStart","freeTime","totalSeconds","Math","floor","hours","minutes","seconds","padStart","taskData","duration","label","Task_Name","getRandomColor","labels","datasets","borderColor","borderWidth","push","destroy","ctx","document","getElementById","newChartInstance","Chart","options","responsive","plugins","tooltip","callbacks","context","parsed","total","dataset","curr","percentage","round","datalabels","color","formatter","chart","dataIndex","value1","i","random","id","width","height","SOAComp","_SOA$","_SOA$2","_SOA$3","_SOA$4","_SOA$5","_SOA$6","_SOA$7","_SOA$8","_SOA$9","_SOA$10","parseData","JSON","parse","localStorage","getItem","isCustomer","setIsCustomer","setDataArray","UserId","setTotal","dialog","setDialog","SOA","setSOA","clickedRow","setClickedRow","today","firstDayOfMonth","getFullYear","getMonth","selectedRange","setSelectedRange","to","imageSource","logo","closingBalance","setClosingBalance","debit","credit","printRef","useRef","fetchLink","address","then","status","_data$data","temp","forEach","obj","Bal_Amount","catch","e","error","getInfo","prop","mode","_rowData","_rowData2","_rowData3","rowData","Cust_Id","tally_id","Company_Id","_data$data2","bal","Debit_Amt","Credit_Amt","handleClose","handlePrint","useReactToPrint","content","current","_Fragment","Name","toLocaleString","o","_o$Bal_Amount","LaunchOutlined","Company_Name","ledger_name","CR_DR","Dialog","onClose","fullScreen","fullWidth","DialogTitle","Customer_name","Button","worksheet","XLSXUtils","json_to_sheet","workbook","book_new","book_append_sheet","writeXLSX","toLocaleDateString","day","month","year","hour","minute","second","generateExcel","Sno","Ledger_Date","Purticular","Ledger_Desc","InvoiceNo","invoice_no","Debit","Credit","Company","Ledger","Ledger_Name","Mobile_Number","Mobile_no","DialogContent","src","alt","Contact_Person","onChange","window","alert","disabled","ref","DialogActions","variant","AttendanceComp","storage","initialValue","Latitude","Longitude","Description","lastAttendance","setLastAttendance","reload","setReload","inputValue","setInputValue","success","resetValues","Card","StartDay","async","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","code","PERMISSION_DENIED","toast","warn","message","getLocation","hasLocationAccess","method","bodyData","Active_Status","CardContent","Start_Date","maxWidth","rows","placeholder","EndDay","Id","getIcons","str","_iconArr$find","icon","LuArrowUpWideNarrow","ShoppingCart","IoReceiptOutline","HiOutlineCurrencyRupee","PiHandCoinsFill","BsCartPlus","FaCubesStacked","CardComp","firstVal","secondVal","classCount","ManagementDashboard","UserAccess","UserTypeId","mangementReport","setMangementReport","secRow","setSecRow","theredRow","setTheredRow","popUpDetails","setPopUpDetails","salesDetails","popUpDialogs","setPopUpDialogs","filter","setFilter","date","ISOString","Company_id","headers","salesDetailsGrouped","groupData","Stock_Value","Trans_Type","Trans_Amount","Trans_Count","Total_Cost_Vlaue","_row$groupedData","groupedData","item","Amount","_row$groupedData2","CommonDashboard","dashboardData","setDashboardData","workedDetais","setWorkedDetais","myTasks","setMyTasks","tallyDetails","setTallyDetails","isAdmin","isMangement","isEmp","dispTask","setDispTask","aHours","aMinutes","Sch_Time","bHours","bMinutes","minFormat","formatHour","formatMinute","statusColor","FormControlLabel","control","Switch","checked","TbTargetArrow","ActiveProjects","AllProjects","CiCalendarDate","ActiveSchedule","AllSchedule","BiTask","TaskCompleted","HiUsers","EmployeeCounts","OtherUsers","RxLapTimer","TotalMinutes","CgSandClock","TodayTaskCompleted","TodayTasks","TotalTasks","WorkedMinutes","pb","PieChartComp","CardHeader","Timer_Based","EN_Time","Sch_Period","Work_Id","Particulars","Tally_Count"],"sourceRoot":""}