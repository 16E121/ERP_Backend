{"version":3,"file":"static/js/944.a5935c52.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/requiredStar.jsx","Pages/Authorization/newMenuManagement.jsx","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@babel/runtime/helpers/esm/typeof.js"],"sourcesContent":["import React, { Fragment, useRef, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton, Button, Popover, MenuList, MenuItem, ListItemIcon, ListItemText, Tooltip } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} name\r\n * @property {Element} icon\r\n * @property {Function} onclick\r\n * @property {boolean} disabled\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n * @param {boolean} [props.PDFPrintOption]\r\n * @param {boolean} [props.ExcelPrintOption]\r\n * @param {boolean} [props.maxHeightOption]\r\n * @param {React.ReactElement} [props.ButtonArea]\r\n * @param {Array<Menu>} props.MenuButtons\r\n */\r\n\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'middle') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst createPopUpMenu = (name, icon, onclick, disabled = false) => (\r\n    <MenuItem\r\n        onClick={onclick}\r\n        disabled={disabled}\r\n    >\r\n        <ListItemIcon>{icon}</ListItemIcon>\r\n        <ListItemText>{name}</ListItemText>\r\n    </MenuItem>\r\n)\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = []\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                    column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                                )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                            column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                        )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const TableActions = () => {\r\n        const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n        const popOverOpen = Boolean(anchorEl);\r\n\r\n        const handleClick = (event) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Tooltip title='Export options and more...'>\r\n                    <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </Tooltip>\r\n\r\n                <Popover\r\n                    open={popOverOpen}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                >\r\n                    <MenuList>\r\n\r\n                        {maxHeightOption && (\r\n                            <MenuItem\r\n                                onClick={() => setShowFullHeight(pre => !pre)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    {showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />\r\n                                    }\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    color={showFullHeight ? 'success' : ''}\r\n                                >Max Height</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {PDFPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => generatePDF(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download PDF</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {ExcelPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => exportToExcel(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download Excel</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {MenuButtons.map(btn => createPopUpMenu(btn.name, btn.icon, btn.onclick, btn.disabled))}\r\n\r\n                    </MenuList>\r\n                </Popover>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='rounded-3 bg-white overflow-hidden'>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {/* {maxHeightOption && (\r\n                    <div>\r\n                        <label className=\"form-check-label p-1\" htmlFor=\"fullHeight\">Max Height</label>\r\n                        <input\r\n                            className=\"form-check-input shadow-none\"\r\n                            style={{ padding: '0.7em' }}\r\n                            type=\"checkbox\"\r\n                            id=\"fullHeight\"\r\n                            checked={showFullHeight}\r\n                            onChange={e => setShowFullHeight(e.target.checked)}\r\n                        />\r\n                    </div>\r\n                )} */}\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && <TableActions />}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: []\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    // createPopUpMenu,\r\n}","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { isEqualNumber, isValidObject } from '../../Components/functions';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tooltip } from \"@mui/material\";\r\nimport { Add, Edit } from \"@mui/icons-material\";\r\nimport { toast } from \"react-toastify\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport RequiredStar from \"../../Components/requiredStar\";\r\n\r\nconst initialValue = {\r\n    id: '',\r\n    name: '',\r\n    menu_type: 1,\r\n    parent_id: '',\r\n    url: '',\r\n    display_order: 1,\r\n    is_active: 1,\r\n    parantDetails: {},\r\n}\r\n\r\nconst MenuManagement = ({ loadingOn, loadingOff }) => {\r\n    const [inputValues, setInputValues] = useState(initialValue);\r\n    const [reload, setReload] = useState(false);\r\n    const [menuData, setMenuData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `authorization/menuMaster`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setMenuData(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [reload]);\r\n\r\n    const DisplaySubRoutings = ({ dataSource }) => (\r\n        <FilterableTable\r\n            dataArray={dataSource?.SubRoutes ?? []}\r\n            title='Sub Routes'\r\n            columns={[\r\n                {\r\n                    isVisible: 1,\r\n                    Field_Name: 'name',\r\n                    Fied_Data: 'string',\r\n                    ColumnHeader: 'Menu',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    Field_Name: 'url',\r\n                    Fied_Data: 'string',\r\n                    ColumnHeader: 'Address',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <Tooltip title='Add SubRouting'>\r\n                            <span>\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    className=\"bg-light\"\r\n                                    onClick={() => {\r\n                                        setInputValues(pre => ({\r\n                                            ...pre,\r\n                                            menu_type: 0,\r\n                                            parent_id: row.id,\r\n                                            parantDetails: row,\r\n                                            url: (row?.url ?? '') + '/'\r\n                                        }));\r\n                                        setDialog(true);\r\n                                    }}\r\n                                    startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                >\r\n                                    {row?.SubRoutes?.length ?? 0}\r\n                                </Button>\r\n                            </span>\r\n                        </Tooltip>\r\n                    ),\r\n                    ColumnHeader: 'Sub Routings',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    Field_Name: 'display_order',\r\n                    Fied_Data: 'number',\r\n                    ColumnHeader: 'Order',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        isEqualNumber(row?.is_active, 1) ? (\r\n                            <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                        ) : (\r\n                            <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">In-Active</span>\r\n                        )\r\n                    ),\r\n                    ColumnHeader: 'Status',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            <Tooltip title='Edit Menu'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    className=\"p-1\"\r\n                                    onClick={() => {\r\n                                        setInputValues(pre => ({\r\n                                            ...pre,\r\n                                            id: row?.id,\r\n                                            name: row?.name ?? '',\r\n                                            menu_type: 0,\r\n                                            parent_id: row?.parent_id ?? '',\r\n                                            url: row?.url ?? '',\r\n                                            display_order: row?.display_order ?? '',\r\n                                            is_active: row?.is_active ?? '',\r\n                                        }));\r\n                                        setDialog(true);\r\n                                    }}\r\n                                >\r\n                                    <Edit sx={{ fontSize: '18px' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </>\r\n                    ),\r\n                    ColumnHeader: 'Action',\r\n                }\r\n            ]}\r\n            tableMaxHeight={700}\r\n            isExpendable={true}\r\n            expandableComp={({ row }) => (row?.SubRoutes?.length > 0) && <DisplaySubRoutings dataSource={row} />}\r\n        />\r\n    )\r\n\r\n    const DisplayChildMenu = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                {row?.ChildMenu?.length > 0 && (\r\n                    <FilterableTable\r\n                        dataArray={row?.ChildMenu ?? []}\r\n                        title='Child Menus'\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'name',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Child Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'url',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Address',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add SubRouting'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 0,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.SubRoutes?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Sub Routings',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'display_order',\r\n                                Fied_Data: 'number',\r\n                                ColumnHeader: 'Order',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    isEqualNumber(row?.is_active, 1) ? (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                                    ) : (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">In-Active</span>\r\n                                    )\r\n                                ),\r\n                                ColumnHeader: 'Status',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <>\r\n                                        <Tooltip title='Edit Menu'>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                className=\"p-1\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        id: row?.id,\r\n                                                        name: row?.name ?? '',\r\n                                                        menu_type: 3,\r\n                                                        parent_id: row?.parent_id ?? '',\r\n                                                        url: row?.url ?? '',\r\n                                                        display_order: row?.display_order ?? '',\r\n                                                        is_active: row?.is_active ?? '',\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                            >\r\n                                                <Edit sx={{ fontSize: '18px' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n\r\n                                    </>\r\n                                ),\r\n                                ColumnHeader: 'Action',\r\n                            }\r\n                        ]}\r\n                    />\r\n                )}\r\n\r\n                {row.SubRoutes.length > 0 && (\r\n                    <>\r\n                        <br />\r\n                        <DisplaySubRoutings dataSource={row} />\r\n                    </>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const DisplaySubMenu = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                {row.SubMenu.length > 0 && (\r\n                    <FilterableTable\r\n                        dataArray={row?.SubMenu ?? []}\r\n                        title='Sub Menus'\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'name',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Sub Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'url',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Address',\r\n                            },\r\n\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add Child-Menu'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 3,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.ChildMenu?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Child Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add SubRouting'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 0,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.SubRoutes?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Sub Routings',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'display_order',\r\n                                Fied_Data: 'number',\r\n                                ColumnHeader: 'Order',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    isEqualNumber(row?.is_active, 1) ? (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                                    ) : (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">In-Active</span>\r\n                                    )\r\n                                ),\r\n                                ColumnHeader: 'Status',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <>\r\n                                        <Tooltip title='Edit Menu'>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                className=\"p-1\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        id: row?.id,\r\n                                                        name: row?.name ?? '',\r\n                                                        menu_type: 2,\r\n                                                        parent_id: row?.parent_id ?? '',\r\n                                                        url: row?.url ?? '',\r\n                                                        display_order: row?.display_order ?? '',\r\n                                                        is_active: row?.is_active ?? '',\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                            >\r\n                                                <Edit sx={{ fontSize: '18px' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </>\r\n                                ),\r\n                                ColumnHeader: 'Action',\r\n                            }\r\n                        ]}\r\n                        tableMaxHeight={700}\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => (row?.ChildMenu?.length > 0 || row?.SubRoutes?.length > 0) && <DisplayChildMenu row={row} />}\r\n                    />\r\n                )}\r\n\r\n                {row.SubRoutes.length > 0 && (\r\n                    <>\r\n                        <br />\r\n                        <DisplaySubRoutings dataSource={row} />\r\n                    </>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setInputValues(initialValue);\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (loadingOn) {\r\n            loadingOn();\r\n        }\r\n        fetchLink({\r\n            address: 'authorization/menuMaster',\r\n            method: inputValues.id ? 'PUT' : 'POST',\r\n            bodyData: inputValues\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                closeDialog();\r\n                setReload(pre => !pre);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) {\r\n                loadingOff();\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            {/* <div className=\"d-flex justify-content-end pb-2\">\r\n\r\n            </div> */}\r\n\r\n            <FilterableTable\r\n                title=\"Main Menu\"\r\n                ButtonArea={\r\n                    <Button\r\n                        onClick={() => {\r\n                            setDialog(true);\r\n                            setInputValues(initialValue);\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        startIcon={<Add />}\r\n                    >\r\n                        New Menu\r\n                    </Button>\r\n                }\r\n                dataArray={menuData}\r\n                columns={[\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'name',\r\n                        Fied_Data: 'string',\r\n                        ColumnHeader: 'Main Menu',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'url',\r\n                        Fied_Data: 'string',\r\n                        ColumnHeader: 'Address',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <Tooltip title='Add Sub-Menu'>\r\n                                <span>\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        className=\"bg-light\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                menu_type: 2,\r\n                                                parent_id: row.id,\r\n                                                parantDetails: row,\r\n                                                url: (row?.url ?? '') + '/'\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                        startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                    >\r\n                                        {row?.SubMenu?.length ?? 0}\r\n                                    </Button>\r\n                                </span>\r\n                            </Tooltip>\r\n                        ),\r\n                        ColumnHeader: 'Sub Menu',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <Tooltip title='Add SubRouting'>\r\n                                <span>\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        className=\"bg-light\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                menu_type: 0,\r\n                                                parent_id: row.id,\r\n                                                parantDetails: row,\r\n                                                url: (row?.url ?? '') + '/'\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                        startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                    >\r\n                                        {row?.SubRoutes?.length ?? 0}\r\n                                    </Button>\r\n                                </span>\r\n                            </Tooltip>\r\n                        ),\r\n                        ColumnHeader: 'Sub Routings',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'display_order',\r\n                        Fied_Data: 'number',\r\n                        ColumnHeader: 'Order',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            isEqualNumber(row?.is_active, 1) ? (\r\n                                <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                            ) : (\r\n                                <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">In-Active</span>\r\n                            )\r\n                        ),\r\n                        ColumnHeader: 'Status',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <>\r\n                                <Tooltip title='Edit Menu'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        className=\"p-1\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                id: row?.id,\r\n                                                name: row?.name ?? '',\r\n                                                menu_type: 1,\r\n                                                parent_id: row?.parent_id ?? '',\r\n                                                url: row?.url ?? '',\r\n                                                display_order: row?.display_order ?? '',\r\n                                                is_active: row?.is_active ?? '',\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                    >\r\n                                        <Edit sx={{ fontSize: '18px' }} />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n\r\n\r\n                            </>\r\n                        ),\r\n                        ColumnHeader: 'Action',\r\n                    }\r\n                ]}\r\n                tableMaxHeight={700}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (row?.SubMenu?.length > 0 || row?.SubRoutes?.length > 0) && <DisplaySubMenu row={row} />}\r\n            />\r\n\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogTitle>\r\n                    {inputValues.id ? 'Modify ' : 'Add '}\r\n                    {(() => {\r\n                        switch (inputValues.menu_type) {\r\n                            case 0:\r\n                                return 'SUB ROUTING'\r\n                            case 1:\r\n                                return 'MAIN MENU'\r\n                            case 2:\r\n                                return 'SUB MENU'\r\n                            case 3:\r\n                                return 'CHILD MENU'\r\n                            default:\r\n                                return ''\r\n                        }\r\n                    })()}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    saveData();\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            {(isValidObject(inputValues.parantDetails) && inputValues.parantDetails.name) && (\r\n                                <div className=\"col-lg-12 p-2\">\r\n                                    <label>Parant Name </label>\r\n                                    <input\r\n                                        className=\"cus-inpt\"\r\n                                        value={inputValues?.parantDetails?.name}\r\n                                        disabled\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                            <div className=\"col-lg-6 p-2\">\r\n                                <label>Name <RequiredStar /></label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.name}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, name: e.target.value }))}\r\n                                    required\r\n                                    minLength={3}\r\n                                    maxLength={20}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-6 p-2\">\r\n                                <label>Order No</label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.display_order}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, display_order: e.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-12 p-2\">\r\n                                <label>URL (Link)</label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.url}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, url: e.target.value }))}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValues.id && (\r\n                                <div className=\"col-lg-6 p-2\">\r\n                                    <label>Is Active</label>\r\n                                    <select\r\n                                        className=\"cus-inpt\"\r\n                                        value={inputValues.is_active}\r\n                                        onChange={e => setInputValues(pre => ({ ...pre, is_active: e.target.value }))}\r\n                                    >\r\n                                        <option value='' disabled>select</option>\r\n                                        <option value='1'>Active</option>\r\n                                        <option value='0'>In-Active</option>\r\n                                    </select>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            type=\"button\"\r\n                            onClick={closeDialog}\r\n                        >\r\n                            cancel\r\n                        </Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"outlined\"\r\n                        >\r\n                            save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default MenuManagement","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","FilterableTable","_ref","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Boolean","find","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","value","console","log","colSpan","Number","TableActions","anchorEl","setAnchorEl","popOverOpen","_Fragment","Tooltip","event","currentTarget","MoreVert","Popover","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","MenuItem","disabled","ListItemIcon","ToggleOn","color","ToggleOff","ListItemText","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","Download","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","btn","name","icon","onclick","createPopUpMenu","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","RequiredStar","fontWeight","initialValue","id","menu_type","parent_id","url","display_order","is_active","parantDetails","_inputValues$parantDe","loadingOn","loadingOff","inputValues","setInputValues","reload","setReload","menuData","setMenuData","dialog","setDialog","useEffect","fetchLink","address","then","success","catch","DisplaySubRoutings","_dataSource$SubRoutes","dataSource","SubRoutes","_row$SubRoutes$length","_row$SubRoutes","Button","_row$url","startIcon","Add","_ref4","_ref5","_row$name","_row$parent_id","_row$url2","_row$display_order","_row$is_active","Edit","_ref6","_row$SubRoutes2","DisplayChildMenu","_ref7","_row$ChildMenu","_row$ChildMenu2","ChildMenu","_ref8","_row$SubRoutes$length2","_row$SubRoutes3","_row$ParantData","_row$ParantData2","_row$url3","ParantData","_ref9","_ref10","_row$name2","_row$parent_id2","_row$url4","_row$display_order2","_row$is_active2","DisplaySubMenu","_ref11","_row$SubMenu","SubMenu","_ref12","_row$ChildMenu$length","_row$ChildMenu3","_row$ParantData3","_row$ParantData4","_row$url5","_ref13","_row$SubRoutes$length3","_row$SubRoutes4","_row$ParantData5","_row$ParantData6","_row$url6","_ref14","_ref15","_row$name3","_row$parent_id3","_row$url7","_row$display_order3","_row$is_active3","_ref16","_row$ChildMenu4","_row$SubRoutes5","closeDialog","variant","_ref17","_row$SubMenu$length","_row$SubMenu2","_row$url8","_ref18","_row$SubRoutes$length4","_row$SubRoutes6","_row$url9","_ref19","_ref20","_row$name4","_row$parent_id4","_row$url10","_row$display_order4","_row$is_active4","_ref21","_row$SubMenu3","_row$SubRoutes7","Dialog","maxWidth","fullWidth","DialogTitle","onSubmit","preventDefault","method","bodyData","toast","message","finally","DialogContent","isValidObject","onChange","required","minLength","maxLength","DialogActions","createSvgIcon","d","_typeof","Symbol","iterator","constructor","prototype"],"sourceRoot":""}