{"version":3,"file":"static/js/2600.4702f51c.chunk.js","mappings":"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","sources":["Pages/Masters/TaskType.jsx","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js","../node_modules/@mui/material/DialogContentText/DialogContentText.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js","../node_modules/react-bootstrap/esm/Table.js"],"sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { Button } from \"react-bootstrap\";\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Button as MuiButton } from \"@mui/material\";\nimport { Table } from \"react-bootstrap\";\nimport { Delete, Edit } from \"@mui/icons-material\";\nimport { fetchLink } from \"../../Components/fetchComponent\";\n\nconst initialState = {\n    Task_Type: \"\",\n    Task_Type_Id: \"\",\n};\n\nfunction TaskType() {\n    const [TaskTypeData, setTaskTypeData] = useState([]);\n    const [reload, setReload] = useState();\n    const [inputValue, setInputValue] = useState(initialState);\n    const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\n    const [selectedTaskType, setSelectedTaskType] = useState({});\n    const [newChipType, setNewChipType] = useState(\"\");\n    const [openNewDialog, setOpenNewDialog] = useState(false);\n    const [editBase, setEditBase] = useState(false);\n\n    useEffect(() => {\n        fetchLink({\n            address: `masters/taskType`\n        }).then((data) => {\n            if (data.success) {\n                setTaskTypeData(data.data);\n            }\n        }).catch((e) => console.error(e));\n    }, [reload]);\n\n    const handleDelete = () => {\n        fetchLink({\n            address: `masters/taskType`,\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            bodyData: { Task_Type_Id: selectedTaskType.Task_Type_Id },\n        }).then((data) => {\n            if (data.success) {\n                setReload(!reload);\n                setOpenDeleteDialog(false);\n                toast.success(\"Chip deleted successfully!\");\n            } else {\n                setOpenDeleteDialog(false);\n                toast.error(\"Failed to delete chip:\", data.message);\n            }\n        }).catch((e) => console.error(e)).finally(() => setSelectedTaskType({}))\n    };\n\n    const handleDeleteClick = (taskType) => {\n        setSelectedTaskType(taskType);\n        setOpenDeleteDialog(true);\n    };\n\n    const handleCloseDeleteDialog = () => {\n        setOpenDeleteDialog(false);\n    };\n\n    const handleCreateChip = () => {\n        fetchLink({\n            address: `masters/taskType`,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            bodyData: { Task_Type: newChipType },\n        }).then((data) => {\n            if (data.success) {\n                setOpenNewDialog(false);\n                setReload(!reload);\n                toast.success(data.message);\n            } else {\n                setOpenNewDialog(false);\n                toast.error(data.message);\n            }\n        }).catch((e) => console.error(e)).finally(() => setNewChipType(''))\n    };\n\n    const editRow = (group) => {\n        setEditBase(true);\n        setInputValue({\n            Task_Type: group.Task_Type,\n            Task_Type_Id: group.Task_Type_Id,\n        });\n    };\n\n    const editFun = (Task_Type, Task_Type_Id) => {\n        fetchLink({\n            address: `masters/taskType`,\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            bodyData: { Task_Type, Task_Type_Id },\n        }).then((data) => {\n            if (data.success) {\n                toast.success(data.message);\n                setReload(!reload);\n                setEditBase(false);\n            } else {\n                setEditBase(false);\n                toast.error(data.message);\n            }\n        }).catch(e => console.error(e)).finally(() => setInputValue(initialState))\n    };\n\n    return (\n        <Fragment>\n            <div className=\"card\">\n\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\n                    Task Types\n                    <div className=\"text-end\">\n                        <Button className=\"rounded-5 px-3 py-1 fa-13 shadow\" onClick={() => setOpenNewDialog(true)}>\n                            Create Task Type\n                        </Button>\n                    </div>\n                </div>\n\n                <div className=\"card-body overflow-scroll\" style={{ maxHeight: \"78vh\" }}>\n\n                    <div className=\"table-responsive\">\n                        <Table className=\"\">\n                            <thead>\n                                <tr>\n                                    <th className=\"fa-14\">Id No</th>\n                                    <th className=\"fa-14\">Task Type</th>\n                                    <th className=\"fa-14\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {TaskTypeData.map((obj, index) => (\n                                    <tr key={index}>\n                                        <td className=\"fa-14\">{obj.Task_Type_Id}</td>\n                                        <td className=\"fa-14\">{obj.Task_Type}</td>\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\n                                            <IconButton\n                                                onClick={() => {\n                                                    editRow(obj);\n                                                }}\n                                                size=\"small\"\n                                            >\n                                                <Edit className=\"fa-in\" />\n                                            </IconButton>\n                                            <IconButton\n                                                onClick={() => {\n                                                    handleDeleteClick(obj);\n                                                }}\n                                                size=\"small\"\n                                            >\n                                                <Delete className=\"fa-in del-red\" />\n                                            </IconButton>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    </div>\n\n                </div>\n\n            </div>\n\n            <Dialog\n                open={editBase}\n                onClose={() => setEditBase(false)}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">\n                    {\"Task Type\"}\n                </DialogTitle>\n                <DialogContent>\n                    <div className=\"p-2\">\n                        <label>Task Type</label>\n                        <input\n                            type=\"text\"\n                            onChange={(event) => setInputValue({\n                                ...inputValue,\n                                Task_Type: event.target.value\n                            })}\n                            value={inputValue.Task_Type}\n                            className=\"cus-inpt\"\n                        />\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <MuiButton onClick={() => setEditBase(false)}>Cancel</MuiButton>\n                    <MuiButton\n                        onClick={() =>\n                            editFun(inputValue.Task_Type, inputValue.Task_Type_Id)\n                        }\n                        autoFocus\n                        color=\"success\"\n                    >\n                        Update\n                    </MuiButton>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={openNewDialog}\n                onClose={() => setOpenNewDialog(false)}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Create new Task\"}</DialogTitle>\n                <DialogContent>\n                    <div className=\"py-2\">\n                        <label>UserType Name</label>\n                        <input\n                            type=\"text\"\n                            onChange={(event) => setNewChipType(event.target.value)}\n                            value={newChipType}\n                            className=\"cus-inpt\"\n                        />\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <MuiButton onClick={() => setOpenNewDialog(false)}>Cancel</MuiButton>\n                    <MuiButton onClick={() => handleCreateChip()} color=\"success\">\n                        Create\n                    </MuiButton>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={openDeleteDialog}\n                onClose={handleCloseDeleteDialog}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Confirmation\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <b>Do you want to delete the Task Type?</b>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <MuiButton onClick={() => handleCloseDeleteDialog(false)}>\n                        Cancel\n                    </MuiButton>\n                    <MuiButton onClick={() => handleDelete()} autoFocus color=\"error\">\n                        Delete\n                    </MuiButton>\n                </DialogActions>\n            </Dialog>\n\n        </Fragment>\n    );\n}\n\nexport default TaskType;\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDialogContentTextUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogContentText', slot);\n}\nconst dialogContentTextClasses = generateUtilityClasses('MuiDialogContentText', ['root']);\nexport default dialogContentTextClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Typography from '../Typography';\nimport { getDialogContentTextUtilityClass } from './dialogContentTextClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst DialogContentTextRoot = styled(Typography, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiDialogContentText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nconst DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogContentText'\n  });\n  const {\n      className\n    } = props,\n    ownerState = _objectWithoutPropertiesLoose(props, _excluded);\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogContentTextRoot, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"text.secondary\",\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className)\n  }, props, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogContentText;","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;"],"names":["initialState","Task_Type","Task_Type_Id","TaskTypeData","setTaskTypeData","useState","reload","setReload","inputValue","setInputValue","openDeleteDialog","setOpenDeleteDialog","selectedTaskType","setSelectedTaskType","newChipType","setNewChipType","openNewDialog","setOpenNewDialog","editBase","setEditBase","useEffect","fetchLink","address","then","data","success","catch","e","console","error","handleCloseDeleteDialog","_jsxs","Fragment","children","className","_jsx","Button","onClick","style","maxHeight","Table","map","obj","index","minWidth","IconButton","group","size","Edit","Delete","Dialog","open","onClose","DialogTitle","id","DialogContent","type","onChange","event","target","value","DialogActions","MuiButton","editFun","method","headers","bodyData","toast","message","finally","autoFocus","color","DialogContentText","createSvgIcon","d","getDialogContentTextUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","DialogContentTextRoot","styled","Typography","shouldForwardProp","prop","rootShouldForwardProp","name","overridesResolver","props","styles","root","React","inProps","ref","useDefaultProps","ownerState","_objectWithoutPropertiesLoose","classes","composedClasses","composeClasses","_extends","useUtilityClasses","component","variant","clsx","useButtonProps","_ref2","tagName","disabled","href","rel","role","tabIndex","meta","handleClick","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","key","_ref","as","asProp","source","excluded","i","sourceKeys","Object","keys","length","indexOf","buttonProps","Component","assign","displayName","bsPrefix","active","prefix","useBootstrapPrefix","classNames","concat","striped","bordered","borderless","hover","responsive","decoratedBsPrefix","table","responsiveClass"],"sourceRoot":""}