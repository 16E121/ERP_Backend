{"version":3,"file":"static/js/2744.56bf9365.chunk.js","mappings":"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","sources":["Components/requiredStar.jsx","Components/tablecolumn.js","Pages/ProjectList/addEditProject.jsx","Pages/employeeManagement/employeeManagement.jsx","Pages/Tasks/Components/newaddEditTask.jsx","Pages/Tasks/taskAssign/addEditTaskAssign.jsx","Pages/Tasks/taskDetails/taskIndividual.jsx","Pages/Tasks/taskDetails/listingTask.jsx","Pages/Masters/ProjectList.jsx"],"sourcesContent":["const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\nimport SMT_LOGO from './smt.png';\n\nexport const customTableStyles = {\n    table: {\n        style: {\n            width: 'auto',\n            backgroundColor: 'transparent',\n            // borderRadius: '5px',\n        }\n    },\n    rows: {\n        style: {\n            backgroundColor: 'transparent',\n        },\n    },\n    headCells: {\n        style: {\n            backgroundColor: '#6b9080f8',\n            color: 'white',\n            fontSize: '14px',\n            // borderRadius: '5px',\n        },\n    },\n};\n\nexport const customSelectStyles = {\n    control: (provided, state) => ({\n        ...provided,\n        height: '45px',\n        background: 'rgba(255, 255, 255, 0.322)'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n\nexport const customSelectStyles2 = {\n    control: (provided, state) => ({\n        ...provided,\n        background: 'transparent',\n        border: 'none',\n        color: 'rgba(255, 255, 255, 0.322)',\n        // minWidth: '160px'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        color: 'black',\n        zIndex: 9999,\n    }),\n};\n\nexport const MainMenu = [\n    {\n        id: 1,\n        headname: 'Menu ID',\n        variant: 'head',\n        align: 'left',\n        width: 100\n    },\n    {\n        id: 2,\n        headname: 'MenuName',\n    },\n    {\n        id: 3,\n        headname: 'Read Rights'\n    },\n    {\n        id: 4,\n        headname: 'Add Rights'\n    },\n    {\n        id: 5,\n        headname: 'Edit Rights'\n    },\n    {\n        id: 6,\n        headname: 'Delete Rights'\n    },\n    {\n        id: 7,\n        headname: 'Print Rights'\n    },\n    {\n        id: 8,\n        headname: 'Action'\n    }\n];\n\nexport const companyDetails = [\n    {\n        dataBase: 1,\n        name: 'SHANKAR TRADERS',\n        business: 'Wholesale Merchant in Dhall',\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33AADFS6973R1ZD',\n        phone: '984-313-1353, 984-335-5166',\n        fssai: '12418012000818',\n        bankAccount: '0021 5032 0885 122',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 2,\n        name: 'SMT AGRO PRODUCTS',\n        business: '',\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33ACMFS3420Q1ZQ',\n        phone: '0452-4371625',\n        fssai: '12418012000818',\n        bankAccount: '0025 3031 0875 947',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 3,\n        name: 'BHAVANI TRADERS',\n        business: '',\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\n        logo: SMT_LOGO,\n        gstin: '33AAEFB6728J1ZG',\n        phone: '958-559-7641, 958-559-7614',\n        fssai: '12418012000670',\n        bankAccount: '0021 5005 0800 309',\n        ifsc: 'TMBL0000002'\n    },\n]","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport RequiredStar from '../../Components/requiredStar';\r\nimport { ISOString } from '../../Components/functions';\r\n\r\nconst ProjectForm = ({ open, onClose, inputValue, isEdit, setReload }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n\r\n    const [projectHead, setProjectHead] = useState([]);\r\n    const [proStatus, setProStatus] = useState([]);\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        Project_Id: '',\r\n        Project_Name: '',\r\n        Project_Desc: '',\r\n        Project_Head: '',\r\n        Est_Start_Dt: ISOString(),\r\n        Est_End_Dt: ISOString(),\r\n        Project_Status: '',\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            setProjectHead(data.success ? data.data : []);\r\n            \r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, [parseData?.Company_id]);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `taskManagement/statusList`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProStatus(data.data);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n    \r\n            if (isEdit && inputValue) {\r\n                setFormData({\r\n                    ...inputValue,\r\n                    Project_Head: inputValue?.Project_Head_Id, \r\n                    Est_Start_Dt: inputValue.Est_Start_Dt ? ISOString(inputValue.Est_Start_Dt) : '',\r\n                    Est_End_Dt: inputValue.Est_End_Dt ? ISOString(inputValue.Est_End_Dt) : '',\r\n                    Project_Status: inputValue?.Project_Status || '', \r\n                    Project_Desc: inputValue?.Project_Desc || '-'\r\n                });\r\n            } else if (!isEdit) {\r\n           \r\n                setFormData({\r\n                    Project_Name: '',\r\n                    Project_Desc: '',\r\n                    Project_Head: '', \r\n                    Est_Start_Dt: ISOString(),\r\n                    Est_End_Dt: ISOString(),\r\n                    Project_Status: '',\r\n                    Entry_By: parseData?.UserId,\r\n                    Company_id: parseData?.Company_id\r\n                });\r\n            }\r\n        }\r\n    }, [inputValue, open, isEdit]);\r\n    \r\n    \r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const validateFields = () => {\r\n        const requiredFields = [\r\n            'Project_Name',\r\n            'Project_Head',\r\n            'Est_Start_Dt',\r\n            'Est_End_Dt',\r\n            'Project_Status',\r\n        ];\r\n\r\n        for (const field of requiredFields) {\r\n            if (!formData[field]) {\r\n                toast.error(`${field.replace(/_/g, ' ')} is required`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    const createFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        const payload = {\r\n            ...formData,\r\n            Company_id: parseData.Company_id\r\n        };\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'POST',\r\n            bodyData: payload,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => {\r\n            console.error('Fetch Error:', e);\r\n            toast.error(\"An error occurred while creating the project.\");\r\n        });\r\n    };\r\n\r\n    const editFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'PUT',\r\n            bodyData: formData,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        isEdit ? editFun() : createFun();\r\n    };\r\n\r\n    const inputFields = [\r\n        {\r\n            label: 'Project Name',\r\n            elem: 'input',\r\n            type: 'text',\r\n            required: true,\r\n            name: 'Project_Name',\r\n            value: formData.Project_Name || '',\r\n        },\r\n        {\r\n            label: \"Project Head\",\r\n            elem: \"select\",\r\n            options: projectHead.map(obj => ({ value: obj?.UserId, label: obj?.Name })),\r\n            required: true,\r\n            name: 'Project_Head',\r\n            value: formData.Project_Head || '',\r\n        },\r\n        {\r\n            label: 'Estimated Start Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_Start_Dt',\r\n            value: formData.Est_Start_Dt || '',\r\n        },\r\n        {\r\n            label: 'Estimated End Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_End_Dt',\r\n            value: formData.Est_End_Dt || '',\r\n        },\r\n        {\r\n            label: 'Project Status',\r\n            elem: 'select',\r\n            options: proStatus.map(obj => ({ value: obj.Status_Id, label: obj.Status })),\r\n            required: true,\r\n            name: 'Project_Status',\r\n            value: formData.Project_Status || '',\r\n        },\r\n        {\r\n            label: 'Description',\r\n            elem: 'textarea',\r\n            name: 'Project_Desc',\r\n            value: formData.Project_Desc || ' ',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} onClose={onClose}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? \"Edit Project\" : 'Create Project'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"row\">\r\n                            {inputFields.map((field, index) => (\r\n                                <div key={index} className=\"col-lg-4 mb-3\">\r\n                                    <label>{field.label} {field.required && <RequiredStar />}</label>\r\n                                    {field.elem === 'textarea' ? (\r\n                                        <textarea\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    ) : field.elem === 'select' ? (\r\n                                        <select\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            <option value=''>Select</option>\r\n                                            {field.options && field.options.map((option, idx) => (\r\n                                                <option key={idx} value={option.value}>{option.label}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    ) : (\r\n                                        <input\r\n                                            type={field.type}\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <DialogActions>\r\n                            <button\r\n                                className=\"btn btn-light rounded-5 px-3\"\r\n                                type=\"button\"\r\n                                onClick={onClose}>\r\n                                Cancel\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-primary rounded-5 px-3\"\r\n                                type='submit'>\r\n                                {isEdit ? \"Update\" : \"Submit\"}\r\n                            </button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectForm;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Autocomplete,\r\n    TextField,\r\n} from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Box } from '@mui/material';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport Popper from '@mui/material/Popper';\r\n\r\nconst EmployeeManagementDialog = ({ open, onClose, projectId, onReload }) => {\r\n\r\n    const initialValue = {\r\n        Name: '',\r\n        Designation_Name: '',\r\n        BranchName: ''\r\n    }\r\n\r\n    const [employees, setEmployees] = useState(initialValue);\r\n    const [loading, setLoading] = useState(true);\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open && projectId) {\r\n            fetchEmployeeDetails();\r\n            fetchDropdownEmployees();\r\n            fetchAssignedEmployees();\r\n        }\r\n    }, [open, projectId]);\r\n\r\n    const CustomPopper = (props) => {\r\n        return <Popper {...props} placement=\"top\" />;\r\n    };\r\n\r\n    const fetchEmployeeDetails = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employee details\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchAssignedEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setSelectedEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch assigned employees\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddEmployeeOpen = () => {\r\n        setAddEmployeeDialogOpen(true);\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n        onClosed()\r\n        setEmployees(initialValue)\r\n    };\r\n\r\n    const handleAddEmployees = async () => {\r\n        if (Number(contextObj?.Add_Rights) === 1) {\r\n            try {\r\n                const response = await fetchLink({\r\n                    address: 'masters/Employeedetails/employeeAdd',\r\n                    method: 'POST',\r\n                    bodyData: {\r\n                        Project_Id: projectId,\r\n                        UserIds: selectedEmployees.map(emp => emp.UserId),\r\n                    },\r\n                });\r\n\r\n                if (response.success) {\r\n                    toast.success(\"Employees added successfully\");\r\n                    setAddEmployeeDialogOpen(false);\r\n                    await fetchEmployeeDetails();\r\n                    await fetchAssignedEmployees();\r\n                    onReload();\r\n                } else {\r\n                    toast.error(\"Failed to add employees\");\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n                toast.error(\"Error adding employees\");\r\n            }\r\n        }\r\n    };\r\n    const onClosed = () => {\r\n\r\n        onClose()\r\n        setEmployees(initialValue);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" marginTop={2} marginInlineStart={2}>\r\n                    <span>Employee Details</span>\r\n\r\n{/* <Button variant=\"contained\" color=\"primary\"    style={{ marginRight: '18px ' }}   onClick={onClosed}>Close</Button> */}\r\n<DialogActions>\r\n                    <Button \r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAddEmployeeOpen}\r\n                        sx={{ mr: 1 }}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n{/* \r\n                    <button\r\n                        className='btn btn-light'\r\n                        style={{ marginRight: '18px ',color:'#1976d2' }}\r\n                     \r\n                        onClick={onClosed}\r\n                    >\r\n                        Close\r\n                    </button> */}\r\n                </Box>\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <p>Loading...</p>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Employee Name</TableCell>\r\n                                        <TableCell>Position</TableCell>\r\n                                        <TableCell>Department</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {Array.isArray(employees) && employees.length > 0 ? (\r\n                                        employees.map(user => (\r\n                                            <TableRow key={user.EmployeeId || user.UserId}>\r\n                                                <TableCell>{user.Name || 'N/A'}</TableCell>\r\n                                                <TableCell>{user.Designation_Name || '-'}</TableCell>\r\n                                                <TableCell>{user.BranchName || '-'}</TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={3}>No data available</TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onClosed}>Close</Button>\r\n                </DialogActions>\r\n\r\n                </Dialog>\r\n\r\n            <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                // onClose={handleAddEmployeeClose}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                    <Autocomplete\r\n                        multiple\r\n                        options={dropdownEmployees}\r\n                        getOptionLabel={(option) => option.Name}\r\n                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                        onChange={(event, value) => {\r\n                            const uniqueValues = value.filter((val, index, self) =>\r\n                                index === self.findIndex((t) => (\r\n                                    t.UserId === val.UserId\r\n                                ))\r\n                            );\r\n                            setSelectedEmployees(uniqueValues);\r\n                        }}\r\n                        PopperComponent={CustomPopper}\r\n                        value={selectedEmployees}\r\n                        onClose={onclose}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} placeholder=\"Employees\" />\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                    <Button onClick={handleAddEmployees} variant='contained' color=\"primary\">Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EmployeeManagementDialog;\r\n","import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport '../../common.css';\r\nimport { CheckBoxOutlineBlank, CheckBox } from '@mui/icons-material';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Checkbox, TextField, Autocomplete } from '@mui/material';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { isValidObject } from '../../../Components/functions';\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst TaskMasterMgt = ({ row, children, openAction, reload, onCloseFun, loadingOn, loadingOff, onTaskAdded }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    \r\n    const initialValue = {\r\n        Task_Id: \"\",\r\n        Task_Name: \"\",\r\n        Task_Desc: \"\",\r\n        Task_Group_Id: \"\",\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id,\r\n        Entry_Date: \"\",\r\n        Update_By: '',\r\n        Update_Date: \"\",\r\n        Task_Parameters: [],\r\n    };\r\n\r\n    const [dialog, setDialog] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [taskGroup, setTaskGroup] = useState([]);\r\n    const [taskParameters, setTaskParameters] = useState([]);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n    const [editDialog, setEditDialog] = useState(false);\r\n    const [editInputValue, setEditInputValue] = useState(initialValue);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const taskResponse = await fetchLink({ address: `taskManagement/tasks/dropdown` });\r\n                if (taskResponse.success) setTaskData(taskResponse.data);\r\n\r\n                const taskGroupResponse = await fetchLink({ address: `masters/taskType/dropDown` });\r\n                if (taskGroupResponse.success) setTaskGroup(taskGroupResponse.data);\r\n\r\n                const taskParametersResponse = await fetchLink({ address: `taskManagement/parameters` });\r\n                if (taskParametersResponse.success) setTaskParameters(taskParametersResponse.data);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setDialog(openAction);\r\n    }, [openAction]);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(row)) {\r\n            console.log(row)\r\n            setInputValue(prev => ({\r\n                ...prev,\r\n                ...row,\r\n                Task_Group_Id: row.Task_Group_Id || \"\",\r\n            }));\r\n            setIsEdit(true);\r\n        } else {\r\n            setInputValue(initialValue);\r\n            setIsEdit(false);\r\n        }\r\n    }, [row]);\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        if (onCloseFun) onCloseFun();\r\n    };\r\n\r\n    const closeEditDialog = () => {\r\n        setEditDialog(false); \r\n        setEditInputValue(initialValue); \r\n    };\r\n\r\n    const postAndPutTask = async () => {\r\n        const paramArr = inputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...inputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: isEdit ? 'PUT' : 'POST',\r\n                bodyData: PostObj,\r\n            });\r\n             \r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                setInputValue(initialValue)\r\n                closeDialog();\r\n                if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded(); \r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    // const openEditDialog = () => {\r\n    //     setEditInputValue({\r\n    //         ...inputValue,\r\n    //         Task_Group_Id: inputValue.Type_Task_Id, \r\n    //     });\r\n\r\n    //     setEditDialog(true);\r\n    // };\r\n\r\n    const handleEditSubmit = async () => {\r\n        const paramArr = editInputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...editInputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: 'PUT',\r\n                bodyData: PostObj,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                closeEditDialog();\r\n                if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded();\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span onClick={() => setDialog(true)} style={{ cursor: 'pointer' }}>{children}</span>\r\n\r\n            <Dialog open={dialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? 'Edit Task' : 'Add Task'}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    postAndPutTask();\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Name <RequiredStar /></label>\r\n                                <input\r\n                                    maxLength={150}\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Name: e.target.value })}\r\n                                    required\r\n                                    value={inputValue.Task_Name}\r\n                                    placeholder=\"ex: File Checking\"\r\n                                    className=\"cus-inpt\" />\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Group <RequiredStar /></label>\r\n                                <select\r\n                                    value={inputValue.Task_Group_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    required\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Group_Id: e.target.value })}>\r\n                                    <option value=\"\" disabled>- select -</option>\r\n                                    {taskGroup.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Type_Id}>\r\n                                            {o.Task_Type}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Base Task</label>\r\n                                <select\r\n                                    value={inputValue.Under_Task_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Under_Task_Id: e.target.value })}>\r\n                                    <option value={0}>Primary</option>\r\n                                    {taskData.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Id}>\r\n                                            {o.Task_Name}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-12\">\r\n                                <label>Task Description <RequiredStar /></label>\r\n                                <textarea\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValue.Task_Desc}\r\n                                    rows=\"3\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Desc: e.target.value })} />\r\n                            </div>\r\n                            <div className=\"col-md-12 p-2\">\r\n                                <Autocomplete\r\n                                    multiple\r\n                                    id=\"checkboxes-tags-demo\"\r\n                                    options={taskParameters}\r\n                                    disableCloseOnSelect\r\n                                    getOptionLabel={(option) => `${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                    value={inputValue.Task_Parameters || []}\r\n                                    onChange={(event, newValue) => setInputValue({ ...inputValue, Task_Parameters: newValue })}\r\n                                    renderOption={(props, option, { selected }) => (\r\n                                        <li {...props}>\r\n                                            <Checkbox\r\n                                                icon={icon}\r\n                                                checkedIcon={checkedIcon}\r\n                                                style={{ marginRight: 8 }}\r\n                                                checked={selected}\r\n                                            />\r\n                                            {`${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                        </li>\r\n                                    )}\r\n                                    className=\"pt-2\"\r\n                                    isOptionEqualToValue={(opt, val) => Number(opt.Paramet_Id) === Number(val.Paramet_Id)}\r\n                                    renderInput={(params) => (\r\n                                        <TextField {...params} label=\"Task Parameters\" placeholder=\"Choose Task Parameters\" />\r\n                                    )}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValue.Task_Parameters.map((param, index) => (\r\n                                <div key={index} className=\"col-md-4 p-2\">\r\n                                    <label className=\"mb-2\">{param.Paramet_Name}</label>\r\n                                    <input\r\n                                        type={param.Paramet_Data_Type || 'text'}\r\n                                        className=\"cus-inpt\"\r\n                                        onChange={(e) => {\r\n                                            const updatedParams = [...inputValue.Task_Parameters];\r\n                                            updatedParams[index] = {\r\n                                                ...updatedParams[index],\r\n                                                Default_Value: e.target.value,\r\n                                            };\r\n                                            setInputValue({ ...inputValue, Task_Parameters: updatedParams });\r\n                                        }}\r\n                                        value={param.Default_Value}\r\n                                        placeholder=\"Default Value\"\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <button\r\n                            className=\"btn btn-light rounded-5 px-3\"\r\n                            type=\"button\"\r\n                            onClick={closeDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-primary rounded-5 px-3\"\r\n                            type='submit'>\r\n                            Submit\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            {/* Edit Task Dialog */}\r\n            <Dialog open={editDialog} onClose={closeEditDialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Edit Task</DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    handleEditSubmit();\r\n                }}>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            label=\"Task Name\"\r\n                            value={editInputValue.Task_Name}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Name: e.target.value })}\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            label=\"Task Group\"\r\n                            select\r\n                            value={editInputValue.Task_Group_Id}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Group_Id: e.target.value })}\r\n                            fullWidth\r\n                        >\r\n                            <option value=\"\" disabled>- select -</option>\r\n                            {taskGroup.map((o, i) => (\r\n                                <option key={i} value={o.Task_Type_Id}>\r\n                                    {o.Task_Type}\r\n                                </option>\r\n                            ))}\r\n                        </TextField>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button className=\"btn btn-light rounded-5 px-3\" type=\"button\" onClick={closeEditDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button className=\"btn btn-primary rounded-5 px-3\" type='submit'>\r\n                            Save\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskMasterMgt;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\r\n\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst TaskAssign = ({ open, onClose, projectId, taskId, reload, editData }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n \r\n    const [usersDropdown, setUsersDropdown] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    // const [schType, setSchType] = useState([]);\r\n    const [selectedSch, setSelectedSch] = useState([])\r\n    const intitalVlaue={\r\n        AN_No: '',\r\n        Project_Id: projectId,\r\n        Sch_Id: taskId,\r\n        Assigned_Emp_Id: parseData?.UserId,\r\n        Emp_Id: '',\r\n        Task_Assign_dt: new Date().toISOString().split('T')[0],\r\n        Sch_Period: '',\r\n        Sch_Time: '',\r\n        EN_Time: '',\r\n        Est_Start_Dt: '',\r\n        Est_End_Dt: '',\r\n        Ord_By: 1,\r\n        Timer_Based: false,\r\n        Sch_Type: '',\r\n        Invovled_Stat: true,\r\n        EmpGet: '- Select -',\r\n        Is_Repitative: false,\r\n        RepeatDays: { Mon: false, Tue: false, Wed: false, Thu: false, Fri: false, Sat: false, Sun: false }\r\n    }\r\n\r\n    const [assignEmpInpt, setAssignEmpInpt] = useState(intitalVlaue);\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const userResponse =  await fetchLink({ address: `masters/Employeedetails/getusersproject?Project_Id=${projectId}` });\r\n                const schTypeResponse =  await fetchLink({ address: `taskManagement/project/schedule/newscheduleType` });\r\n\r\n\r\n                if (userResponse.success) setUsersDropdown(userResponse.data || []);\r\n                if (schTypeResponse.success) {\r\n                \r\n       }\r\n                \r\n            } catch (error) {\r\n                toast.error(\"Failed to fetch data.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        if (open) fetchData();\r\n    }, [projectId, open, reload]);\r\n\r\n\r\n    useEffect(() => {\r\n \r\n        const fetchSelectedData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                if (editData) {\r\n                    const selectedSchType =  await fetchLink({ address: `masters/employeedetails/selectedTaskDetails?projectId=${projectId}&Sch_Id=${taskId.Sch_Id}&Task_Id=${taskId.Task_Id}` });\r\n\r\n                    const selectedSchId = selectedSchType.data[0]?.Sch_Type_Id;\r\n                    const selectedSchName = selectedSchType.data[0]?.Sch_Name;\r\n\r\n                    if (selectedSchId && selectedSchName) {\r\n                        setSelectedSch({ value: selectedSchId, label: selectedSchName });\r\n                    } else {\r\n                        setSelectedSch({ value: '', label: '' });\r\n                    }\r\n\r\n\r\n                } else {\r\n                    const selectedSchType = await fetchLink({ address: `masters/employeedetails/selectedTaskDetails?projectId=${projectId}&Sch_Id=${taskId.TaskSchId}&Task_Id=${taskId.Task_Id}` });\r\n\r\n\r\n                    const selectedSchId = selectedSchType.data[0]?.Sch_Type_Id;\r\n                    const selectedSchName = selectedSchType.data[0]?.Sch_Name;\r\n\r\n                    if (selectedSchId && selectedSchName) {\r\n                        setSelectedSch({ value: selectedSchId, label: selectedSchName });\r\n                    } else {\r\n                        setSelectedSch({ value: '', label: '' });\r\n                    }\r\n\r\n                }\r\n            } catch (error) {\r\n\r\n                toast.error(\"Failed to fetch data.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n\r\n        };\r\n\r\n        if (open) fetchSelectedData();\r\n    }, [open, editData, reload,projectId]);\r\n\r\n    useEffect(() => {\r\n        if (editData) {\r\n\r\n            setAssignEmpInpt(prev => ({\r\n                ...prev,\r\n                AN_No: editData.AN_No,\r\n                Emp_Id: editData.Emp_Id,\r\n                Sch_Time: editData.Sch_Time,\r\n                EN_Time: editData.EN_Time,\r\n                Est_Start_Dt: editData.Est_Start_Dt.split('T')[0],\r\n                Est_End_Dt: editData.Est_End_Dt.split('T')[0],\r\n                Ord_By: editData.Ord_By,\r\n                Timer_Based: editData.Timer_Based,\r\n                Invovled_Stat: editData.Invovled_Stat,\r\n                Sch_Type_Id: editData.Sch_Type,\r\n                Sch_Type: editData.Sch_Type_Name,\r\n                EmpGet: editData.EmployeeName,\r\n                Is_Repitative: editData.Is_Repitative,\r\n                RepeatDays: {\r\n                    Mon: !!editData.IS_Rep_Monday,\r\n                    Tue: !!editData.IS_Rep_Tuesday,\r\n                    Wed: !!editData.IS_Rep_Wednesday,\r\n                    Thu: !!editData.IS_Rep_Thursday,\r\n                    Fri: !!editData.Is_Rep_Friday,\r\n                    Sat: !!editData.Is_Rep_Saturday,\r\n                    Sun: !!editData.Is_Rep_Sunday,\r\n                },\r\n            }));\r\n        }\r\n    }, [editData]);\r\n\r\n\r\n\r\n    const calculateSchPeriod = () => {\r\n        const [hours1, minutes1] = assignEmpInpt.Sch_Time.split(':').map(Number);\r\n        const [hours2, minutes2] = assignEmpInpt.EN_Time.split(':').map(Number);\r\n\r\n        const date1 = new Date(0, 0, 0, hours1, minutes1);\r\n        const date2 = new Date(0, 0, 0, hours2, minutes2);\r\n\r\n        if (date2 > date1) {\r\n            let difference = Math.abs(date2 - date1);\r\n            const hours = Math.floor(difference / (1000 * 60 * 60));\r\n            const minutes = Math.floor(difference / (1000 * 60));\r\n            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\r\n        }\r\n        return '';\r\n    };\r\n\r\n\r\n    const mapRepeatDaysToISRepFields = () => {\r\n        return {\r\n            IS_Rep_Monday: assignEmpInpt.RepeatDays.Mon ? 1 : null,\r\n            IS_Rep_Tuesday: assignEmpInpt.RepeatDays.Tue ? 1 : null,\r\n            IS_Rep_Wednesday: assignEmpInpt.RepeatDays.Wed ? 1 : null,\r\n            IS_Rep_Thursday: assignEmpInpt.RepeatDays.Thu ? 1 : null,\r\n            Is_Rep_Friday: assignEmpInpt.RepeatDays.Fri ? 1 : null,\r\n            Is_Rep_Saturday: assignEmpInpt.RepeatDays.Sat ? 1 : null,\r\n            Is_Rep_Sunday: assignEmpInpt.RepeatDays.Sun ? 1 : null,\r\n        };\r\n    };\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const schPeriod = calculateSchPeriod();\r\n\r\n        if (assignEmpInpt.Est_End_Dt < assignEmpInpt.Est_Start_Dt) {\r\n            toast.error(\"End date must be greater than start date.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n\r\n            const address = editData ? 'masters/employeedetails/updateTask' : 'masters/employeedetails/assignTask';\r\n            const repeatDaysMapped = mapRepeatDaysToISRepFields();\r\n            const response = await fetchLink({\r\n                address,\r\n                method: editData ? 'PUT' : 'POST',\r\n                bodyData: {\r\n                    ...assignEmpInpt,\r\n                    Project_Id: projectId,\r\n                    Sch_Id: editData ? taskId.Sch_Id : taskId.TaskSchId,\r\n                    Task_Levl_Id: taskId.Task_Levl_Id,\r\n                    Task_Id: Number(taskId.Task_Id),\r\n                    Assigned_Emp_Id: assignEmpInpt.Assigned_Emp_Id,\r\n                    Emp_Id: assignEmpInpt.Emp_Id,\r\n                    Sch_Period: schPeriod,\r\n                    Sch_Time: assignEmpInpt.Sch_Time,\r\n                    EN_Time: assignEmpInpt.EN_Time,\r\n                    Est_Start_Dt: assignEmpInpt.Est_Start_Dt,\r\n                    Est_End_Dt: assignEmpInpt.Est_End_Dt,\r\n                    Ord_By: assignEmpInpt.Ord_By,\r\n                    Sch_Type: selectedSch.value,\r\n                    Timer_Based: assignEmpInpt.Timer_Based ? 1 : 0,\r\n                    Invovled_Stat: assignEmpInpt.Invovled_Stat ? 1 : 0,\r\n                    Is_Repitative: assignEmpInpt.Is_Repitative ? 1 : 0,\r\n                    RepeatDays: assignEmpInpt.Is_Repitative ? assignEmpInpt.RepeatDays : '',\r\n                    ...repeatDaysMapped,\r\n                }\r\n\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(`Task ${editData ? 'updated' : 'assigned'} successfully!`);\r\n                setAssignEmpInpt({});\r\n\r\n                onClose();\r\n        \r\n\r\n            } else {\r\n\r\n                toast.error(\"Please fill the values correctly\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Error during task assignment/update: \" + error.message);\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <Dialog open={open} maxWidth=\"sm\">\r\n                <DialogTitle>{editData ? 'Edit Task' : 'Employee Assign'}</DialogTitle>\r\n                <form onSubmit={handleSubmit}>\r\n                    <DialogContent className=\"table-responsive\">\r\n                           {loading && <div>Loading...</div>}\r\n                        <table className=\"table\" style={{ tableLayout: 'fixed' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Employee\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <Select\r\n                                            value={{ value: assignEmpInpt.Emp_Id, label: assignEmpInpt.EmpGet }}\r\n                                            onChange={(e) => setAssignEmpInpt({ ...assignEmpInpt, Emp_Id: e.value, EmpGet: e.label })}\r\n                                            options={[{ value: '', label: '- Select -' }, ...usersDropdown.map(obj => ({ value: obj.UserId, label: obj.Name }))]}\r\n                                            styles={customSelectStyles}\r\n                                            required\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Select User\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Sch_Type\r\n                                    </td>\r\n                                    \r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <Select\r\n                                            value={selectedSch ? { value: selectedSch.value, label: `${selectedSch.label}` } : null}\r\n                                            styles={{ padding: '0.5em' }}\r\n                                            isDisabled\r\n                                            placeholder=\"Select Sch_Type\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n\r\n                                {/* Time and Date Inputs */}\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Start Time\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Sch_Time}\r\n                                            required\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Sch_Time: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        End Time\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.EN_Time}\r\n                                            required\r\n                                            min={assignEmpInpt.Sch_Time}\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, EN_Time: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Est. Start Date\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Est_Start_Dt}\r\n                                            required\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_Start_Dt: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Est. End Date\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Est_End_Dt}\r\n                                            required\r\n                                            min={assignEmpInpt.Est_Start_Dt}\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_End_Dt: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* Timer Based & Involved Status */}\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15 text-start\" style={{ paddingRight: '1em' }}>\r\n                                        <div style={{ display: 'inline-flex', marginRight: '1em' }}>\r\n                                            <input\r\n                                                className=\"form-check-input shadow-none\"\r\n                                                type=\"checkbox\"\r\n                                                id=\"timerbased\"\r\n                                                checked={Boolean(Number(assignEmpInpt?.Timer_Based))}\r\n                                                onChange={(e) =>\r\n                                                    setAssignEmpInpt({ ...assignEmpInpt, Timer_Based: e.target.checked })\r\n                                                }\r\n                                                style={{ marginRight: '0.5em' }}\r\n                                            />\r\n                                            <label className=\"form-check-label p-1 ps-2\" htmlFor=\"timerbased\">\r\n                                                Timer Based Task?\r\n                                            </label>\r\n                                        </div>\r\n\r\n                                        {editData && (\r\n                                            <div style={{ display: 'inline-flex', marginRight: '1em' }}>\r\n                                                <input\r\n                                                    className=\"form-check-input shadow-none\"\r\n                                                    type=\"checkbox\"\r\n                                                    checked={Boolean(Number(assignEmpInpt?.Invovled_Stat))}\r\n                                                    onChange={() =>\r\n                                                        setAssignEmpInpt({ ...assignEmpInpt, Invovled_Stat: !assignEmpInpt.Invovled_Stat })\r\n                                                    }\r\n                                                    style={{ marginRight: '0.5em' }}\r\n                                                />\r\n                                                <label className=\"form-check-label p-1 ps-2\">Involved Status</label>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingRight: '1em' }}>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                            <div style={{ display: 'flex', alignItems: 'center', marginRight: '1em' }}>\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={assignEmpInpt.Is_Repitative === 1}\r\n                                                    onChange={(e) => {\r\n                                                        setAssignEmpInpt((prevState) => ({\r\n                                                            ...prevState,\r\n                                                            Is_Repitative: e.target.checked ? 1 : 0,\r\n                                                        }));\r\n                                                    }}\r\n                                                    style={{ marginRight: '1em' }}\r\n                                                />\r\n                                                <label style={{ marginBottom: '0' }}>Is Repetitive?</label>\r\n                                            </div>\r\n                                            {assignEmpInpt.Is_Repitative === 1 && (\r\n                                                <div style={{ display: 'inline-flex', gap: '0.5em' }}>\r\n                                                    {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\r\n                                                        <label\r\n                                                            key={day}\r\n                                                            style={{\r\n                                                                display: 'flex',\r\n                                                                alignItems: 'center',\r\n                                                                marginRight: '1em',\r\n                                                                width: '30px',\r\n                                                            }}\r\n                                                        >\r\n                                                            <input\r\n                                                                type=\"checkbox\"\r\n                                                                checked={assignEmpInpt.RepeatDays[day]}\r\n                                                                onChange={() =>\r\n                                                                    setAssignEmpInpt({\r\n                                                                        ...assignEmpInpt,\r\n                                                                        RepeatDays: {\r\n                                                                            ...assignEmpInpt.RepeatDays,\r\n                                                                            [day]: !assignEmpInpt.RepeatDays[day],\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                                style={{ marginRight: '0.5em' }}\r\n                                                            />\r\n                                                            {day}\r\n                                                        </label>\r\n                                                    ))}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            onClick={() => {\r\n                                onClose();\r\n                                setAssignEmpInpt(intitalVlaue);\r\n                            }}\r\n                            variant=\"outlined\"\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"contained\">\r\n                            Save Changes\r\n                        </Button>\r\n\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskAssign;\r\n","import React, { useState, useEffect,useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    Table,\r\n    TableBody,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    IconButton,\r\n    CircularProgress,\r\n    Button\r\n} from '@mui/material';\r\nimport { CalendarMonth, QueryBuilder, Edit } from \"@mui/icons-material\";\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\nimport { MyContext } from '../../../Components/context/contextProvider';\r\nfunction TaskIndividual({ open, onClose, taskDetails, closeDialogTask }) {\r\n    const [selectedTask, setSelectedTask] = useState(null);\r\n    const [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            setSelectedTask(null);\r\n            setLoading(true); \r\n\r\n    \r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 500);\r\n        }\r\n    }, [open]);\r\n\r\n    const handleEditClick = (task) => {\r\n        setSelectedTask(task);\r\n        setAssignDialogOpen(true);\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        if (!dateString) return 'N/A';\r\n\r\n        const date = new Date(dateString);\r\n        if (isNaN(date.getTime())) {\r\n            return 'Invalid Date';\r\n        }\r\n\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const year = date.getFullYear();\r\n\r\n        return `${day}-${month}-${year}`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"lg\">\r\n                <DialogTitle>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <span>Details</span>\r\n                        <Button variant=\"contained\" color=\"primary\"  onClick={onClose}>Close</Button>\r\n                    </div>\r\n                </DialogTitle>\r\n\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '300px', width: '500px' }}>\r\n                            <CircularProgress /> \r\n                        </div>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"fa-14 text-center\">Employee</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Assigned By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Date</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Time</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Total Hours</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Timer Based</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Involved Status</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Order By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>\r\n                                    {taskDetails.length === 0 ? (\r\n                                       \r\n                                        <TableRow>\r\n                                            <TableCell colSpan={9} className=\"fa-14 text-center\" style={{ textAlign: 'center' }}>\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ) : (\r\n                                     \r\n                                        taskDetails.map((detail, index) => (\r\n                                            <TableRow key={index}>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.EmployeeName || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.AssignedUser || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <CalendarMonth className=\"fa-18 me-2\" />\r\n                                                        {formatDate(detail.Est_Start_Dt)} - {formatDate(detail.Est_End_Dt)}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <QueryBuilder className=\"fa-18 me-2\" />\r\n                                                        {detail.Sch_Time || 'N/A'} - {detail.EN_Time || 'N/A'}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Sch_Period || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Timer_Based) ? 'bg-success' : 'bg-warning'}`}>\r\n                                                        {Number(detail.Timer_Based) ? \"Yes\" : \"No\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Invovled_Stat) ? 'bg-success' : 'bg-danger'}`}>\r\n                                                        {Number(detail.Invovled_Stat) ? \"IN\" : \"OUT\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Ord_By || 'N/A'}</TableCell>\r\n                                                {Number(contextObj?.Edit_Rights) === 1 && (\r\n                                                <TableCell className=\"fa-13 text-center\">\r\n                                                    \r\n                                                    <IconButton size=\"small\" onClick={() => handleEditClick(detail)}>\r\n                                                        <Edit className=\"fa-18\" />\r\n                                                        Edit\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                                )}\r\n                                            </TableRow>\r\n                                        ))\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n            {assignDialogOpen &&\r\n                <TaskAssign\r\n                    open={assignDialogOpen}\r\n                    projectId={selectedTask?.Project_Id}\r\n                    taskId={selectedTask}\r\n                    editData={selectedTask}\r\n                    onClose={() => {\r\n                        setAssignDialogOpen(false);\r\n                        onClose();\r\n                    }}\r\n                />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskIndividual;\r\n","import React, { useState, useCallback, useEffect, useContext } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Tab,\r\n  Table,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Chip,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Typography,\r\n  Box\r\n} from '@mui/material';\r\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\r\nimport ViewHeadlineSharpIcon from '@mui/icons-material/ViewHeadlineSharp';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Edit } from \"@mui/icons-material\";\r\n\r\nimport TaskMasterMgt from '../Components/newaddEditTask';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\n\r\nimport TaskIndividual from './taskIndividual';\r\nimport { TabContext, TabList, TabPanel } from '@mui/lab';\r\nimport { MyContext } from \"../../../Components/context/contextProvider\";\r\nfunction ListingTask({ dialogOpen, setDialogOpen, projectid, reload, onReload, selectedProject }) {\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n  const [taskAssignOpen, setTaskAssignOpen] = useState(false);\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [taskDetails, setTaskDetails] = useState([]);\r\n  const [taskDetailDialog, setTaskDetailsDialog] = useState(false);\r\n  const [taskScheduleInput, setTaskScheduleInput] = useState({});\r\n  const [taskData, setTaskData] = useState([]);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const userData = JSON.parse(localStorage.getItem('user'));\r\n  const entryBy = userData?.UserId;\r\n  const companyId = userData?.Company_id;\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  const [expandedAccordion, setExpandedAccordion] = useState(null);\r\n  // const [expandedAccordionSubTask, setExpandedAccordionSubTask] = useState(null);\r\n  // const [scheduleTypes, setScheduleTypes] = useState([]);\r\n  // const [selectedTab, setSelectedTab] = useState(0);\r\n  const [expandedAccordionTask, setExpandedAccordionTask] = useState(null);\r\n\r\n  const { contextObj } = useContext(MyContext);\r\n\r\n  const [isEdit, setIsedit] = useState(false)\r\n  const [updateDialogOpen, setUpdateDialogOpen] = useState(false)\r\n\r\n  // const [expandedItem, setExpandedItem] = useState({ schTypeId: null, taskId: null });\r\n\r\n\r\n\r\n  const [selectedTab, setSelectedTab] = useState('1');\r\n  const [scheduleTypes, setScheduleTypes] = useState([]);\r\n\r\n\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setSelectedTab(newValue);\r\n  };\r\n\r\n\r\n  const handleAccordionChange = (taskId) => {\r\n    setExpandedAccordion((prev) => (prev === taskId ? null : taskId));\r\n  };\r\n\r\n  const handleAccordionChangeTask = (taskId) => {\r\n    setExpandedAccordionTask((prev) => (prev === taskId ? null : taskId));\r\n  };\r\n\r\n  const handleSelectedTask = async (task) => {\r\n    setSelectedTask(task);\r\n    setTaskAssignOpen(true);\r\n  }\r\n\r\n  const Schtype = async () => {\r\n    fetchLink({ address: `taskManagement/project/schedule/newscheduleType` }).then((data) => {\r\n      if (data.success) {\r\n        setScheduleTypes(data.data);\r\n\r\n      } else {\r\n        toast.error(data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  const fetchTasks = useCallback(async () => {\r\n    try {\r\n      const data = await fetchLink({ address: `taskManagement/tasks/dropdown?Company_id=${companyId}` });\r\n      if (data.success) {\r\n        setTasks(data.data);\r\n      } else {\r\n        toast.error(data.message);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }, [companyId]);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      const data = await fetchLink({\r\n        address: `taskManagement/project/schedule/ListingDetails?Project_Id=${projectid}`\r\n      });\r\n      if (data.success) {\r\n        setTaskData(data.data);\r\n      } else {\r\n        console.error('Failed to fetch task details:', data.message);\r\n      }\r\n    } catch (e) {\r\n      console.error('Error fetching task details:', e);\r\n    }\r\n  }, [projectid]);\r\n\r\n  useEffect(() => {\r\n    fetchTasks();\r\n    fetchData();\r\n    Schtype();\r\n  }, [reload, projectid, onReload, fetchTasks, fetchData]);\r\n\r\n\r\n\r\n  const taskOptions = tasks.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }));\r\n  const handleviewTaskDetail = async (task) => {\r\n    setTaskDetailsDialog(true);\r\n\r\n    if (!task.Task_Id || !projectid) {\r\n      toast.error('Task ID and Project ID are required');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = await fetchLink({\r\n        address: `masters/employeedetails/assignedTaskDetails?Task_Id=${task.Task_Id}&ProjectId=${projectid}&LevelId=${task.Task_Levl_Id}`\r\n      });\r\n\r\n      if (data.success) {\r\n        setTaskDetails(data.data);\r\n      } else {\r\n        console.error(data.message);\r\n      }\r\n    } catch (e) {\r\n      console.error('Error fetching task details:', e);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleAssignTask = async () => {\r\n    if (!taskScheduleInput.Task_Id || !taskScheduleInput.Sch_Type_Id) {\r\n      toast.error(\"Please select a task and schedule type before saving.\");\r\n      return;\r\n    }\r\n\r\n    const requestData = {\r\n      entryBy: entryBy,\r\n      Project_Id: projectid,\r\n      Sch_Type_Id: taskScheduleInput.Sch_Type_Id,\r\n      Sch_Est_Start_Date: taskScheduleInput.Task_Est_Start_Date,\r\n      Sch_Est_End_Date: taskScheduleInput.Task_Est_End_Date,\r\n      tasks: [taskScheduleInput]\r\n    };\r\n\r\n    try {\r\n      const response = await fetchLink({\r\n        address: 'taskManagement/project/schedule/createNewTaskWithSchedule',\r\n        method: 'POST',\r\n        bodyData: requestData,\r\n      });\r\n\r\n      if (response.success) {\r\n        toast.success(response.message);\r\n        setAssignDialogOpen(false);\r\n        setTaskScheduleInput({})\r\n        fetchData();\r\n        onReload();\r\n      }\r\n      else if (response.status === 'warning') {\r\n        toast.warn(response.message || \"Task already exists for this project.\");\r\n      }\r\n      else {\r\n\r\n        toast.warn(response.message || \"Task already exists for this project.\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(error);\r\n    }\r\n  };\r\n\r\n  const handleEditTask = (task) => {\r\n    setSelectedTask(task);\r\n    setEditDialogOpen(true);\r\n  };\r\n\r\n\r\n  const updatesTaskDetails = async (task) => {\r\n\r\n    const requestData = {\r\n      Sch_Project_Id: task.Sch_Project_Id,\r\n      Sch_Id: task.TaskSchId,\r\n      schtypeid: taskScheduleInput.Sch_Type_Id,\r\n      Task_Id: task.Task_Id\r\n\r\n\r\n    };\r\n\r\n    try {\r\n      const response = await fetchLink({\r\n        address: 'taskManagement/project/schedule/updateScheduleTaskUpdate',\r\n        method: 'PUT',\r\n        bodyData: requestData,\r\n      });\r\n\r\n      if (response.success) {\r\n        toast.success(response.message);\r\n\r\n        setUpdateDialogOpen(false)\r\n        setIsedit(false)\r\n        onReload();\r\n      }\r\n      else if (response.status === 'warning') {\r\n        toast.warn(response.message || \"Task already exists for this project.\");\r\n      }\r\n      else {\r\n\r\n        toast.warn(response.message || \"Task already exists for this project.\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const handleTaskEdit = (task) => {\r\n    setIsedit(true);\r\n    setTaskScheduleInput(task);\r\n    setUpdateDialogOpen(true);\r\n  };\r\n\r\n  const handleTaskChange = async (selectedOption) => {\r\n    setTaskScheduleInput(prev => ({\r\n      ...prev,\r\n      Task_Id: selectedOption.value,\r\n      TasksGet: selectedOption.label\r\n    }));\r\n\r\n    try {\r\n      const response = await fetchLink({\r\n        address: `taskManagement/tasks/tasklistsid?Task_Id=${selectedOption.value}`\r\n      });\r\n      if (response.success) {\r\n        const taskDetails = response.data;\r\n        setTaskScheduleInput(prev => ({\r\n          ...prev,\r\n          Task_Levl_Id: taskDetails.Task_Levl_Id,\r\n          Task_Name: taskDetails.Task_Name,\r\n          Task_Desc: taskDetails.Task_Desc,\r\n          Task_Group_Id: taskDetails.Task_Group_Id,\r\n\r\n          Sch_Type_Id: taskDetails.Sch_Type_Id,\r\n          Task_Sch_Duaration: taskDetails.Task_Sch_Duaration || '',\r\n          Task_Start_Time: taskDetails.Task_Start_Time || new Date().toISOString(),\r\n          Task_End_Time: taskDetails.Task_End_Time || new Date().toISOString(),\r\n          Task_Est_Start_Date: taskDetails.Task_Est_Start_Date || new Date().toISOString(),\r\n          Task_Est_End_Date: taskDetails.Task_Est_End_Date || new Date().toISOString(),\r\n        }));\r\n      } else {\r\n        toast.error(\"Failed to fetch task details\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(error);\r\n    }\r\n  };\r\n\r\n  const setCloseTask = async () => {\r\n    setDialogOpen(false);\r\n    setTaskScheduleInput({});\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  const handleSchTypeChange = (e) => {\r\n    const selectedOption = scheduleTypes.find(option => option.Sch_Type_Id === parseInt(e.target.value));\r\n    if (selectedOption) {\r\n      setTaskScheduleInput({\r\n        ...taskScheduleInput,\r\n        Sch_Type_Id: selectedOption.Sch_Type_Id,\r\n        Sch_Type: selectedOption.Sch_Type,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n\r\n      {updateDialogOpen && (\r\n        <Dialog\r\n          open={updateDialogOpen}\r\n          fullWidth\r\n          maxWidth=\"sm\"\r\n          PaperProps={{ style: { borderRadius: '8px' } }}\r\n          onClose={() => setUpdateDialogOpen(false)}\r\n        >\r\n          <DialogTitle>{isEdit ? \"Edit Task\" : \"Assign Task\"}</DialogTitle>\r\n          <DialogContent>\r\n            <div style={{ padding: '1px', display: 'flex' }}>\r\n              <div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n                <label style={{ marginRight: '8px' }}>Sch_Type</label>\r\n                <select\r\n                  value={taskScheduleInput.Sch_Type_Id === 0 || ''}\r\n                  onChange={handleSchTypeChange}\r\n                  className=\"cus-inpt\"\r\n                  required\r\n                  style={{ marginLeft: '10px' }}\r\n                >\r\n                  <option value=\"\" disabled>- Sch_Type -</option>\r\n                  {scheduleTypes.map((option, index) => (\r\n                    <option key={index} value={option.Sch_Type_Id}>\r\n                      {option.Sch_Type}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setUpdateDialogOpen(false)}>Cancel</Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => updatesTaskDetails(taskScheduleInput)}\r\n            >\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n\r\n\r\n      <Dialog open={dialogOpen} fullWidth maxWidth=\"lg\" PaperProps={{ style: { height: '75vh' } }}>\r\n        <DialogTitle>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>{selectedProject?.Project_Name}</span>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setAssignDialogOpen(true)}>Assign Task</Button>\r\n          </div>\r\n        </DialogTitle>\r\n\r\n        <Box sx={{ width: '100%', typography: 'body1' }}>\r\n          {taskData.map((schedule, index) => {\r\n            const scheduleTypes = JSON.parse(schedule.SchTypes);\r\n            // const overallSchTypes = JSON.parse(schedule.OverallSchTypes)\r\n\r\n\r\n            return (\r\n              <TabContext value={selectedTab} key={index}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                  <TabList onChange={handleTabChange} aria-label=\"Schedule Types\">\r\n                    {/* <Tab label=\"Overall\" value=\"overall\" id=\"tab-overall\" aria-controls=\"tabpanel-overall\" /> */}\r\n                    {Array.isArray(scheduleTypes) && scheduleTypes.length > 0 ? (\r\n                      scheduleTypes.map((sch, index) => (\r\n                        <Tab\r\n                          key={`${sch.SchTypeId || 'index'}-${index}`}\r\n                          label={sch.SchType || 'No SchType'}\r\n                          value={(sch.SchTypeId || index).toString()}\r\n                          id={`tab-${sch.SchTypeId || index}`}\r\n                          aria-controls={`tabpanel-${sch.SchTypeId || index}`}\r\n                        />\r\n                      ))\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"textSecondary\" sx={{ padding: 2 }}>\r\n                        No Details Available for {scheduleTypes}\r\n                      </Typography>\r\n                    )}\r\n                  </TabList>\r\n                </Box>\r\n\r\n\r\n\r\n\r\n                {Array.isArray(scheduleTypes) && scheduleTypes.map((sch, index) => (\r\n                  <TabPanel\r\n                    key={`${sch.SchTypeId || 'index'}-${index}`}\r\n                    value={(sch.SchTypeId || index).toString()}\r\n                    id={`tabpanel-${sch.SchTypeId || index}`}\r\n                    aria-labelledby={`tab-${sch.SchTypeId || index}`}\r\n                  >\r\n                    <Box sx={{ marginBottom: 2, padding: 2, backgroundColor: '#f9f9f9', borderRadius: '8px' }}>\r\n                      {Array.isArray(sch.TaskCountsInSchType) && sch.TaskCountsInSchType.length > 0 ? (\r\n                        sch.TaskCountsInSchType.map((count, index) => (\r\n                          <Typography key={index} variant=\"body1\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Box>\r\n                              Schedule Type: <strong>{sch.SchType}</strong>\r\n                            </Box>\r\n                            <Box textAlign=\"right\">\r\n                              Total Tasks: <strong>{count.TotalTasks}</strong> / Completed Tasks: <strong>{count.CompletedTasks}</strong>\r\n                            </Box>\r\n                          </Typography>\r\n                        ))\r\n                      ) : (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          No tasks counted for this schedule type.\r\n                        </Typography>\r\n                      )}\r\n                    </Box>\r\n\r\n                    {Array.isArray(sch.TaskTypeGroups) && sch.TaskTypeGroups.length > 0 ? (\r\n                      sch.TaskTypeGroups.map((taskType) => (\r\n                        <Accordion\r\n                          key={taskType.Task_Type_Id}\r\n                          expanded={expandedAccordion === taskType.Task_Type_Id}\r\n                          onChange={() => handleAccordionChange(taskType.Task_Type_Id)}\r\n                          sx={{\r\n                            backgroundColor: '#f0f4ff',\r\n                            boxShadow: 'black',\r\n                          }}\r\n                        >\r\n                          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography fontWeight=\"bold\">\r\n                              {taskType.Task_Type || 'Default Task Type'}\r\n                            </Typography>\r\n                            <Box sx={{ textAlign: 'right', flexGrow: 1 }}>\r\n                              <Typography variant=\"h6\">\r\n                                <Typography fontWeight=\"bold\">\r\n                                  Completed Task / Total Task\r\n                                </Typography>\r\n                                {Array.isArray(taskType.TaskMetrics) && taskType.TaskMetrics.length > 0 ? (\r\n                                  taskType.TaskMetrics.map((tasks, index) => (\r\n                                    <Typography sx={{ textAlign: 'right', flexGrow: 1 }} key={index}>\r\n                                      {tasks.CompletedTasks} / {tasks?.TotalTasks}\r\n                                    </Typography>\r\n                                  ))\r\n                                ) : (\r\n                                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                    No task metrics available for this task type.\r\n                                  </Typography>\r\n                                )}\r\n                              </Typography>\r\n                            </Box>\r\n                          </AccordionSummary>\r\n                          <AccordionDetails>\r\n                            {Array.isArray(taskType.Tasks) && taskType.Tasks.length > 0 ? (\r\n                              taskType.Tasks.map((taskItem) => (\r\n                                <Accordion\r\n                                  key={taskItem.Task_Id}\r\n                                  expanded={expandedAccordionTask === taskItem.Task_Id}\r\n                                  onChange={() => handleAccordionChangeTask(taskItem.Task_Id)}\r\n                                  sx={{\r\n                                    marginBottom: 2,\r\n                                  }}\r\n                                >\r\n                                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                    <Box sx={{ textAlign: 'left', flexGrow: 1 }}>\r\n                                      <Typography fontWeight=\"bold\">\r\n                                        {taskItem?.Task_Name || 'DEFAULT TASK'}\r\n                                      </Typography>\r\n                                    </Box>\r\n                                  </AccordionSummary>\r\n                                  <AccordionDetails>\r\n                                    <TableContainer style={{ maxHeight: '50vh' }}>\r\n                                      <Table stickyHeader>\r\n                                        <TableHead style={{ backgroundColor: '#2C3E50' }}>\r\n                                          <TableRow style={{ backgroundColor: '#2C3E50' }}>\r\n                                            <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task</TableCell>\r\n                                            <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task Type</TableCell>\r\n                                            <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Employees</TableCell>\r\n                                            <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Employee Assign</TableCell>\r\n                                            <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Actions</TableCell>\r\n                                            <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Details</TableCell>\r\n                                          </TableRow>\r\n                                        </TableHead>\r\n\r\n                                        <TableRow key={taskItem.Task_Id} sx={{ backgroundColor: '#BBE6F6' }}>\r\n                                          <TableCell>{taskItem.Task_Name}</TableCell>\r\n                                          <TableCell>\r\n                                            {sch.SchType}\r\n                                            <IconButton onClick={() => handleTaskEdit(taskItem)}>\r\n                                              <Edit />\r\n                                            </IconButton>\r\n                                          </TableCell>\r\n\r\n                                          <TableCell>\r\n                                            {Array.isArray(taskItem.AssignedEmployees) && taskItem.AssignedEmployees.length > 0 ? (\r\n                                              taskItem.AssignedEmployees.map((employee, empIndex) => (\r\n                                                <Chip\r\n                                                  key={empIndex}\r\n                                                  label={employee.Name}\r\n                                                  variant=\"outlined\"\r\n                                                  size=\"small\"\r\n                                                  sx={{ margin: '2px', color: 'green' }}\r\n                                                />\r\n                                              ))\r\n                                            ) : (\r\n                                              <span>No Employees Assigned</span>\r\n                                            )}\r\n                                          </TableCell>\r\n                                          <TableCell>\r\n                                            <IconButton onClick={() => handleSelectedTask(taskItem)}>\r\n                                              <LibraryAddIcon />\r\n                                            </IconButton>\r\n                                          </TableCell>\r\n\r\n                                          {Number(contextObj?.Edit_Rights) === 1 && (\r\n                                            <TableCell>\r\n                                              <IconButton onClick={() => handleEditTask(taskItem)}>\r\n                                                <Edit />\r\n                                              </IconButton>\r\n                                            </TableCell>\r\n                                          )}\r\n\r\n                                          <TableCell>\r\n                                            <IconButton onClick={() => handleviewTaskDetail(taskItem)}>\r\n                                              <ViewHeadlineSharpIcon />\r\n                                            </IconButton>\r\n                                          </TableCell>\r\n                                        </TableRow>\r\n                                      </Table>\r\n                                    </TableContainer>\r\n                                  </AccordionDetails>\r\n                                </Accordion>\r\n                              ))\r\n                            ) : (\r\n                              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                No tasks available for this task type.\r\n                              </Typography>\r\n                            )}\r\n                          </AccordionDetails>\r\n                        </Accordion>\r\n                      ))\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        No task type groups found for this schedule type.\r\n                      </Typography>\r\n                    )}\r\n                  </TabPanel>\r\n                ))}\r\n\r\n              </TabContext>\r\n            )\r\n\r\n          })}\r\n        </Box>\r\n\r\n\r\n\r\n        <DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={setCloseTask}>Close</Button>\r\n        </DialogActions>\r\n\r\n      </Dialog>\r\n\r\n\r\n      <Dialog open={assignDialogOpen} fullWidth maxWidth=\"sm\" PaperProps={{ style: { borderRadius: '8px' } }}>\r\n        <DialogTitle>Assign Task</DialogTitle>\r\n        <DialogContent>\r\n          <div style={{ padding: '1px', display: 'flex' }}>\r\n            <div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n              <label htmlFor=\"task-select\" style={{ marginRight: '8px' }}>Select Task</label>\r\n              <select\r\n                id=\"task-select\"\r\n                value={taskScheduleInput.Task_Id || ''}\r\n                className=\"cus-inpt\"\r\n                required\r\n                onChange={e => handleTaskChange({ value: e.target.value })}\r\n                style={{ flex: 1, marginRight: '8px' }}\r\n              >\r\n                <option value=\"\" disabled>- select -</option>\r\n                {taskOptions.map((option, index) => (\r\n                  <option key={index} value={option.value}>\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <IconButton onClick={() => setIsDialogOpen(true)}>\r\n                <Button variant=\"contained\" color=\"primary\">Create New</Button>\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n          <div style={{ padding: '1px', display: 'flex' }}>\r\n            <div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n              <label style={{ marginRight: '8px' }}>Sch_Type</label>\r\n              <select\r\n                value={taskScheduleInput.Sch_Type_Id || ''}\r\n                onChange={handleSchTypeChange}\r\n                className=\"cus-inpt\"\r\n                required\r\n                style={{ marginLeft: '10px' }}\r\n              >\r\n                <option value=\"\" disabled>- Sch_Type -</option>\r\n                {scheduleTypes.map((option, index) => (\r\n                  <option key={index} value={option.Sch_Type_Id}>\r\n                    {option.Sch_Type}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setAssignDialogOpen(false)}>Cancel</Button>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleAssignTask}>Save</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <TaskAssign\r\n        open={taskAssignOpen}\r\n        onClose={() => setTaskAssignOpen(false)}\r\n        task={selectedTask}\r\n        projectId={projectid}\r\n        entryBy={entryBy}\r\n        taskId={selectedTask}\r\n        reload={onReload}\r\n      />\r\n\r\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\r\n        <DialogTitle>Delete Task</DialogTitle>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">Cancel</Button>\r\n          {/* <Button onClick={deleteTaskFun} color=\"secondary\">Delete</Button> */}\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <TaskMasterMgt\r\n        openAction={isDialogOpen}\r\n        onCloseFun={() => setIsDialogOpen(false)}\r\n        onTaskAdded={fetchTasks}\r\n        Reload={reload}\r\n      />\r\n      <TaskMasterMgt\r\n        row={selectedTask}\r\n        openAction={editDialogOpen}\r\n        onCloseFun={() => setEditDialogOpen(false)}\r\n        reload={fetchData}\r\n      />\r\n      <TaskIndividual\r\n        open={taskDetailDialog}\r\n        onClose={() => setTaskDetailsDialog(false)}\r\n        taskDetails={taskDetails}\r\n      />\r\n\r\n    </>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default ListingTask;\r\n\r\n\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { Edit, Delete, Launch, People, Search as SearchIcon } from '@mui/icons-material';\r\nimport { toast } from 'react-toastify';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport ProjectForm from \"../ProjectList/addEditProject\";\r\nimport EmployeeManagementDialog from \"../employeeManagement/employeeManagement\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport ListingTask from \"../Tasks/taskDetails/listingTask\";\r\n\r\nconst ActiveProjects = () => {\r\n    const [reload, setReload] = useState(false);\r\n    const [projects, setProjects] = useState([]);\r\n    const [projectAlldata, setProjectAlldata] = useState([]);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [selectedProject, setSelectedProject] = useState(null);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [projectId, setProjectId] = useState(0);\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [projectToDelete, setProjectToDelete] = useState(null);\r\n    const [employeeDialogOpen, setEmployeeDialogOpen] = useState(false);\r\n    const [listingTaskDialogOpen, setListingTaskDialogOpen] = useState(false);\r\n    const [filterInput, setFilterInput] = useState('');\r\n\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    useEffect(() => {\r\n        fetchProjects();\r\n        fetchProjectData();\r\n    }, [parseData?.Company_id, reload]);\r\n\r\n    const handleReloadProjects = () => setReload(prev => !prev);\r\n\r\n    const fetchProjects = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project/newProjectAbstract?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjects(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjects([]);\r\n        }\r\n    };\r\n\r\n    const fetchProjectData = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjectAlldata(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjectAlldata([]);\r\n        }\r\n    };\r\n\r\n    const deleteFun = () => {\r\n        if (projectToDelete) {\r\n            fetchLink({\r\n                address: `taskManagement/project`,\r\n                method: 'DELETE',\r\n                bodyData: { Project_Id: projectToDelete?.Project_Id },\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReload(!reload);\r\n                    toast.success(data.message);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }).catch(e => console.error('Fetch Error:', e));\r\n        }\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const calcPercentage = (task, completed) => (Number(task) === 0 ? 0 : ((Number(completed) / Number(task)) * 100).toFixed(0));\r\n\r\n    const columns = [\r\n        { name: 'Project', selector: row => row.Project_Name, sortable: true, width: '250px' },\r\n        { name: 'Head', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Project_Head_Name, sortable: true },\r\n        { name: 'Status', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Status, sortable: true },\r\n        { name: 'End Date', selector: row => row.Est_End_Dt ? new Date(row.Est_End_Dt).toLocaleDateString('en-IN') : \"N/A\", sortable: true },\r\n        { name: 'Progress', selector: row => `${calcPercentage(row.TasksScheduled, row.CompletedTasks)}%`, sortable: true },\r\n        {\r\n            name: 'Tasks', cell: row => (\r\n                <>\r\n                    <IconButton onClick={() => handleOpenListingTaskDialog(row)}>\r\n                        <Launch />\r\n                    </IconButton>\r\n                    {row.CompletedTasks} / {row.TasksScheduled}\r\n                </>\r\n            )\r\n        },\r\n        { name: 'Assigned', selector: row => row.TasksAssignedToEmployee },\r\n        {\r\n            name: 'Employees', cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEmployeeDialog(row.Project_Id)}>\r\n                            <People />\r\n                        </IconButton>\r\n                    )}\r\n                    {row.EmployeesInvolved}\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            name: 'Actions', cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Edit_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEditDialog(row)}><Edit /></IconButton>\r\n                    )}\r\n                </>\r\n            )\r\n        },\r\n    ];\r\n\r\n    const filteredProjects = projects.filter(project => {\r\n        const projectHead = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Project_Head_Name || \"\";\r\n        const status = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Status || \"\";\r\n        return (\r\n            project.Project_Name.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            projectHead.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            status.toLowerCase().includes(filterInput.toLowerCase())\r\n        );\r\n    });\r\n\r\n    const handleOpenCreateDialog = () => {\r\n        setSelectedProject(null);\r\n        setIsEdit(false);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenEditDialog = project => {\r\n        setSelectedProject(project);\r\n        setIsEdit(true);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenDeleteDialog = project => {\r\n        setProjectToDelete(project);\r\n        setDeleteDialog(true);\r\n    };\r\n\r\n    const handleOpenListingTaskDialog = project => {\r\n        setSelectedProject(project);\r\n        setProjectId(project.Project_Id);\r\n        setListingTaskDialogOpen(true);\r\n    };\r\n\r\n    const handleCloseDialogs = () => {\r\n        setDialogOpen(false);\r\n        setListingTaskDialogOpen(false);\r\n        setSelectedProject(null);\r\n        setProjectToDelete(null);\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const handleOpenEmployeeDialog = projectId => {\r\n        setProjectId(projectId);\r\n        setEmployeeDialogOpen(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fw-bold d-flex align-items-center justify-content-between mt-0 \">\r\n                <span style={{ marginLeft: '20px' }}>Projects</span>\r\n                <div className=\"mb-1\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                        <SearchIcon style={{ position: 'absolute', left: 15, color: '#aaa' }} />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            onChange={e => setFilterInput(e.target.value)}\r\n                            style={{\r\n                                paddingLeft: 35,\r\n                                marginRight: 10,\r\n                                margin: 10,\r\n                                borderRadius: 4,\r\n                                border: '1px solid black'\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <button onClick={handleOpenCreateDialog} className=\"btn btn-primary fa-13 shadow\">\r\n                            Create Project\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card-body p-0 table-container\">\r\n                <DataTable\r\n                    columns={columns}\r\n                    data={filteredProjects}\r\n                    pagination\r\n                    highlightOnHover\r\n                    fixedHeader\r\n                    paginationPerPage={15}\r\n                    responsive\r\n                    persistTableHead\r\n                    customStyles={{\r\n                        headCells: {\r\n                            style: {\r\n                                fontSize: '16px',\r\n                                fontWeight: 'bold',\r\n                                padding: '10px',\r\n                                backgroundColor: '#2c3e50',\r\n                                color: '#ecf0f1',\r\n                                position: 'sticky',\r\n                                top: 0,\r\n                                zIndex: 2,\r\n                            },\r\n                        },\r\n                        cells: {\r\n                            style: {\r\n                                padding: '8px',\r\n                                fontSize: '14px',\r\n                                backgroundColor: '#f9f9f9',\r\n                                color: '#2c3e50',\r\n                            },\r\n                        },\r\n                        rows: {\r\n                            style: {\r\n                                borderBottom: '1px solid #ddd',\r\n                            },\r\n                        },\r\n                    }}\r\n                    style={{\r\n                        overflowY: 'auto',\r\n                        maxHeight: 'calc(100vh - 200px)',\r\n                    }}\r\n                />\r\n\r\n\r\n\r\n                <Dialog\r\n                    open={deleteDialog}\r\n                    onClose={handleCloseDialogs}\r\n                    aria-labelledby=\"delete-dialog-title\"\r\n                    aria-describedby=\"delete-dialog-description\">\r\n                    <DialogTitle className=\"bg-danger text-white mb-2 px-3 py-2\" style={{ fontSize: '18px' }}>\r\n                        Confirm Deletion\r\n                    </DialogTitle>\r\n                    <DialogContent className=\"p-4\" style={{ fontSize: '16px' }}>\r\n                        Are you sure you want to delete the project\r\n                        <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button\r\n                            onClick={() => setDeleteDialog(false)}\r\n                            className=\"btn btn-secondary fa-13 shadow\"\r\n                            style={{\r\n                                background: '#95a5a6',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            onClick={deleteFun}\r\n                            className=\"btn btn-danger fa-13 shadow\"\r\n                            style={{\r\n                                background: '#e74c3c',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n\r\n            </div>\r\n\r\n            <ListingTask\r\n                onClose={handleCloseDialogs}\r\n                dialogOpen={listingTaskDialogOpen}\r\n                setDialogOpen={setListingTaskDialogOpen}\r\n                isEdit={false}\r\n                parseData={parseData}\r\n                projectid={projectId}\r\n                onReload={handleReloadProjects}\r\n                selectedProject={selectedProject}\r\n            />\r\n\r\n            <ProjectForm\r\n                open={dialogOpen}\r\n                onClose={handleCloseDialogs}\r\n                inputValue={selectedProject}\r\n                isEdit={isEdit}\r\n                setReload={handleReloadProjects}\r\n                projectData={projectId}\r\n            />\r\n\r\n            <EmployeeManagementDialog\r\n                open={employeeDialogOpen}\r\n                onClose={() => setEmployeeDialogOpen(false)}\r\n                projectId={projectId}\r\n                onReload={handleReloadProjects}\r\n            />\r\n\r\n            <Dialog\r\n                open={deleteDialog}\r\n                onClose={handleCloseDialogs}\r\n                aria-labelledby=\"delete-dialog-title\"\r\n                aria-describedby=\"delete-dialog-description\">\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Confirmation</DialogTitle>\r\n                <DialogContent className=\"p-4\">\r\n                    Do you want to delete the project\r\n                    <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button onClick={() => setDeleteDialog(false)} className=\"btn btn-secondary fa-13 shadow\">\r\n                        Cancel\r\n                    </button>\r\n                    <button onClick={deleteFun} className=\"btn btn-danger fa-13 shadow\">\r\n                        Delete\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ActiveProjects;\r\n"],"names":["RequiredStar","_jsx","style","color","fontWeight","fontSize","children","customTableStyles","table","width","backgroundColor","rows","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_ref","open","onClose","inputValue","isEdit","setReload","localData","localStorage","getItem","parseData","JSON","parse","projectHead","setProjectHead","useState","proStatus","setProStatus","formData","setFormData","Project_Id","Project_Name","Project_Desc","Project_Head","Est_Start_Dt","ISOString","Est_End_Dt","Project_Status","Entry_By","UserId","Company_id","useEffect","fetchLink","concat","then","data","success","catch","e","console","error","Project_Head_Id","handleChange","target","value","validateFields","requiredFields","field","toast","replace","inputFields","label","elem","type","required","options","map","obj","Name","Status_Id","Status","_Fragment","_jsxs","Dialog","DialogTitle","className","DialogContent","onSubmit","preventDefault","method","bodyData","prev","message","createFun","payload","index","onChange","option","idx","DialogActions","onClick","projectId","onReload","initialValue","Designation_Name","BranchName","employees","setEmployees","loading","setLoading","addEmployeeDialogOpen","setAddEmployeeDialogOpen","dropdownEmployees","setDropdownEmployees","selectedEmployees","setSelectedEmployees","contextObj","useContext","MyContext","fetchEmployeeDetails","fetchDropdownEmployees","fetchAssignedEmployees","async","onClosed","maxWidth","fullWidth","Box","display","justifyContent","alignItems","marginTop","marginInlineStart","Button","handleAddEmployeeOpen","sx","mr","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Array","isArray","length","user","EmployeeId","colSpan","position","bottom","Autocomplete","multiple","getOptionLabel","isOptionEqualToValue","event","uniqueValues","filter","val","self","findIndex","t","PopperComponent","props","Popper","placement","onclose","renderInput","params","TextField","placeholder","handleAddEmployeeClose","Number","Add_Rights","UserIds","emp","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","row","openAction","reload","onCloseFun","loadingOn","loadingOff","onTaskAdded","Task_Id","Task_Name","Task_Desc","Task_Group_Id","Entry_Date","Update_By","Update_Date","Task_Parameters","dialog","setDialog","setIsEdit","taskData","setTaskData","taskGroup","setTaskGroup","taskParameters","setTaskParameters","setInputValue","editDialog","setEditDialog","editInputValue","setEditInputValue","taskResponse","taskGroupResponse","taskParametersResponse","fetchData","isValidObject","log","closeDialog","closeEditDialog","cursor","paramArr","param","Param_Id","Paramet_Id","PostObj","response","postAndPutTask","maxLength","disabled","o","i","Task_Type_Id","Task_Type","Under_Task_Id","disableCloseOnSelect","Paramet_Name","Paramet_Data_Type","newValue","renderOption","_ref2","selected","Checkbox","marginRight","checked","opt","updatedParams","Default_Value","handleEditSubmit","select","taskId","editData","usersDropdown","setUsersDropdown","selectedSch","setSelectedSch","intitalVlaue","AN_No","Sch_Id","Assigned_Emp_Id","Emp_Id","Task_Assign_dt","Date","toISOString","split","Sch_Period","Sch_Time","EN_Time","Ord_By","Timer_Based","Sch_Type","Invovled_Stat","EmpGet","Is_Repitative","RepeatDays","Mon","Tue","Wed","Thu","Fri","Sat","Sun","assignEmpInpt","setAssignEmpInpt","userResponse","schTypeResponse","_selectedSchType$data","_selectedSchType$data2","selectedSchType","selectedSchId","Sch_Type_Id","selectedSchName","Sch_Name","_selectedSchType$data3","_selectedSchType$data4","TaskSchId","fetchSelectedData","Sch_Type_Name","EmployeeName","IS_Rep_Monday","IS_Rep_Tuesday","IS_Rep_Wednesday","IS_Rep_Thursday","Is_Rep_Friday","Is_Rep_Saturday","Is_Rep_Sunday","schPeriod","calculateSchPeriod","hours1","minutes1","hours2","minutes2","date1","date2","difference","Math","abs","hours","floor","minutes","String","padStart","repeatDaysMapped","Task_Levl_Id","tableLayout","verticalAlign","paddingRight","paddingLeft","Select","styles","isSearchable","padding","isDisabled","min","Boolean","htmlFor","flexWrap","prevState","marginBottom","gap","day","taskDetails","closeDialogTask","selectedTask","setSelectedTask","assignDialogOpen","setAssignDialogOpen","setTimeout","formatDate","dateString","date","isNaN","getTime","getDate","month","getMonth","year","getFullYear","CircularProgress","textAlign","detail","AssignedUser","CalendarMonth","QueryBuilder","Edit_Rights","IconButton","size","Edit","TaskAssign","dialogOpen","setDialogOpen","projectid","selectedProject","isDialogOpen","setIsDialogOpen","taskAssignOpen","setTaskAssignOpen","tasks","setTasks","setTaskDetails","taskDetailDialog","setTaskDetailsDialog","taskScheduleInput","setTaskScheduleInput","deleteDialogOpen","setDeleteDialogOpen","userData","entryBy","companyId","editDialogOpen","setEditDialogOpen","expandedAccordion","setExpandedAccordion","expandedAccordionTask","setExpandedAccordionTask","setIsedit","updateDialogOpen","setUpdateDialogOpen","selectedTab","setSelectedTab","scheduleTypes","setScheduleTypes","handleTabChange","fetchTasks","useCallback","Schtype","taskOptions","handleSchTypeChange","selectedOption","find","parseInt","PaperProps","borderRadius","flex","marginLeft","requestData","Sch_Project_Id","task","schtypeid","status","warn","updatesTaskDetails","typography","schedule","SchTypes","TabContext","borderBottom","borderColor","TabList","sch","Tab","SchType","SchTypeId","toString","Typography","TabPanel","TaskCountsInSchType","count","TotalTasks","CompletedTasks","TaskTypeGroups","taskType","Accordion","expanded","handleAccordionChange","boxShadow","AccordionSummary","expandIcon","ExpandMoreIcon","flexGrow","TaskMetrics","AccordionDetails","Tasks","taskItem","handleAccordionChangeTask","maxHeight","stickyHeader","handleTaskEdit","AssignedEmployees","employee","empIndex","Chip","margin","handleSelectedTask","LibraryAddIcon","handleviewTaskDetail","ViewHeadlineSharpIcon","TasksGet","Task_Sch_Duaration","Task_Start_Time","Task_End_Time","Task_Est_Start_Date","Task_Est_End_Date","handleTaskChange","Sch_Est_Start_Date","Sch_Est_End_Date","TaskMasterMgt","Reload","TaskIndividual","ActiveProjects","projects","setProjects","projectAlldata","setProjectAlldata","setSelectedProject","setProjectId","deleteDialog","setDeleteDialog","projectToDelete","setProjectToDelete","employeeDialogOpen","setEmployeeDialogOpen","listingTaskDialogOpen","setListingTaskDialogOpen","filterInput","setFilterInput","fetchProjects","fetchProjectData","handleReloadProjects","deleteFun","columns","selector","sortable","_projectAlldata$find","p","Project_Head_Name","_projectAlldata$find2","toLocaleDateString","TasksScheduled","completed","toFixed","calcPercentage","cell","handleOpenListingTaskDialog","Launch","TasksAssignedToEmployee","handleOpenEmployeeDialog","People","EmployeesInvolved","handleOpenEditDialog","filteredProjects","project","_projectAlldata$find3","_projectAlldata$find4","toLowerCase","includes","handleCloseDialogs","SearchIcon","left","border","handleOpenCreateDialog","DataTable","pagination","highlightOnHover","fixedHeader","paginationPerPage","responsive","persistTableHead","customStyles","top","cells","overflowY","ListingTask","ProjectForm","projectData","EmployeeManagementDialog"],"sourceRoot":""}