{"version":3,"file":"static/js/2040.81f36d48.chunk.js","mappings":"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","sources":["Components/requiredStar.jsx","Pages/Tasks/Components/addEditTask.jsx","Pages/Tasks/newTasksPage.jsx","Pages/Tasks/taskParameters.jsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/ExpandLess.js","../node_modules/@mui/icons-material/esm/ExpandMore.js"],"sourcesContent":["const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport '../../common.css'\r\nimport { CheckBoxOutlineBlank, CheckBox } from '@mui/icons-material';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Checkbox, TextField, Autocomplete } from '@mui/material';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { isValidObject } from '../../../Components/functions';\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst TaskMasterMgt = ({ row, children, openAction, reload, onCloseFun, loadingOn, loadingOff, onTaskAdded, onToast }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const initialValue = {\r\n        Task_Id: \"\",\r\n        Task_Name: \"\",\r\n        Task_Desc: \"\",\r\n        Task_Group_Id: 0,\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id,\r\n        Entry_Date: \"\",\r\n        Update_By: '',\r\n        Update_Date: \"\",\r\n        Task_Parameters: [],\r\n\r\n    }\r\n    const [dialog, setDialog] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [taskGroup, setTaskGroup] = useState([]);\r\n    const [taskParameters, setTaskParameters] = useState([]);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `taskManagement/tasks/dropdown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTaskData(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/taskType/dropDown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTaskGroup(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `taskManagement/parameters`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTaskParameters(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setDialog(openAction ? true : false)\r\n    }, [openAction])\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(row)) {\r\n            setInputValue(pre => {\r\n                let inputVAL = { ...pre }\r\n                Object.entries(row).forEach(([key, value]) => {\r\n                    inputVAL[key] = value\r\n                })\r\n                return inputVAL\r\n            });\r\n            setIsEdit(true);\r\n        } else {\r\n            setInputValue(initialValue);\r\n            setIsEdit(false);\r\n        }\r\n    }, [row]);\r\n\r\n    const closeDialog = () => {\r\n        setInputValue(initialValue);\r\n        setDialog(false);\r\n        if (onCloseFun) {\r\n            onCloseFun();\r\n        }\r\n    }\r\n\r\n    const postAndPutTask = async () => {\r\n        const paramArr = inputValue?.Task_Parameters?.map(param => ({\r\n            ...param,\r\n            Param_Id: param?.Paramet_Id\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...inputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n        if (loadingOn) {\r\n            loadingOn();\r\n        }\r\n\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: isEdit ? 'PUT' : 'POST',\r\n                bodyData: PostObj\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                closeDialog();\r\n                if (reload) {\r\n                    reload();\r\n                }\r\n                onTaskAdded();\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) {\r\n                loadingOff();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <span onClick={() => setDialog(true)} style={{ cursor: 'pointer' }}>{children}</span>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}>\r\n\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? 'Edit Task' : 'Add Task'}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    postAndPutTask();\r\n                }}>\r\n\r\n                    <DialogContent>\r\n                        <div className=\"row \">\r\n\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Name <RequiredStar /></label>\r\n                                <input\r\n                                    maxLength={150}\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Name: e.target.value })}\r\n                                    required\r\n                                    value={inputValue?.Task_Name}\r\n                                    placeholder=\"ex: File Checking\"\r\n                                    className=\"cus-inpt\" />\r\n                            </div>\r\n\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Group <RequiredStar /></label>\r\n                                <select\r\n                                    value={inputValue.Task_Group_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    required\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Group_Id: e.target.value })}>\r\n                                    <option value={0} disabled>- select -</option>\r\n                                    {taskGroup?.map((o, i) => (\r\n                                        Number(o?.Task_Type_Id) !== 0 &&\r\n                                        <option key={i} value={o?.Task_Type_Id}>\r\n                                            {o?.Task_Type}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Base Task</label>\r\n                                <select\r\n                                    value={inputValue.Under_Task_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Under_Task_Id: e.target.value })}>\r\n                                    <option value={0}>Primary</option>\r\n                                    {taskData?.map((o, i) => (\r\n                                        <option key={i} value={o?.Task_Id}>\r\n                                            {o?.Task_Name}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"col-12\">\r\n                                <label>Task Describtion <RequiredStar /></label>\r\n                                <textarea\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValue.Task_Desc}\r\n                                    rows=\"3\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Desc: e.target.value })} />\r\n                            </div>\r\n\r\n                            <div className=\"col-md-12 p-2\">\r\n                                <Autocomplete\r\n                                    multiple\r\n                                    id=\"checkboxes-tags-demo\"\r\n                                    options={[...taskParameters?.map(o => ({ ...o, Default_Value: '' }))]}\r\n                                    disableCloseOnSelect\r\n                                    getOptionLabel={(option) => option?.Paramet_Name + ' - ' + option?.Paramet_Data_Type}\r\n                                    value={inputValue?.Task_Parameters || []}\r\n                                    onChange={(f, e) => setInputValue({ ...inputValue, Task_Parameters: e })}\r\n                                    renderOption={(props, option, { selected }) => (\r\n                                        <li {...props}>\r\n                                            <Checkbox\r\n                                                icon={icon}\r\n                                                checkedIcon={checkedIcon}\r\n                                                style={{ marginRight: 8 }}\r\n                                                checked={selected}\r\n                                            />\r\n                                            {option?.Paramet_Name + ' - ' + option?.Paramet_Data_Type}\r\n                                        </li>\r\n                                    )}\r\n                                    className=\"pt-2\"\r\n                                    isOptionEqualToValue={(opt, val) => Number(opt?.Paramet_Id) === Number(val?.Paramet_Id)}\r\n                                    renderInput={(params) => (\r\n                                        <TextField {...params} label=\"Task Prarameters\" placeholder=\"Choose Task Parameters\" />\r\n                                    )}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValue?.Task_Parameters?.map((param, index) => (\r\n                                <div key={index} className=\"col-md-4 p-2\">\r\n                                    <label className=\"mb-2\">{param?.Paramet_Name}</label>\r\n                                    <input\r\n                                        type={param?.Paramet_Data_Type || 'text'}\r\n                                        className=\"cus-inpt\"\r\n                                        onChange={(e) => {\r\n                                            const updatedDetString = [...inputValue.Task_Parameters];\r\n                                            updatedDetString[index] = {\r\n                                                ...updatedDetString[index],\r\n                                                Default_Value: e.target.value,\r\n                                            };\r\n                                            setInputValue({ ...inputValue, Task_Parameters: updatedDetString });\r\n                                        }}\r\n                                        value={param?.Default_Value}\r\n                                        placeholder=\"Default Value\"\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <button\r\n                            className=\"btn btn-light rounded-5 px-3\"\r\n                            type=\"button\"\r\n                            onClick={closeDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-primary rounded-5 px-3\"\r\n                            type='submit'>\r\n                            Submit\r\n                        </button>\r\n                    </DialogActions>\r\n\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskMasterMgt;","import { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport '../common.css'\r\nimport { Edit, Delete } from '@mui/icons-material';\r\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport DataTable from \"react-data-table-component\";\r\nimport TaskParametersComp from \"./taskParameters\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport TaskMasterMgt from \"./Components/addEditTask\";\r\nimport { isEqualNumber, isValidObject } from \"../../Components/functions\";\r\n\r\n\r\nconst TaskMaster = ({ loadingOn, loadingOff }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const initialValue = {\r\n        Task_Id: \"\",\r\n        Task_Name: \"\",\r\n        Task_Desc: \"\",\r\n        Task_Group_Id: 0,\r\n        Entry_By: parseData?.UserId,\r\n        Entry_Date: \"\",\r\n        Update_By: '',\r\n        Update_Date: \"\",\r\n        Task_Parameters: [],\r\n    }\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [reload, setReload] = useState(false);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterInput, setFilterInput] = useState('');\r\n    const [rowValue, setRowValue] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/tasks?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTaskData(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [reload])\r\n\r\n    useEffect(() => {\r\n        const filteredResults = [...taskData].filter(item => {\r\n            return Object.values(item).some(value =>\r\n                String(value).toLowerCase().includes(filterInput.toLowerCase())\r\n            );\r\n        });\r\n\r\n        setFilteredData(filteredResults);\r\n    }, [filterInput, taskData])\r\n\r\n    const handleDelete = (row) => {\r\n        setInputValue(row);\r\n        setDialog(true);\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setInputValue(initialValue);\r\n        setDialog(false);\r\n    }\r\n\r\n    const tasksColumn = [\r\n        {\r\n            name: 'Task',\r\n            selector: (row) => row?.Task_Name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Task Group',\r\n            selector: (row) => row?.Task_Group,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Task Describtion',\r\n            selector: (row) => row?.Task_Desc,\r\n            sortable: true,\r\n            width: '170px'\r\n        },\r\n        {\r\n            name: 'Created At',\r\n            selector: (row) => new Date(row?.Entry_Date),\r\n            cell: (row) => {\r\n                return new Date(row?.Entry_Date).toLocaleDateString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric' })\r\n            },\r\n            sortable: true\r\n        },\r\n        {\r\n            name: 'Actions',\r\n            cell: (row) => (\r\n                <div>\r\n                    {Number(contextObj?.Edit_Rights) === 1 && (\r\n                        <IconButton onClick={() => setRowValue(row)}>\r\n                            <Edit />\r\n                        </IconButton>\r\n                    )}\r\n                    {Number(contextObj?.Delete_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleDelete(row)}>\r\n                            <Delete sx={{ color: '#FF6865' }} />\r\n                        </IconButton>\r\n                    )}\r\n                </div>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const deleteTask = async () => {\r\n        if (inputValue?.Task_Id && Number(contextObj.Delete_Rights) === 1) {\r\n            fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: 'DELETE',\r\n                bodyData: { Task_Id: inputValue?.Task_Id }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    toast.success(data.message);\r\n                    setReload(!reload);\r\n                    closeDialog();\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }\r\n\r\n    function handleSearchChange(event) {\r\n        const term = event.target.value;\r\n        setFilterInput(term);\r\n    }\r\n\r\n    const resetValues = () => setRowValue({})\r\n\r\n    return (\r\n        <>\r\n            <TaskParametersComp />\r\n\r\n            {isValidObject(rowValue) && (\r\n                <TaskMasterMgt\r\n                    row={rowValue}\r\n                    openAction={true}\r\n                    reload={() => setReload(pre => !pre)}\r\n                    onCloseFun={resetValues}\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                />\r\n            )}\r\n\r\n            <div className=\"card\">\r\n\r\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\r\n                    <span>Task Master</span>\r\n                    {isEqualNumber(contextObj.Add_Rights, 1) && (\r\n                        <TaskMasterMgt\r\n                            openAction={false}\r\n                            reload={() => setReload(pre => !pre)}\r\n                            onCloseFun={resetValues}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                        >\r\n                            <button\r\n                                className=\"btn btn-primary rounded-5 px-3 py-1 fa-13 shadow\"\r\n                            >\r\n                                {'Create Task'}\r\n                            </button>\r\n                        </TaskMasterMgt>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"card-body p-0 overflow-hidden rounded-bottom-3\">\r\n                    <>\r\n                        <div className=\"d-flex justify-content-end\">\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <input\r\n                                    type=\"search\"\r\n                                    value={filterInput}\r\n                                    className=\"cus-inpt\"\r\n                                    placeholder=\"Search\"\r\n                                    onChange={handleSearchChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <DataTable\r\n                            columns={tasksColumn}\r\n                            data={filterInput ? filteredData : taskData}\r\n                            pagination\r\n                            highlightOnHover={true}\r\n                            fixedHeader={true}\r\n                            fixedHeaderScrollHeight={'68vh'}\r\n                        />\r\n                    </>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n                aria-labelledby=\"create-dialog-title\"\r\n                aria-describedby=\"create-dialog-description\">\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Confirmation</DialogTitle>\r\n                <DialogContent className=\"p-4\">\r\n                    Do you want to delete the\r\n                    <span className=\"text-primary\">{\" \" + inputValue?.Task_Name + \" \"}</span>\r\n                    Task ?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button\r\n                        className=\"btn btn-light rounded-5 px-3 me-1\"\r\n                        onClick={closeDialog}>\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        className=\"btn btn-primary rounded-5 px-3\"\r\n                        onClick={deleteTask}>\r\n                        Delete\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskMaster","import { IconButton, Dialog, DialogActions, DialogContent, DialogTitle, Button, Collapse } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\nimport { toast } from \"react-toastify\";\r\nimport { ExpandLess, ExpandMore } from '@mui/icons-material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\n\r\nconst TaskParametersComp = ({ isOpened, disableCollapse }) => {\r\n    const initialValue = {\r\n        Paramet_Id: '',\r\n        Paramet_Name: '',\r\n        Paramet_Data_Type: '',\r\n    }\r\n    const [parameters, setParameters] = useState([])\r\n    const [addDialog, setAddDialog] = useState(false);\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n    const [reload, setReload] = useState(false);\r\n    const [open, setOpen] = useState(isOpened ? true : false);\r\n\r\n    const [filterInput, setFilterInput] = useState('');\r\n    const [filteredData, setFilteredData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/parameters`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setParameters(data.data)\r\n            }\r\n        })\r\n            .catch(e => console.error(e))\r\n\r\n    }, [reload])\r\n\r\n    const AddParameter = () => {\r\n        fetchLink({\r\n            address: `taskManagement/parameters`,\r\n            method: 'POST',\r\n            bodyData: inputValue\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                setReload(!reload)\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        })\r\n            .catch(e => console.error(e))\r\n            .finally(CloseAddDialog)\r\n    }\r\n\r\n    const DeleteParameter = () => {\r\n        fetchLink({\r\n            address: `taskManagement/parameters`,\r\n            method: 'DELETE',\r\n            bodyData: { Paramet_Id: inputValue.Paramet_Id }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                setReload(!reload)\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        })\r\n            .catch(e => console.error(e))\r\n            .finally(closeDeleteConfirmationDialog)\r\n    }\r\n\r\n    const CloseAddDialog = () => {\r\n        setAddDialog(false);\r\n        setInputValue(initialValue)\r\n    }\r\n\r\n    const closeDeleteConfirmationDialog = () => {\r\n        setInputValue(initialValue);\r\n        setDeleteDialog(false)\r\n    }\r\n\r\n    function handleSearchChange(event) {\r\n        const term = event.target.value;\r\n        setFilterInput(term);\r\n        const filteredResults = parameters.filter(item => {\r\n            return Object.values(item).some(value =>\r\n                String(value).toLowerCase().includes(term.toLowerCase())\r\n            );\r\n        });\r\n        setFilteredData(filteredResults);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card mb-3\">\r\n\r\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\r\n                    <div className=\"flex-grow-1 mb-0\">\r\n                        {!disableCollapse && (\r\n                            <IconButton size='small' onClick={() => setOpen(!open)}>\r\n                                {open ? <ExpandLess style={{ fontSize: '18px', color: 'black' }} /> : <ExpandMore style={{ fontSize: '18px', color: 'black' }} />}\r\n                            </IconButton>\r\n                        )}\r\n                        Task Parameters\r\n                    </div>\r\n                    <button onClick={() => setAddDialog(true)} className=\"btn btn-primary rounded-5 px-3 py-1 fa-13 shadow\">\r\n                        Create Parameter\r\n                    </button>\r\n                </div>\r\n\r\n                <Collapse in={open} unmountOnExit>\r\n\r\n                    <div className=\"card-body\" style={{ maxHeight: !disableCollapse ? '40vh' : 'auto', overflowY: 'auto' }}>\r\n\r\n                        <div className=\"row flex-row-reverse\">\r\n                            <div className=\"col-md-4 pb-2\">\r\n                                <input\r\n                                    type=\"search\"\r\n                                    value={filterInput}\r\n                                    className=\"cus-inpt\"\r\n                                    placeholder=\"Search\"\r\n                                    onChange={handleSearchChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className='border fa-14'>Sno</th>\r\n                                        <th className='border fa-14'>Parameter</th>\r\n                                        <th className='border fa-14'>Data Type</th>\r\n                                        {/* <th className='border fa-14'>Action</th> */}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {(filteredData.length > 0 ? filteredData : filterInput === '' ? parameters : [])?.map((o, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className='border fa-14'>{i + 1}</td>\r\n                                            <td className='border fa-14'>{o?.Paramet_Name}</td>\r\n                                            <td className='border fa-14'>{o?.Paramet_Data_Type}</td>\r\n                                            {/* <td className='border fa-14'>\r\n                                                <IconButton onClick={() => openDeleteConfirmationDialog(o)}>\r\n                                                    <Delete sx={{color: 'red', fontSize: '16px'}} />\r\n                                                </IconButton>\r\n                                            </td> */}\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </Collapse>\r\n            </div>\r\n\r\n            <Dialog\r\n                open={addDialog}\r\n                onClose={CloseAddDialog}\r\n                maxWidth='sm' fullWidth>\r\n                <DialogTitle>Create Task Parameters</DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    AddParameter()\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">Name</td>\r\n                                        <td className=\"border-0 fa-14\">\r\n                                            <input\r\n                                                className='cus-inpt'\r\n                                                value={inputValue?.Paramet_Name} required\r\n                                                onChange={e => setInputValue({ ...inputValue, Paramet_Name: e.target.value })} />\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">Data Type</td>\r\n                                        <td className=\"border-0 fa-14\">\r\n                                            <select\r\n                                                className='cus-inpt'\r\n                                                value={inputValue?.Paramet_Data_Type} required\r\n                                                onChange={e => setInputValue({ ...inputValue, Paramet_Data_Type: e.target.value })}\r\n                                            >\r\n                                                <option value=\"\" disabled>Select Data Type</option>\r\n                                                <option value='number'>number</option>\r\n                                                <option value='text'>text</option>\r\n                                                <option value='date'>date</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={CloseAddDialog} type='button'>cancel</Button>\r\n                        <Button type='submit'>Create Parameter</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={deleteDialog}\r\n                onClose={closeDeleteConfirmationDialog}\r\n            >\r\n                <DialogTitle>Confirm Delete</DialogTitle>\r\n                <DialogContent>\r\n                    Do you want to delete the\r\n                    {inputValue?.Paramet_Name && <span className='text-primary px-1'>{inputValue?.Paramet_Name}</span>}\r\n                    Parameter?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDeleteConfirmationDialog} >Cancel</Button>\r\n                    <Button onClick={DeleteParameter}>Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskParametersComp;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2m-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z\"\n}), 'CheckBox');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2\"\n}), 'CheckBoxOutlineBlank');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\"\n}), 'ExpandLess');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n}), 'ExpandMore');"],"names":["RequiredStar","_jsx","style","color","fontWeight","fontSize","children","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","_ref","_inputValue$Task_Para2","row","openAction","reload","onCloseFun","loadingOn","loadingOff","onTaskAdded","onToast","localData","localStorage","getItem","parseData","JSON","parse","initialValue","Task_Id","Task_Name","Task_Desc","Task_Group_Id","Entry_By","UserId","Company_id","Entry_Date","Update_By","Update_Date","Task_Parameters","dialog","setDialog","useState","isEdit","setIsEdit","taskData","setTaskData","taskGroup","setTaskGroup","taskParameters","setTaskParameters","inputValue","setInputValue","useEffect","fetchLink","address","then","data","success","catch","e","console","error","isValidObject","pre","inputVAL","Object","entries","forEach","_ref2","key","value","closeDialog","_jsxs","_Fragment","onClick","cursor","Dialog","open","onClose","DialogTitle","className","onSubmit","preventDefault","async","_inputValue$Task_Para","paramArr","map","param","Param_Id","Paramet_Id","PostObj","response","method","bodyData","toast","message","postAndPutTask","DialogContent","maxLength","onChange","target","required","placeholder","disabled","o","i","Number","Task_Type_Id","Task_Type","Under_Task_Id","rows","Autocomplete","multiple","id","options","Default_Value","disableCloseOnSelect","getOptionLabel","option","Paramet_Name","Paramet_Data_Type","f","renderOption","props","_ref3","selected","Checkbox","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","index","type","updatedDetString","DialogActions","filteredData","setFilteredData","setReload","contextObj","useContext","MyContext","filterInput","setFilterInput","rowValue","setRowValue","concat","filteredResults","filter","item","values","some","String","toLowerCase","includes","tasksColumn","name","selector","sortable","Task_Group","width","Date","cell","toLocaleDateString","day","month","year","Edit_Rights","IconButton","Edit","Delete_Rights","handleDelete","Delete","sx","resetValues","TaskParametersComp","TaskMasterMgt","isEqualNumber","Add_Rights","event","term","DataTable","columns","pagination","highlightOnHover","fixedHeader","fixedHeaderScrollHeight","isOpened","disableCollapse","parameters","setParameters","addDialog","setAddDialog","deleteDialog","setDeleteDialog","setOpen","CloseAddDialog","closeDeleteConfirmationDialog","size","ExpandLess","ExpandMore","Collapse","in","unmountOnExit","maxHeight","overflowY","length","maxWidth","fullWidth","finally","Button","DeleteParameter","createSvgIcon","d"],"sourceRoot":""}