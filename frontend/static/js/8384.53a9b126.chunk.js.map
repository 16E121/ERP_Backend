{"version":3,"file":"static/js/8384.53a9b126.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Sales/SalesReportComponent/LedgerBasedTable.jsx","Pages/Sales/SalesReportComponent/ProductBasedTable.jsx","Pages/Sales/SalesReportComponent/ProductDayBasedTable.jsx","Pages/Sales/LedgerTransaction.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = ''\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                            )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                        column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                    )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {title && <h6 className='fw-bold text-muted'>{title}</h6>}\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableMaxHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined\r\n};\r\n\r\n\r\nexport default FilterableTable;","import { Fragment, useEffect, useState } from \"react\";\nimport FilterableTable from \"../../../Components/filterableTable2\";\nimport { isEqualNumber, checkIsNumber } from '../../../Components/functions'\nimport { Autocomplete, Button, Card, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch, TextField, Tooltip } from \"@mui/material\";\nimport { CheckBoxOutlineBlank, CheckBox, FilterAltOff, Settings, Download } from '@mui/icons-material'\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\nimport * as XLSX from 'xlsx';\n\nconst csvConfig = mkConfig({\n    fieldSeparator: ',',\n    decimalSeparator: '.',\n    useKeysAsHeaders: true,\n});\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\n\nconst columnsInitialValue = [\n    { Field_Name: \"Ledger_Name\", Fied_Data: \"string\", isVisible: 1, isDefault: 1, OrderBy: 1 },\n    { Field_Name: \"Billed_Qty\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 2 },\n    { Field_Name: \"M2_Avg\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 3 },\n    { Field_Name: \"M3_Avg\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 4 },\n    { Field_Name: \"M6_Avg\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 5 },\n    { Field_Name: \"M9_Avg\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: 6 },\n    { Field_Name: \"M12_Avg\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 7 },\n    { Field_Name: \"A1\", Fied_Data: \"string\", isVisible: 1, isDefault: 0, OrderBy: null },\n    { Field_Name: \"A2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"A3\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"A4\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"A5\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Q_Pay_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Freq_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Ledger_Alias\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Actual_Party_Name_with_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Party_Name\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Party_Location\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Party_Nature\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Party_Group\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Ref_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Ref_Owners\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Party_Mobile_1\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Party_Mobile_2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"Party_District\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\n    { Field_Name: \"File_No\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null }\n]\n\nconst LedgerBasedSalesReport = ({ dataArray, filterDialog, closeDialog }) => {\n    const [filters, setFilters] = useState({});\n    const [showData, setShowData] = useState([]);\n    const [filteredData, setFilteredData] = useState(showData);\n    const [dialog, setDialog] = useState(false);\n    const [columns, setColumns] = useState(columnsInitialValue);\n    const DisplayColumn = [...columns].filter(\n        col => (isEqualNumber(col?.Defult_Display, 1) || isEqualNumber(col?.isVisible, 1))\n    ).map(col => col.Field_Name)\n\n    useEffect(() => {\n        applyFilters();\n    }, [filters]);\n\n    const handleFilterChange = (column, value) => {\n        setFilters(prevFilters => ({\n            ...prevFilters,\n            [column]: value,\n        }));\n    };\n\n    const applyFilters = () => {\n        let filtered = [...dataArray];\n        for (const column of columns) {\n            if (filters[column.Field_Name]) {\n                if (filters[column.Field_Name].type === 'range') {\n                    const { min, max } = filters[column.Field_Name];\n                    filtered = filtered.filter(item => {\n                        const value = item[column.Field_Name];\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\n                    });\n                } else if (filters[column.Field_Name].type === 'date') {\n                    const { start, end } = filters[column.Field_Name].value;\n                    filtered = filtered.filter(item => {\n                        const dateValue = new Date(item[column.Field_Name]);\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\n                    });\n                } else if (Array.isArray(filters[column.Field_Name])) {\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\n                }\n            }\n        }\n        setFilteredData(filtered);\n    };\n\n    const renderFilter = (column) => {\n        const { Field_Name, Fied_Data } = column;\n        if (Fied_Data === 'number') {\n            return (\n                <div className='d-flex justify-content-between px-2'>\n                    <input\n                        placeholder=\"Min\"\n                        type=\"number\"\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\n                        value={filters[Field_Name]?.min ?? ''}\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\n                    />\n                    <input\n                        placeholder=\"Max\"\n                        type=\"number\"\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\n                        value={filters[Field_Name]?.max ?? ''}\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\n                    />\n                </div>\n            );\n        } else if (Fied_Data === 'date') {\n            return (\n                <div className='d-flex justify-content-between px-2'>\n                    <input\n                        placeholder=\"Start Date\"\n                        type=\"date\"\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\n                        value={filters[Field_Name]?.value?.start ?? ''}\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\n                    />\n                    <input\n                        placeholder=\"End Date\"\n                        type=\"date\"\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\n                        value={filters[Field_Name]?.value?.end ?? ''}\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\n                    />\n                </div>\n            );\n        } else if (Fied_Data === 'string') {\n            const distinctValues = [...new Set(dataArray.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\n            return (\n                <Autocomplete\n                    multiple\n                    id={`${Field_Name}-filter`}\n                    options={distinctValues}\n                    disableCloseOnSelect\n                    getOptionLabel={option => option}\n                    value={filters[Field_Name] || []}\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\n                    renderOption={(props, option, { selected }) => (\n                        <li {...props}>\n                            <Checkbox\n                                icon={icon}\n                                checkedIcon={checkedIcon}\n                                style={{ marginRight: 8 }}\n                                checked={selected}\n                            />\n                            {option}\n                        </li>\n                    )}\n                    isOptionEqualToValue={(opt, val) => opt === val}\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            label={Field_Name}\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\n                        />\n                    )}\n                />\n            );\n        }\n    };\n\n    const ledgerAndTransactionExport = (excludeDetails, transactions) => {\n        const wb = XLSX.utils.book_new();\n\n        const excludeDetailsSheet = XLSX.utils.json_to_sheet(excludeDetails);\n        XLSX.utils.book_append_sheet(wb, excludeDetailsSheet, 'Sheet1');\n\n        const transactionsSheet = XLSX.utils.json_to_sheet(transactions);\n        XLSX.utils.book_append_sheet(wb, transactionsSheet, 'Sheet2');\n\n        XLSX.writeFile(wb, 'exported_data.xlsx');\n    };\n\n    const handleExportData = () => {\n        const dataForDownload = showData.map(row => {\n            const excludeDetails = Object.fromEntries(\n                Object.entries(row).filter(([key]) => key !== 'LedgerSales' && DisplayColumn.find(colKey => colKey === key))\n            );\n\n            return excludeDetails\n        })\n        const csv = generateCsv(csvConfig)(dataForDownload);\n        download(csvConfig)(csv);\n    };\n\n    useEffect(() => {\n        const dataToUse = (Object.keys(filters).length > 0) ? filteredData : dataArray;\n        setShowData(dataToUse);\n    }, [filters, dataArray, filteredData])\n\n    useEffect(() => {\n        setColumns(pre => pre.sort((a, b) => (a?.OrderBy && b?.OrderBy) ? a?.OrderBy - b?.OrderBy : b?.OrderBy - a?.OrderBy))\n    }, [columns])\n\n    return (\n        <Fragment>\n            <Button\n                variant=\"outlined\"\n                className=\"mb-2\"\n                onClick={handleExportData}\n                startIcon={<Download />}\n            >\n                Download Ledger Data\n            </Button>\n\n            <div className=\"row\">\n\n                <div className=\"col-xxl-10 col-lg-9 col-md-8\">\n                    <FilterableTable\n                        columns={[\n                            {\n                                Field_Name: \"Excel_Export\",\n                                Fied_Data: \"string\",\n                                isVisible: 1,\n                                OrderBy: 1,\n                                isCustomCell: true,\n                                Cell: ({ row }) => {\n                                    const excludeDetails = Object.fromEntries(\n                                        Object.entries(row).filter(([key]) => key !== 'LedgerSales' && DisplayColumn.find(colKey => colKey === key))\n                                    );\n                                    return (\n                                        <>\n                                            <IconButton\n                                                size=\"small\"\n                                                onClick={() => {\n                                                    ledgerAndTransactionExport([excludeDetails], row.LedgerSales);\n                                                }}\n                                            >\n                                                <Download />\n                                            </IconButton>\n                                        </>\n                                    )\n                                }\n                            },\n                            ...columns.map(col => (isEqualNumber(col.isVisible, 1)) && col),\n                        ]}\n                        dataArray={showData}\n                        isExpendable={true}\n                        expandableComp={({ row }) => {\n                            return (\n                                <FilterableTable\n                                    initialPageCount={15}\n                                    dataArray={Array.isArray(row.LedgerSales) ? row.LedgerSales : []}\n                                    columns={[\n                                        {\n                                            Field_Name: 'Stock_Group',\n                                            isVisible: 1,\n                                            Fied_Data: 'string',\n                                        },\n                                        {\n                                            Field_Name: 'bill_qty',\n                                            isVisible: 1,\n                                            Fied_Data: 'number',\n                                        },\n                                        {\n                                            Field_Name: 'M2_AVG_Qty',\n                                            isVisible: 1,\n                                            Fied_Data: 'number',\n                                        },\n                                        {\n                                            Field_Name: 'M3_AVG_Qty',\n                                            isVisible: 1,\n                                            Fied_Data: 'number',\n                                        },\n                                        {\n                                            Field_Name: 'M6_AVG_Qty',\n                                            isVisible: 1,\n                                            Fied_Data: 'number',\n                                        },\n                                        {\n                                            Field_Name: 'M9_AVG_Qty',\n                                            isVisible: 1,\n                                            Fied_Data: 'number',\n                                        },\n                                        {\n                                            Field_Name: 'One_Year_AVG_Qty',\n                                            isVisible: 1,\n                                            Fied_Data: 'number',\n                                        },\n                                    ]}\n                                />\n                            )\n                        }}\n                        tableMaxHeight={540}\n                    />\n                </div>\n                <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\n                    <h5 className=\"d-flex justify-content-between px-2\">\n                        <span>Filters</span>\n                        <span>\n                            <Tooltip title='Column Visiblity'>\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={() => setDialog(true)}\n                                >\n                                    <Settings />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title='Clear Filters'>\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={() => setFilters({})}\n                                >\n                                    <FilterAltOff />\n                                </IconButton>\n                            </Tooltip>\n                        </span>\n                    </h5>\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '58vh', overflow: 'auto' }}>\n                        {columns.map((column, ke) => (\n                            isEqualNumber(column.isVisible, 1)\n                            // && column.Field_Name !== 'M3_Avg'\n                            // && column.Field_Name !== 'M6_Avg'\n                            // && column.Field_Name !== 'M12_Avg'\n                            // && column.Field_Name !== 'Billed_Qty'\n                        ) && (\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\n                                    {renderFilter(column)}\n                                </div>\n                            ))}\n                        <br />\n                    </div>\n                </div>\n            </div>\n\n            <Dialog\n                open={filterDialog}\n                onClose={closeDialog}\n                maxWidth='sm' fullWidth\n            >\n                <DialogContent>\n                    <h5 className=\"d-flex justify-content-between px-2\">\n                        <span>Filters</span>\n                        <span>\n                            <Tooltip title='Column Visiblity'>\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={() => setDialog(true)}\n                                >\n                                    <Settings />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title='Clear Filters'>\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={() => setFilters({})}\n                                >\n                                    <FilterAltOff />\n                                </IconButton>\n                            </Tooltip>\n                        </span>\n                    </h5>\n                    <div className=\"border rounded-3 \" >\n                        {columns.map((column, ke) => (\n                            isEqualNumber(column.isVisible, 1)\n                            // && column.Field_Name !== 'M3_Avg'\n                            // && column.Field_Name !== 'M6_Avg'\n                            // && column.Field_Name !== 'M12_Avg'\n                            // && column.Field_Name !== 'Billed_Qty'\n                        ) && (\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\n                                    {renderFilter(column)}\n                                </div>\n                            ))}\n                        <br />\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color='error'>close</Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={dialog}\n                onClose={() => setDialog(false)}\n                maxWidth='lg' fullWidth\n            >\n                <DialogTitle>Column Settings</DialogTitle>\n                <DialogContent>\n                    <div className=\"row\">\n                        {columns.map((o, i) => (\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\n                                <Card\n                                    component={Paper}\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\n                                >\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\n                                        <Switch\n                                            checked={Boolean(o?.isDefault) || Boolean(o?.isVisible)}\n                                            disabled={Boolean(o?.isDefault)}\n                                            onChange={e =>\n                                                setColumns(prevColumns =>\n                                                    prevColumns.map(oo =>\n                                                        oo.Field_Name === o?.Field_Name\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\n                                                            : oo\n                                                    )\n                                                )}\n                                        />\n\n                                        <h6 className='fa-13 mb-0 fw-bold '>{o?.Field_Name}</h6>\n                                    </div>\n                                    <input\n                                        type='number'\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : ''}\n                                        onChange={e =>\n                                            setColumns(prevColumns =>\n                                                prevColumns.map(oo =>\n                                                    oo.Field_Name === o?.Field_Name\n                                                        ? { ...oo, OrderBy: e.target.value }\n                                                        : oo\n                                                )\n                                            )\n                                        }\n                                        label={'Order Value'}\n                                        className='mt-2 p-1 border-0 cus-inpt'\n                                        style={{ width: '80px' }}\n                                        placeholder='Order'\n                                    />\n                                </Card>\n                            </div>\n                        ))}\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setColumns(columnsInitialValue)} variant=\"outlined\">Reset</Button>\n                    <Button onClick={() => setDialog(false)} color='error'>close</Button>\n                </DialogActions>\n            </Dialog>\n        </Fragment>\n    )\n\n}\n\nexport default LedgerBasedSalesReport;","import { Fragment, useEffect, useState } from \"react\";\nimport FilterableTable from \"../../../Components/filterableTable2\";\nimport { calcTotal } from \"../../../Components/functions\";\n\nconst ProductBasedSalesReport = ({ dataArray }) => {\n    const [showData, setShowData] = useState([]);\n\n    useEffect(() => {\n        let temp = Array.isArray(dataArray) ? [...dataArray] : [];\n\n        const modifyCol = temp.map(o => ({\n            ...o,\n            M2_Avg: o.ALL_Avg_M2 ?? 0,\n            M3_Avg: o.ALL_Avg_M3 ?? 0,\n            M6_Avg: o.ALL_Avg_M6 ?? 0,\n            M9_Avg: o.ALL_Avg_M9 ?? 0,\n            M12_Avg: o.ALL_Avg_One_Year ?? 0,\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\n            StockTransaction: o.StockTransaction.map(st => ({\n                ...st,\n                M2_Avg: st.M2_AVG_Qty ?? 0,\n                M3_Avg: st.M3_AVG_Qty ?? 0,\n                M6_Avg: st.M6_AVG_Qty ?? 0,\n                M9_Avg: st.M9_AVG_Qty ?? 0,\n                M12_Avg: st.One_Year_AVG_Qty ?? 0,\n            }))\n        }));\n\n        const withQtySum = modifyCol.map(o => ({\n            ...o,\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\n        }));\n\n        setShowData(withQtySum)\n\n    }, [dataArray])\n\n    return (\n        <Fragment>\n            <FilterableTable\n                dataArray={showData}\n                isExpendable={true}\n                columns={[\n                    {\n                        Field_Name: 'Stock_Group',\n                        isVisible: 1,\n                        Fied_Data: 'string',\n                    },\n                    {\n                        Field_Name: 'Billed_Qty',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M2_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M3_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M6_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M9_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M12_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                ]}\n                expandableComp={({ row }) => {\n                    return (\n                        <FilterableTable\n                            initialPageCount={10}\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\n                            columns={[\n                                {\n                                    Field_Name: 'Item_Name_Modified',\n                                    isVisible: 1,\n                                    Fied_Data: 'string',\n                                },\n                                {\n                                    Field_Name: 'bill_qty',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M2_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M3_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M6_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M9_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M12_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                            ]}\n\n                        />\n                    )\n                }}\n                tableMaxHeight={540}\n            />\n        </Fragment>\n    )\n\n}\n\nexport default ProductBasedSalesReport;","import { Fragment, useEffect, useState } from \"react\";\nimport FilterableTable from \"../../../Components/filterableTable2\";\nimport { calcTotal, getDaysInPreviousMonths, Division } from \"../../../Components/functions\";\n\nconst ProductDayBasedSalesReport = ({ dataArray, days }) => {\n    const [showData, setShowData] = useState([]);\n\n    useEffect(() => {\n        let temp = Array.isArray(dataArray) ? [...dataArray] : [];\n\n        const modifyCol = temp.map(o => ({\n            ...o,\n            M2_Avg: Division(o.ALL_Avg_M2, (getDaysInPreviousMonths(2) / 2)) ?? 0,\n            M3_Avg: Division(o.ALL_Avg_M3, (getDaysInPreviousMonths(3) / 3)) ?? 0,\n            M6_Avg: Division(o.ALL_Avg_M6, (getDaysInPreviousMonths(6) / 6)) ?? 0,\n            M9_Avg: Division(o.ALL_Avg_M9, (getDaysInPreviousMonths(9) / 9)) ?? 0,\n            M12_Avg: Division(o.ALL_Avg_One_Year, (getDaysInPreviousMonths(12) / 12)) ?? 0,\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\n            Billed_Avg: calcTotal(o.StockTransaction, 'bill_qty') / days,\n            StockTransaction: o.StockTransaction.map(st => ({\n                ...st,\n                Grade_Item_Group: st.Item_Name_Modified,\n                M2_Avg: Division(st.M2_AVG_Qty, (getDaysInPreviousMonths(2) / 2)) ?? 0,\n                M3_Avg: Division(st.M3_AVG_Qty, (getDaysInPreviousMonths(3) / 3)) ?? 0,\n                M6_Avg: Division(st.M6_AVG_Qty, (getDaysInPreviousMonths(6) / 6)) ?? 0,\n                M9_Avg: Division(st.M9_AVG_Qty, (getDaysInPreviousMonths(9) / 9)) ?? 0,\n                M12_Avg: Division(st.One_Year_AVG_Qty, (getDaysInPreviousMonths(12) / 12)) ?? 0,\n            }))\n        }));\n\n        const withQtySum = modifyCol.map(o => ({\n            ...o,\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\n        }));\n\n        setShowData(withQtySum)\n\n    }, [dataArray])\n\n    return (\n        <Fragment>\n            <FilterableTable\n                dataArray={showData}\n                isExpendable={true}\n                columns={[\n                    {\n                        Field_Name: 'Stock_Group',\n                        isVisible: 1,\n                        Fied_Data: 'string',\n                    },\n                    {\n                        Field_Name: 'Billed_Qty',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'Billed_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M2_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M3_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M6_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M9_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M12_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                ]}\n                expandableComp={({ row }) => {\n                    return (\n                        <FilterableTable\n                            initialPageCount={10}\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\n                            columns={[\n                                {\n                                    Field_Name: 'Grade_Item_Group',\n                                    isVisible: 1,\n                                    Fied_Data: 'string',\n                                },\n                                {\n                                    Field_Name: 'bill_qty',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M2_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M3_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M6_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M9_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M12_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                            ]}\n\n                        />\n                    )\n                }}\n                tableMaxHeight={540}\n            />\n        </Fragment>\n    )\n\n}\n\nexport default ProductDayBasedSalesReport;","import React, { useEffect, useState, Fragment } from \"react\";\nimport { Card, CardContent, IconButton, Tooltip } from \"@mui/material\";\nimport { calcAvg, calcTotal, DaysBetween, getPreviousDate, isEqualNumber, ISOString } from \"../../Components/functions\";\nimport LedgerBasedSalesReport from './SalesReportComponent/LedgerBasedTable';\nimport ProductBasedSalesReport from \"./SalesReportComponent/ProductBasedTable\";\nimport ProductDayBasedSalesReport from \"./SalesReportComponent//ProductDayBasedTable\";\nimport { FilterAlt, Refresh } from \"@mui/icons-material\";\nimport { fetchLink } from \"../../Components/fetchComponent\";\n\n\nconst SalesReport = () => {\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\n    const [salesData, setSalesData] = useState(null);\n    const [salesDataOFProduct, setSalesDataOfProduct] = useState(null);\n    const [filters, setFilters] = useState({\n        Fromdate: getPreviousDate(1),\n        Todate: ISOString(),\n        ReportType: 'LedgerBased',\n        filterDialog: false,\n        reload: true\n    });\n\n    const fetchData = () => {\n        fetchLink({\n            address: `reports/salesReport/ledger?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\n            headers: {\n                'Db': storage?.Company_id\n            }\n        }).then(({ success, data, others }) => {\n            if (success) {\n                const { ledgerDetails } = others;\n                const combinedData = data.map(o => {\n                    const ledgerSales = ledgerDetails.filter(oo => isEqualNumber(o.Ledger_Tally_Id, oo.Ledger_Id));\n                    const billedQty = calcTotal(ledgerSales, 'bill_qty');\n                    return {\n                        ...o,\n                        LedgerSales: ledgerSales,\n                        Transaction: ledgerSales.length,\n                        Billed_Qty: billedQty,\n                        BilledQtyAvg: calcAvg(ledgerSales, 'bill_qty'),\n                        Ledger_Name: o.Ledger_Name,\n                        M2_Avg: o.ALL_Avg_M2,\n                        M3_Avg: o.ALL_Avg_M3,\n                        M6_Avg: o.ALL_Avg_M6,\n                        M9_Avg: o.ALL_Avg_M9,\n                        M12_Avg: o.ALL_Avg_One_Year,\n                        Q_Pay_Days: o.Q_Pay_Days,\n                        Freq_Days: o.Freq_Days,\n                        Ledger_Alias: o.Ledger_Alias,\n                        Actual_Party_Name_with_Brokers: o.Actual_Party_Name_with_Brokers,\n                        Party_Name: o.Party_Name,\n                        Party_Location: o.Party_Location,\n                        Party_Nature: o.Party_Nature,\n                        Party_Group: o.Party_Group,\n                        Ref_Brokers: o.Ref_Brokers,\n                        Ref_Owners: o.Ref_Owners,\n                        Party_Mobile_1: o.Party_Mobile_1,\n                        Party_Mobile_2: o.Party_Mobile_2,\n                        Party_District: o.Party_District,\n                        File_No: o.File_No,\n                        Ledger_Tally_Id: o.Ledger_Tally_Id\n                    };\n                });\n\n                setSalesData(combinedData);\n            } else {\n                setSalesData([]);\n            }\n        })\n        .catch(console.error);\n\n        fetchLink({\n            address: `reports/salesReport/products?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\n            headers: {\n                'Db': storage?.Company_id\n\n            }\n        }).then(data => {\n            if (data.success) {\n                const combinedData = Array.isArray(data?.others?.LOSAbstract) ? data.others.LOSAbstract.map(los => ({\n                    ...los,\n                    StockTransaction: Array.isArray(data.data) ? [...data.data].filter(losDetails => losDetails.Stock_Group === los.Stock_Group) : []\n                })) : [];\n                setSalesDataOfProduct(combinedData);\n            } else {\n                setSalesDataOfProduct([])\n            }\n        })\n        .catch(e => console.error(e))\n    }\n\n    useEffect(() => {\n        setSalesData(null);\n        setSalesDataOfProduct(null);\n        fetchData();\n    }, [filters.reload])\n\n    const closeDialog = () => {\n        setFilters(pre => ({ ...pre, filterDialog: false }))\n    }\n\n    const daysDifferent = DaysBetween(new Date(filters.Fromdate), new Date(filters.Todate));\n\n    return (\n        <Fragment>\n            <Card className=\"mt-3\">\n                <div className=\"px-3 py-2 d-flex justify-content-between align-items-center fw-bold text-dark\" style={{ backgroundColor: '#eae0cc' }}>\n                    <span>\n                        {storage?.Company_Name}\n                    </span>\n                    <span>\n                        <select\n                            value={filters.ReportType}\n                            className=\"cus-inpt ps-3 w-100 rounded-5 border-0\"\n                            onChange={e => setFilters(pre => ({ ...pre, ReportType: e.target.value }))}\n                        >\n                            <option value={'LedgerBased'}>Ledger Based</option>\n                            <option value={'ProductBased'}>Product Based</option>\n                            <option value={'ProductDayAverage'}>Product/Day Based</option>\n                        </select>\n                    </span>\n                </div>\n\n                <CardContent>\n\n                    <div className=\"mb-3\">\n                        <input\n                            type={'date'}\n                            className='cus-inpt w-auto ps-3 border rounded-5 me-1'\n                            value={filters.Fromdate}\n                            onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\n                        />\n\n                        <input\n                            type={'date'}\n                            className='cus-inpt w-auto ps-3 border rounded-5'\n                            value={filters.Todate}\n                            onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\n                        />\n\n                        <Tooltip title='Reload Data'>\n                            <IconButton\n                                onClick={() => setFilters(pre => ({ ...pre, reload: !pre.reload }))}\n                                size=\"small\"\n                                className=\"ms-2\"\n                            >\n                                <Refresh />\n                            </IconButton>\n                        </Tooltip>\n\n                        <Tooltip title=\"Filters\">\n                            <IconButton\n                                onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\n                                size=\"small\"\n                                className=\"d-md-none d-inline\"\n                            >\n                                <FilterAlt />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n\n                    {salesData === null && filters.ReportType === \"LedgerBased\" && (\n                        <h6 className=\"blue-text text-center\">Fetching Ledger Based data...</h6>\n                    )}\n\n                    {(salesDataOFProduct === null && (filters.ReportType === \"ProductBased\" || filters.ReportType === 'ProductDayAverage')) && (\n                        <h6 className=\"blue-text text-center\">Fetching Product Based data...</h6>\n                    )}\n\n                    {(filters.ReportType === \"LedgerBased\" && Array.isArray(salesData)) && (\n                        <LedgerBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesData} />\n                    )}\n\n                    {(filters.ReportType === \"ProductBased\" && Array.isArray(salesDataOFProduct)) && (\n                        <ProductBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} />\n                    )}\n\n                    {(filters.ReportType === \"ProductDayAverage\" && Array.isArray(salesDataOFProduct)) && (\n                        <ProductDayBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} days={daysDifferent} />\n                    )}\n                </CardContent>\n            </Card>\n        </Fragment>\n    )\n\n}\n\nexport default SalesReport;"],"names":["FilterableTable","_ref","dataArray","columns","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","columnAlign","type","class","columnVerticalAlign","sortedData","data","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","row","index","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","map","column","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Defult_Display","isVisible","Boolean","isCustomCell","Cell","align","find","String","toLowerCase","verticalAlign","Field_Name","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","key","value","console","log","Fied_Data","colSpan","Number","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","ColumnHeader","replace","concat","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","csvConfig","mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","columnsInitialValue","isDefault","OrderBy","filterDialog","closeDialog","filters","setFilters","showData","setShowData","filteredData","setFilteredData","dialog","setDialog","setColumns","DisplayColumn","filter","col","useEffect","applyFilters","handleFilterChange","prevFilters","filtered","min","max","item","start","end","dateValue","Date","isArray","_filters$column$Field","_item$column$Field_Na","includes","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","placeholder","onChange","e","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","selected","Checkbox","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","dataToUse","keys","Button","variant","handleExportData","dataForDownload","fromEntries","colKey","csv","generateCsv","download","startIcon","Download","_ref4","excludeDetails","_ref5","_Fragment","ledgerAndTransactionExport","transactions","wb","XLSX","book_new","excludeDetailsSheet","json_to_sheet","book_append_sheet","transactionsSheet","LedgerSales","_ref6","Tooltip","Settings","FilterAltOff","overflow","Dialog","onClose","maxWidth","fullWidth","DialogContent","DialogActions","color","DialogTitle","o","i","Card","Switch","disabled","prevColumns","oo","checkIsNumber","width","withQtySum","_o$ALL_Avg_M","_o$ALL_Avg_M2","_o$ALL_Avg_M3","_o$ALL_Avg_M4","_o$ALL_Avg_One_Year","M2_Avg","ALL_Avg_M2","M3_Avg","ALL_Avg_M3","M6_Avg","ALL_Avg_M6","M9_Avg","ALL_Avg_M9","M12_Avg","ALL_Avg_One_Year","Billed_Qty","calcTotal","StockTransaction","st","_st$M2_AVG_Qty","_st$M3_AVG_Qty","_st$M6_AVG_Qty","_st$M9_AVG_Qty","_st$One_Year_AVG_Qty","M2_AVG_Qty","M3_AVG_Qty","M6_AVG_Qty","M9_AVG_Qty","One_Year_AVG_Qty","days","_Division","_Division2","_Division3","_Division4","_Division5","Division","getDaysInPreviousMonths","Billed_Avg","_Division6","_Division7","_Division8","_Division9","_Division10","Grade_Item_Group","Item_Name_Modified","SalesReport","storage","JSON","parse","localStorage","getItem","salesData","setSalesData","salesDataOFProduct","setSalesDataOfProduct","Fromdate","getPreviousDate","Todate","ISOString","ReportType","reload","fetchLink","address","headers","Company_id","then","success","others","ledgerDetails","combinedData","ledgerSales","Ledger_Tally_Id","Ledger_Id","billedQty","Transaction","BilledQtyAvg","calcAvg","Ledger_Name","Q_Pay_Days","Freq_Days","Ledger_Alias","Actual_Party_Name_with_Brokers","Party_Name","Party_Location","Party_Nature","Party_Group","Ref_Brokers","Ref_Owners","Party_Mobile_1","Party_Mobile_2","Party_District","File_No","catch","error","_data$others","LOSAbstract","los","losDetails","Stock_Group","daysDifferent","DaysBetween","Company_Name","CardContent","Refresh","FilterAlt","LedgerBasedSalesReport","ProductBasedSalesReport","ProductDayBasedSalesReport"],"sourceRoot":""}