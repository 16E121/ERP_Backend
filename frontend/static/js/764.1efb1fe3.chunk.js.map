{"version":3,"file":"static/js/764.1efb1fe3.chunk.js","mappings":"qaAmDA,MAAMA,EAA0BA,CAACC,EAAMC,IAC5BD,EAAKE,KAAKC,IACb,MAAMC,EAAe,CAAC,EA2BtB,OAzBAH,EAAQI,SAAQ,CAACC,EAAQC,KACrB,GAAID,EAAOE,WAAaF,EAAOG,eAC3B,GAAIH,EAAOI,cAAgBJ,EAAOK,KAAM,CACpC,MAAMC,EAAcN,EAAOK,KAAK,CAAER,QAE5BU,EAAmBP,EAAOQ,aAC1BC,OAAOT,EAAOQ,cAAcE,QAAQ,OAAQ,KAAKC,cAAa,SAAAC,OACrDX,EAAQ,GAEI,kBAAhBK,GAAmD,kBAAhBA,GAAmD,kBAAhBA,IAC7ER,EAAaS,GAAoBD,EAOzC,KAAO,CAEH,IAAIO,EAAMb,EAAOc,WACjBhB,EAAae,GAAOhB,EAAIgB,IAAQ,EACpC,CACJ,IAGGf,CAAY,IA0CrBiB,EAAY,WAA+F,IAAjEP,EAAYQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC3D,MAAO,CACHd,UAAW,EACXY,WAHgBE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAInBG,UAJ2BH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,SAK9BI,MALgEJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OAMnEK,cANwFL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,YAOvFR,GAAgB,CAAEA,gBAE9B,EAYMc,EAAkBC,IAiBjB,IAjBkB,UACrBC,EAAY,GAAE,QACd7B,EAAU,GAAE,WACZ8B,EAAa,KAAI,aACjBC,GAAe,EAAK,eACpBC,EAAiB,KAAI,eACrBC,EAAiB,IAAG,iBACpBC,EAAmB,GAAE,mBACrBC,GAAqB,EAAK,SAC1BC,EAAW,QAAmB,kBAC9BC,GAAoB,EAAK,MACzBC,EAAQ,GAAE,eACVC,GAAiB,EAAK,iBACtBC,GAAmB,EAAK,gBACxBC,GAAkB,EAAK,WACvBC,EAAa,KAAI,YACjBC,EAAc,IACjBf,EAEG,MAAOgB,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAC1BC,EAAaC,IAAkBF,EAAAA,EAAAA,UAASZ,IACxCe,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,KAC1CK,EAAgBC,IAAqBN,EAAAA,EAAAA,WAAS,GAC/CO,EAAeF,GAAkBV,EAAmB,gBAAkBR,EAEtEqB,GAAc,CAChB,CACIC,KAAM,OACNC,MAAO,cACR,CACCD,KAAM,QACNC,MAAO,YACR,CACCD,KAAM,SACNC,MAAO,gBAITC,GAAsB,CACxB,CACIF,KAAM,MACNC,MAAO,UACR,CACCD,KAAM,SACNC,MAAO,aACR,CACCD,KAAM,SACNC,MAAO,WAkDTE,GAvBY3D,KACd,IAAKkD,EAAa3B,OAAQ,OAAOvB,EAmBjC,MAjBmB,IAAIA,GAAM4D,MAAK,CAACC,EAAGC,KAClC,IAAK,MAAMC,KAAYb,EAAc,CACjC,MAAM,SAAEc,EAAQ,UAAEC,GAAcF,EAC1BG,EAASL,EAAEG,GACXG,EAASL,EAAEE,GAEjB,GAAIE,IAAWC,EACX,MAAkB,QAAdF,EACOC,EAASC,EAAS,GAAK,EAEvBD,EAASC,EAAS,GAAK,CAG1C,CACA,OAAO,CAAC,GAGK,EAGFC,CAAStC,GACtBuC,GAAaxB,EAAOG,EACpBsB,GAAWD,GAAarB,EACxBuB,GAAgBZ,GAAWa,MAAMH,GAAYC,IAE7CG,GAAeA,CAACC,EAAKC,KACvB,OAAQA,GACJ,IAAK,SACD,OAAOC,EAAAA,EAAAA,IAAaF,GACxB,IAAK,OACD,OAAOG,EAAAA,EAAAA,IAAUH,GACrB,IAAK,OACD,OAAOI,EAAAA,EAAAA,IAAUJ,GACrB,IAAK,SACD,OAAOA,EACX,QACI,MAAO,GACf,EAGEK,GAAUC,IAAqB,IAApB,IAAE7E,EAAG,MAAEI,GAAOyE,EAC3B,MAAOC,EAAMC,IAAWnC,EAAAA,EAAAA,WAAS,GAC3BoC,EAAW,OAEjB,OACIC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACLF,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAAAD,SAAA,EAEc,IAAjBtD,GAAyBC,IACvBuD,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,oCAAmCJ,UACpDE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,KAAK,QAAQC,QAASA,IAAMX,GAAQY,IAAQA,IAAKR,SAAEL,GAAOO,EAAAA,EAAAA,KAACO,EAAAA,EAAe,CAACC,GAAI,CAAEb,eAAiBK,EAAAA,EAAAA,KAACS,EAAAA,EAAiB,CAACD,GAAI,CAAEb,mBAIvH,IAAvB/C,IACGoD,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,oCAAmCJ,SAAGtC,EAAcH,EAAQtC,EAAQ,IAGrF,OAAPN,QAAO,IAAPA,OAAO,EAAPA,EAASC,KAAI,CAACI,EAAQ4F,KAAS,IAAAC,EAAAC,EAAA,QAC5BC,EAAAA,EAAAA,IAAoB,OAAN/F,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAM4F,EAAAA,EAAAA,IAAoB,OAAN/F,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,OAEtC,IAAlC8F,QAAc,OAANhG,QAAM,IAANA,OAAM,EAANA,EAAQI,eAA4BJ,EAAOK,MAqBhD6E,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAENC,UAAW,qBACPpF,EAAOoB,MAAoF,QAA/EyE,EAAG5C,GAAYgD,MAAK7E,GAASA,EAAM8B,OAASzC,OAAOT,EAAOoB,OAAOT,uBAAc,IAAAkF,OAAA,EAA5EA,EAA8E1C,MAAQ,KAEjGnD,EAAOqB,cAA4G,QAA/FyE,EAAG1C,GAAoB6C,MAAK7E,GAASA,EAAM8B,OAASzC,OAAOT,EAAOqB,eAAeV,uBAAc,IAAAmF,OAAA,EAA5FA,EAA8F3C,MAAQ,UAC/H6B,SAELhF,EAAOK,KAAK,CAAER,MAAKiB,WAAYd,EAAOc,cAPlC8E,GArBTM,OAAOC,QAAQtG,GAAKD,KAAIwG,IAAA,IAAAC,EAAAC,EAAA,IAAEzF,EAAK0F,GAAMH,EAAA,OAE5BpG,EAAOc,aAAeD,KAEtBkF,EAAAA,EAAAA,IAAoB,OAAN/F,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAM4F,EAAAA,EAAAA,IAAoB,OAAN/F,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,MAE9EgF,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAENC,UAAW,qBACPpF,EAAOoB,MAAoF,QAA/EiF,EAAGpD,GAAYgD,MAAK7E,GAASA,EAAM8B,OAASzC,OAAOT,EAAOoB,OAAOT,uBAAc,IAAA0F,OAAA,EAA5EA,EAA8ElD,MAAQ,KAEjGnD,EAAOqB,cAA4G,QAA/FiF,EAAGlD,GAAoB6C,MAAK7E,GAASA,EAAM8B,OAASzC,OAAOT,EAAOqB,eAAeV,uBAAc,IAAA2F,OAAA,EAA5FA,EAA8FnD,MAAQ,UAErIoC,QAASA,IAAM9D,EAAaA,EAAW5B,GAAO2G,QAAQC,IAAI,yBAAyBzB,SAElFb,GAAaoC,EAAa,OAANvG,QAAM,IAANA,OAAM,EAANA,EAAQmB,YARxByE,EAUZ,IAcZ,QAKU,IAAjBlE,GAAyBC,GAAkBgD,IACzCO,EAAAA,EAAAA,KAACD,EAAAA,EAAQ,CAAAD,UACLE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACuB,QAASC,OAAc,OAAPhH,QAAO,IAAPA,OAAO,EAAPA,EAASsB,UAAkC,IAAvBa,EAA8B,EAAI,GAAGkD,SAAErD,EAAe,CAAE9B,MAAKI,gBAG7G,EAIb2G,GAAeA,KACjB,MAAOC,EAAUC,IAAerE,EAAAA,EAAAA,UAAS,MAEnCsE,EAAcf,QAAQa,GAU5B,OACI/B,EAAAA,EAAAA,MAAAkC,EAAAA,SAAA,CAAAhC,SAAA,EACIE,EAAAA,EAAAA,KAAC+B,EAAAA,EAAO,CAAChF,MAAM,6BAA4B+C,UACvCE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAAC,mBAAkB0B,EAAaxB,QAXlC2B,IACjBJ,EAAYI,EAAMC,cAAc,EAUyC/B,UAAU,OAAOE,KAAK,QAAON,UAC1FE,EAAAA,EAAAA,KAACkC,EAAAA,EAAQ,SAIjBlC,EAAAA,EAAAA,KAACmC,EAAAA,GAAO,CACJ1C,KAAMoC,EACNF,SAAUA,EACVS,QAfQC,KAChBT,EAAY,KAAK,EAeTU,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,QACd1C,UAEFF,EAAAA,EAAAA,MAAC8C,EAAAA,EAAQ,CAAA5C,SAAA,CAEJ5C,IACG0C,EAAAA,EAAAA,MAAC+C,EAAAA,EAAQ,CACLtC,QAASA,IAAMxC,GAAkByC,IAAQA,IACzCsC,UAAU/B,EAAAA,EAAAA,IAAuB,OAATvE,QAAS,IAATA,OAAS,EAATA,EAAWP,OAAQ,GAAG+D,SAAA,EAE9CE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAY,CAAA/C,SACRlC,GACKoC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAQ,CAACnD,SAAS,QAAQoD,MAAM,aACjC/C,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAACrD,SAAS,aAG9BK,EAAAA,EAAAA,KAACiD,EAAAA,EAAY,CACTF,MAAOnF,EAAiB,UAAY,GAAGkC,SAC1C,kBAIR9C,IACG4C,EAAAA,EAAAA,MAAC+C,EAAAA,EAAQ,CACLtC,QAASA,IA1SrB6C,EAAC5G,EAAW7B,KAC5B,IACI,MAAM0I,EAAM,IAAIC,EAAAA,QACVC,EAAgB9I,EAAwB+B,EAAW7B,GAEnD6I,EAAU7I,EACX8I,QAAQzI,GAAWA,EAAOE,WAAaF,EAAOG,iBAC9CP,KAAKI,GAAWA,EAAOc,YAAcL,OAAOT,EAAOQ,cAAcE,QAAQ,OAAQ,KAAKC,gBAErF+H,EAAOH,EAAc3I,KAAKC,GAC5B2I,EAAQ5I,KAAK+I,GAAW9I,EAAI8I,OAC9B/I,KAAI,CAACgJ,EAAGC,KAAC,IAAWD,EAAGE,IAAKD,EAAI,MAElCR,EAAIU,UAAU,CACVC,KAAM,CAACR,GACPS,KAAMP,IAGVL,EAAIa,KAAK,YACb,CAAE,MAAOC,GACL3C,QAAQ4C,MAAMD,EAClB,GAqR2Cf,CAAY5G,EAAW7B,GACtCmI,UAAU/B,EAAAA,EAAAA,IAAuB,OAATvE,QAAS,IAATA,OAAS,EAATA,EAAWP,OAAQ,GAAG+D,SAAA,EAE9CE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAY,CAAA/C,UAACE,EAAAA,EAAAA,KAACmE,EAAAA,EAAQ,CAACxE,SAAS,QAAQoD,MAAM,eAC/C/C,EAAAA,EAAAA,KAACiD,EAAAA,EAAY,CAAAnD,SAAC,oBAIrB7C,IACG2C,EAAAA,EAAAA,MAAC+C,EAAAA,EAAQ,CACLtC,QAASA,IA5RnB+D,EAAC9H,EAAW7B,KAC9B,IACI,MAAM4I,EAAgB9I,EAAwB+B,EAAW7B,GAEnD4J,EAAYC,EAAAA,GAAWC,cAAclB,GACrCmB,EAAWF,EAAAA,GAAWG,WAE5BH,EAAAA,GAAWI,kBAAkBF,EAAUH,EAAW,QAClDC,EAAAA,GAAeE,EAAU,aAC7B,CAAE,MAAOP,GACL3C,QAAQ4C,MAAMD,EAClB,GAiR2CG,CAAc9H,EAAW7B,GACxCmI,UAAU/B,EAAAA,EAAAA,IAAuB,OAATvE,QAAS,IAATA,OAAS,EAATA,EAAWP,OAAQ,GAAG+D,SAAA,EAE9CE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAY,CAAA/C,UAACE,EAAAA,EAAAA,KAACmE,EAAAA,EAAQ,CAACxE,SAAS,QAAQoD,MAAM,eAC/C/C,EAAAA,EAAAA,KAACiD,EAAAA,EAAY,CAAAnD,SAAC,sBAIrB1C,EAAY1C,KAAIiK,GA3QjB,SAACC,EAAMC,EAAMC,GAAO,IAAElC,EAAQ9G,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAQ,OAC1D8D,EAAAA,EAAAA,MAAC+C,EAAAA,EAAQ,CACLtC,QAASyE,EACTlC,SAAUA,EAAS9C,SAAA,EAEnBE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAY,CAAA/C,SAAE+E,KACf7E,EAAAA,EAAAA,KAACiD,EAAAA,EAAY,CAAAnD,SAAE8E,MACR,CAoQiCG,CAAgBJ,EAAIC,KAAMD,EAAIE,KAAMF,EAAIG,QAASH,EAAI/B,mBAItF,EAIX,OACIhD,EAAAA,EAAAA,MAAA,OAAKM,UAAU,qCAAoCJ,SAAA,EAC/CF,EAAAA,EAAAA,MAAA,OACIM,UAAU,kEAAiEJ,SAAA,EAezE9C,GAAkBC,GAAoBG,EAAYrB,OAAS,GAAKmB,KAAoB8C,EAAAA,EAAAA,KAAC0B,GAAY,IAClGvE,GAAcA,EACdJ,IAASiD,EAAAA,EAAAA,KAAA,MAAIE,UAAU,qCAAoCJ,SAAE/C,QAGlEiD,EAAAA,EAAAA,KAACgF,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAO1E,GAAI,CAAE2E,UAAWrH,GAAcgC,UAE7DF,EAAAA,EAAAA,MAACwF,EAAAA,EAAK,CAACC,cAAY,EAACjF,KAAMvD,EAASiD,SAAA,EAE/BE,EAAAA,EAAAA,KAACsF,EAAAA,EAAS,CAAAxF,UACNF,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAAAD,SAAA,CAEJtD,GAAgBC,IACbuD,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,kDAAkDqF,MAAO,CAAEC,gBAAiB,WAAY1F,SAAC,MAMjHlD,IACGoD,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,kDAAkDqF,MAAO,CAAEC,gBAAiB,WAAY1F,SAAC,QAMjHrF,EAAQC,KAAI,CAACI,EAAQ2K,KAClB,MAAMC,GAAkB7E,EAAAA,EAAAA,IAAoB,OAAN/F,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAM4F,EAAAA,EAAAA,IAAoB,OAAN/F,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,GAC/F2K,GAA+C,IAAlC7E,QAAc,OAANhG,QAAM,IAANA,OAAM,EAANA,EAAQI,gBAA4BJ,EAAOK,KAChEyK,EAAoBlI,EAAaqD,MAAKxC,GAAYA,EAASC,WAAa1D,EAAOc,aAC/EiK,EAAgBD,EAAoBA,EAAkBnH,UAAY,MAElD,IAADqH,EAAAC,EAAAC,EAAAC,EAArB,OAAIP,EACOC,GACH3F,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAENC,UAAW,wCACNpF,EAAOoB,MAAoF,QAA/E4J,EAAG/H,GAAYgD,MAAK7E,GAASA,EAAM8B,OAASzC,OAAOT,EAAOoB,OAAOT,uBAAc,IAAAqK,OAAA,EAA5EA,EAA8E7H,MAAQ,IAC1GsH,MAAO,CAAEC,gBAAiB,WAC1BK,gBAAeD,GAAoBC,EAAsB/F,UAEzDE,EAAAA,EAAAA,KAACkG,EAAAA,EAAc,CACXC,SAAUP,EACVnH,UAAWoH,EACXxF,QAASA,IA3Q1B7B,KACvB,MAAM4H,EAAmB1I,EAAaqD,MAAKxC,GAAYA,EAASC,WAAaA,IAC7E,GAAI4H,EAAkB,CAClB,MAAMC,EAAuC,QAA/BD,EAAiB3H,UAC/Bd,EAAgBD,EAAahD,KAAI6D,GAC7BA,EAASC,WAAaA,EAChB,IAAKD,EAAUE,UAAW4H,EAAQ,OAAS,OAC3C9H,IAEd,MACIZ,EAAgB,IAAID,EAAc,CAAEc,WAAUC,UAAW,QAC7D,EAgQuD6H,CAAkBxL,EAAOc,YAAYkE,SAEnDhF,EAAOQ,eAAsB,OAANR,QAAM,IAANA,GAAkB,QAAZiL,EAANjL,EAAQc,kBAAU,IAAAmK,OAAZ,EAANA,EAAoBvK,QAAQ,KAAM,SAXzDiK,IAeTzF,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAENC,UAAW,GAAAxE,OAAIZ,EAAOQ,cAAsB,OAANR,QAAM,IAANA,GAAAA,EAAQc,WAAc,oDAAsD,QAAO,MACpHd,EAAOoB,MAAoF,QAA/E8J,EAAGjI,GAAYgD,MAAK7E,GAASA,EAAM8B,OAASzC,OAAOT,EAAOoB,OAAOT,uBAAc,IAAAuK,OAAA,EAA5EA,EAA8E/H,MAAQ,IAC1GsH,MAAO,CAAEC,gBAAiB,WAAY1F,SAErChF,EAAOQ,eAAsB,OAANR,QAAM,IAANA,GAAkB,QAAZmL,EAANnL,EAAQc,kBAAU,IAAAqK,OAAZ,EAANA,EAAoBzK,QAAQ,KAAM,OALrDiK,GASV,IAAI,UAOvB7F,EAAAA,EAAAA,MAAC2G,EAAAA,EAAS,CAAAzG,SAAA,EACJhD,EAAoBqB,GAAaY,IAAerE,KAAI,CAACC,EAAKI,KACxDiF,EAAAA,EAAAA,KAACT,GAAO,CAAa5E,IAAKA,EAAKI,MAAOA,GAAxBA,KAEI,IAArBuB,EAAUP,SACPiE,EAAAA,EAAAA,KAACD,EAAAA,EAAQ,CAAAD,UACLE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACNuB,QACI/G,EAAQsB,SACW,IAAjBS,GAAyBC,EAAkB,EAAI,KACzB,IAAvBG,EAA8B,EAAI,GAEvC4D,GAAI,CAAEgG,UAAW,UAAW1G,SAC/B,uBAWnBhD,GAA8C,IAAzBiC,GAAchD,SACjCiE,EAAAA,EAAAA,KAAA,OACIE,UAAU,WAAUJ,UAEpBE,EAAAA,EAAAA,KAACyG,EAAAA,EAAe,CACZxB,UAAU,MACVyB,MAAOpK,EAAUP,OACjBsB,KAAMA,EACNsJ,aA3UKC,CAAC5E,EAAO6E,KAC7BvJ,EAAQuJ,EAAQ,EA2UArJ,YAAaA,EACbsJ,oBAzUa9E,IAC7BvE,EAAesJ,SAAS/E,EAAMgF,OAAO3F,MAAO,KAC5C/D,EAAQ,EAAE,EAwUM2J,mBAAoBC,MAAMC,KAAK,IAAIC,IAAI,CAACzK,EAAkB,EAAG,GAAI,GAAI,IAAK,IAAK,OAAOyB,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACzG+I,iBAAiB,gBACjBC,iBAAe,EACfC,gBAAc,QAKxB,EAgCdnL,EAAgBoL,aAAe,CAC3BlL,UAAW,GACX7B,QAAS,GACT8B,WAAY,KACZC,cAAc,EACdC,eAAgB,KAChBC,eAAgB,IAChBC,iBAAkB,GAClBC,oBAAoB,EACpBC,SAAU,QACVC,mBAAmB,EACnBC,WAAOf,EACPgB,gBAAgB,EAChBC,kBAAkB,EAClBC,iBAAiB,EACjBC,WAAY,KACZC,YAAa,IAGjB,S,sTCnkBA,MAAMqK,GAAYC,EAAAA,EAAAA,IAAS,CACvBC,eAAgB,IAChBC,iBAAkB,IAClBC,kBAAkB,IAGhBhD,GAAO7E,EAAAA,EAAAA,KAAC8H,EAAAA,EAAoB,CAACnI,SAAS,UACtCoI,GAAc/H,EAAAA,EAAAA,KAACgI,EAAAA,EAAQ,CAACrI,SAAS,UAiWvC,EA/VyBtD,IAA8E,IAA7E,UAAEC,EAAY,GAAE,QAAE7B,EAAU,GAAE,eAAEwN,EAAc,cAAEC,GAAgB,GAAO7L,EAC7F,MAAO8L,EAAWC,IAAgB7K,EAAAA,EAAAA,UAAS,KACpC8K,EAASC,IAAc/K,EAAAA,EAAAA,UAAS,CAAC,IACjCgL,EAAcC,IAAmBjL,EAAAA,EAAAA,UAASjB,GAE3CmM,EADczH,OAAO0H,KAAKL,GAAStM,OACT,EAAKwM,EAAejM,GAC7CqM,EAASC,IAAcrL,EAAAA,EAAAA,UAAS,CACnC8K,SAAS,EACTQ,gBAAgB,KAGpBC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAmBtO,EAAQC,KAAI,CAACgO,EAAM3N,KAAK,CAC7Ca,WAAgB,OAAJ8M,QAAI,IAAJA,OAAI,EAAJA,EAAMM,YAClB/M,UAAe,OAAJyM,QAAI,IAAJA,OAAI,EAAJA,EAAMO,UACjBjO,UAAWD,GAAS,EAAI,EAAI,EAC5BmB,MAAO,SACPgN,QAASnO,EAAQ,MAErBqN,EAAaW,EAAiB,GAC/B,CAACtO,IAEJ,MAAM0O,GAAgBC,EAAAA,EAAAA,UAAQ,IACnB,IAAIjB,GAAW/J,MAAK,CAACC,EAAGC,IAAMD,EAAE6K,QAAU5K,EAAE4K,WACpD,CAACf,KAEJW,EAAAA,EAAAA,YAAU,KACNO,GAAc,GACf,CAAChB,IAEJ,MAUMiB,EAAqBA,CAACxO,EAAQuG,KAChCiH,GAAWiB,IAAW,IACfA,EACH,CAACzO,GAASuG,KACX,EAGDgI,EAAeA,KACjB,IAAIG,EAAW,IAAIlN,GACnB,IAAK,MAAMxB,KAAUqN,EACjB,GAAIE,EAAQvN,EAAOc,YACf,GAAwC,UAApCyM,EAAQvN,EAAOc,YAAYoC,KAAkB,CAC7C,MAAM,IAAEyL,EAAG,IAAEC,GAAQrB,EAAQvN,EAAOc,YACpC4N,EAAWA,EAASjG,QAAOoG,IACvB,MAAMtI,EAAQsI,EAAK7O,EAAOc,YAC1B,YAAgBI,IAARyN,GAAqBpI,GAASoI,UAAiBzN,IAAR0N,GAAqBrI,GAASqI,EAAI,GAEzF,MAAO,GAAwC,SAApCrB,EAAQvN,EAAOc,YAAYoC,KAAiB,CACnD,MAAM,MAAE4L,EAAK,IAAEC,GAAQxB,EAAQvN,EAAOc,YAAYyF,MAClDmI,EAAWA,EAASjG,QAAOoG,IACvB,MAAMG,EAAY,IAAIC,KAAKJ,EAAK7O,EAAOc,aACvC,YAAkBI,IAAV4N,GAAuBE,GAAa,IAAIC,KAAKH,WAAoB5N,IAAR6N,GAAqBC,GAAa,IAAIC,KAAKF,GAAK,GAEzH,MAAO,GAAI3C,MAAM8C,QAAQ3B,EAAQvN,EAAOc,aAAc,CAAC,IAADqO,EAClDT,GAAqC,QAA1BS,EAAA5B,EAAQvN,EAAOc,mBAAW,IAAAqO,OAAA,EAA1BA,EAA4BlO,QAAS,EAAIyN,EAASjG,QAAOoG,GAAQtB,EAAQvN,EAAOc,YAAYsO,SAASP,EAAK7O,EAAOc,YAAYH,cAAc0O,UAAWX,CACrK,CAGRhB,EAAgBgB,EAAS,EAGvBY,EAAgBtP,IAClB,MAAM,WAAEc,EAAU,UAAEK,GAAcnB,EACL,IAADuP,EAAAC,EAAAC,EAAAC,EAmBKC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAnBjC,GAAkB,WAAd7O,EACA,OACI2D,EAAAA,EAAAA,MAAA,OAAKM,UAAU,sCAAqCJ,SAAA,EAChDE,EAAAA,EAAAA,KAAA,SACI+K,YAAY,MACZ/M,KAAK,SACLkC,UAAU,iCACVmB,MAA+B,QAA1BgJ,EAAqB,QAArBC,EAAEjC,EAAQzM,UAAW,IAAA0O,OAAA,EAAnBA,EAAqBb,WAAG,IAAAY,EAAAA,EAAI,GACnCW,SAAW/G,GAAMqF,EAAmB1N,EAAY,CAAEoC,KAAM,WAAYqK,EAAQzM,GAAa6N,IAAKxF,EAAE+C,OAAO3F,MAAQ4J,WAAWhH,EAAE+C,OAAO3F,YAASrF,OAEhJgE,EAAAA,EAAAA,KAAA,SACI+K,YAAY,MACZ/M,KAAK,SACLkC,UAAU,iCACVmB,MAA+B,QAA1BkJ,EAAqB,QAArBC,EAAEnC,EAAQzM,UAAW,IAAA4O,OAAA,EAAnBA,EAAqBd,WAAG,IAAAa,EAAAA,EAAI,GACnCS,SAAW/G,GAAMqF,EAAmB1N,EAAY,CAAEoC,KAAM,WAAYqK,EAAQzM,GAAa8N,IAAKzF,EAAE+C,OAAO3F,MAAQ4J,WAAWhH,EAAE+C,OAAO3F,YAASrF,SAIrJ,GAAkB,SAAdC,EACP,OACI2D,EAAAA,EAAAA,MAAA,OAAKM,UAAU,sCAAqCJ,SAAA,EAChDE,EAAAA,EAAAA,KAAA,SACI+K,YAAY,aACZ/M,KAAK,OACLkC,UAAU,iCACVmB,MAAwC,QAAnCoJ,EAAqB,QAArBC,EAAErC,EAAQzM,UAAW,IAAA8O,GAAO,QAAPC,EAAnBD,EAAqBrJ,aAAK,IAAAsJ,OAAP,EAAnBA,EAA4Bf,aAAK,IAAAa,EAAAA,EAAI,GAC5CO,SAAW/G,IAAC,IAAAiH,EAAA,OAAK5B,EAAmB1N,EAAY,CAAEoC,KAAM,OAAQqD,MAAO,IAAwB,QAAtB6J,EAAG7C,EAAQzM,UAAW,IAAAsP,OAAA,EAAnBA,EAAqB7J,MAAOuI,MAAO3F,EAAE+C,OAAO3F,YAASrF,IAAc,KAEnJgE,EAAAA,EAAAA,KAAA,SACI+K,YAAY,WACZ/M,KAAK,OACLkC,UAAU,iCACVmB,MAAsC,QAAjCuJ,EAAqB,QAArBC,EAAExC,EAAQzM,UAAW,IAAAiP,GAAO,QAAPC,EAAnBD,EAAqBxJ,aAAK,IAAAyJ,OAAP,EAAnBA,EAA4BjB,WAAG,IAAAe,EAAAA,EAAI,GAC1CI,SAAW/G,IAAC,IAAAkH,EAAA,OAAK7B,EAAmB1N,EAAY,CAAEoC,KAAM,OAAQqD,MAAO,IAAwB,QAAtB8J,EAAG9C,EAAQzM,UAAW,IAAAuP,OAAA,EAAnBA,EAAqB9J,MAAOwI,IAAK5F,EAAE+C,OAAO3F,YAASrF,IAAc,OAItJ,GAAkB,WAAdC,EAAwB,CAC/B,MAAMmP,EAAiB,IAAI,IAAIhE,IAAIqB,EAAS/N,KAAIiP,IAAI,IAAA0B,EAAAC,EAAA,OAAoB,QAApBD,EAAI1B,EAAK/N,UAAW,IAAAyP,GAAe,QAAfC,EAAhBD,EAAkB5P,qBAAa,IAAA6P,OAAf,EAAhBA,EAAiCnB,MAAM,MAC/F,OACInK,EAAAA,EAAAA,KAACuL,EAAAA,EAAY,CACTC,UAAQ,EACRC,GAAE,GAAA/P,OAAKE,EAAU,WACjB8P,QAASN,EACTO,sBAAoB,EACpBC,eAAgBC,GAAUA,EAC1BxK,MAAOgH,EAAQzM,IAAe,GAC9BoP,SAAUA,CAAChJ,EAAO8J,IAAaxC,EAAmB1N,EAAYkQ,GAC9DC,aAAcA,CAACC,EAAOH,EAAMrM,KAAA,IAAE,SAAEyM,GAAUzM,EAAA,OACtCI,EAAAA,EAAAA,MAAA,SAAQoM,EAAKlM,SAAA,EACTE,EAAAA,EAAAA,KAACkM,EAAAA,EAAQ,CACLrH,KAAMA,EACNkD,YAAaA,EACbxC,MAAO,CAAE4G,YAAa,GACtBC,QAASH,IAEZJ,IACA,EAETQ,qBAAsBA,CAACC,EAAKpN,IAAQoN,IAAQpN,EAC5CqN,YAAcC,IACVxM,EAAAA,EAAAA,KAACyM,EAAAA,EAAS,IACFD,EACJE,MAAO9Q,EACPmP,YAAW,UAAArP,OAAsB,OAAVE,QAAU,IAAVA,OAAU,EAAVA,EAAYJ,QAAQ,KAAM,SAKrE,GAGJ,OACIoE,EAAAA,EAAAA,MAAAkC,EAAAA,SAAA,CAAAhC,SAAA,EAEIF,EAAAA,EAAAA,MAAC+M,EAAAA,EAAG,CACAnM,GAAI,CACAoM,QAAS,OACTC,IAAK,OACLC,QAAS,MACTC,SAAU,QACZjN,SAAA,EAEFE,EAAAA,EAAAA,KAACgN,EAAAA,EAAM,CACH3M,QA3HS4M,KACrB,MAAMC,GAAMC,EAAAA,EAAAA,IAAY1F,EAAZ0F,CAAuB7Q,IACnC8Q,EAAAA,EAAAA,IAAS3F,EAAT2F,CAAoBF,EAAI,EA0HZG,WAAWrN,EAAAA,EAAAA,KAACsN,EAAAA,EAAY,IAAIxN,SAC/B,cAGDE,EAAAA,EAAAA,KAACgN,EAAAA,EAAM,CACHpK,SAAkC,IAAxB2F,EAAaxM,OACvBmE,UAAWgI,EAAgB,GAAK,SAChC7H,QAASA,IAxICmD,KACtB,MAAM0J,GAAMC,EAAAA,EAAAA,IAAY1F,EAAZ0F,CAAuB3J,IACnC4J,EAAAA,EAAAA,IAAS3F,EAAT2F,CAAoBF,EAAI,EAuIRK,CAAiBhF,GAErB8E,WAAWrN,EAAAA,EAAAA,KAACsN,EAAAA,EAAY,IAAIxN,SAC/B,mBAGDE,EAAAA,EAAAA,KAACgN,EAAAA,EAAM,CACH3M,QAASA,IAAMuI,GAAWtI,IAAG,IAAUA,EAAK+H,SAAS,MACrDnI,UAAWgI,EAAgB,qBAAuB,SAClDmF,WAAWrN,EAAAA,EAAAA,KAACwN,EAAAA,EAAS,IAAI1N,SAC5B,gBAKLF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,OAAMJ,SAAA,EAEjBE,EAAAA,EAAAA,KAAA,OAAKE,UAAWgI,EAAgB,+BAAiC,GAAGpI,UAChEE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,MAAKJ,UAChBE,EAAAA,EAAAA,KAAC5D,EAAAA,EAAe,CACZE,UAAWmM,EACXhO,QAAS0O,EACT3M,eAAcyL,EACdxL,eAAgBwL,QAAkCjM,EAClDU,eAAgB,UAK3BwL,IACGtI,EAAAA,EAAAA,MAAA,OAAKM,UAAU,gDAA+CJ,SAAA,EAC1DF,EAAAA,EAAAA,MAAA,MAAIM,UAAU,sCAAqCJ,SAAA,EAC/CE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,aACNF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAC+B,EAAAA,EAAO,CAAChF,MAAM,mBAAkB+C,UAC7BE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAMuI,GAAWtI,IAAG,IAAUA,EAAKuI,gBAAgB,MAAS/I,UAErEE,EAAAA,EAAAA,KAACyN,EAAAA,EAAQ,SAGjBzN,EAAAA,EAAAA,KAAC+B,EAAAA,EAAO,CAAChF,MAAM,gBAAe+C,UAC1BE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAMiI,EAAW,CAAC,GAAGxI,UAE9BE,EAAAA,EAAAA,KAAC0N,EAAAA,EAAY,eAK7B9N,EAAAA,EAAAA,MAAA,OAAKM,UAAU,oBAAoBqF,MAAO,CAAEJ,UAAW,OAAQwI,SAAU,QAAS7N,SAAA,CAC7EqI,EAAUzN,KAAI,CAACI,EAAQ2K,KAAE,IAAAM,EAAA,OACtBnG,EAAAA,EAAAA,MAAA,OAAcM,UAAU,iCAAgCJ,SAAA,EACpDE,EAAAA,EAAAA,KAAA,SAAOE,UAAU,YAAWJ,SAAQ,OAANhF,QAAM,IAANA,GAAkB,QAAZiL,EAANjL,EAAQc,kBAAU,IAAAmK,OAAZ,EAANA,EAAoBvK,QAAQ,KAAM,OAC/D4O,EAAatP,KAFR2K,EAGJ,KAEVzF,EAAAA,EAAAA,KAAA,mBAOhBJ,EAAAA,EAAAA,MAACgO,EAAAA,EAAM,CACHnO,KAAMkJ,EAAQN,QACdjG,QAASA,IAAMwG,GAAWtI,IAAG,IAAUA,EAAK+H,SAAS,MACrDwF,WAAS,EAACC,SAAS,KAAIhO,SAAA,EAEvBE,EAAAA,EAAAA,KAAC+N,EAAAA,EAAW,CAAAjO,UACRE,EAAAA,EAAAA,KAAA,QAAAF,UACIF,EAAAA,EAAAA,MAAA,MAAIM,UAAU,sCAAqCJ,SAAA,EAC/CE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,aACNF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAC+B,EAAAA,EAAO,CAAChF,MAAM,mBAAkB+C,UAC7BE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAMuI,GAAWtI,IAAG,IAAUA,EAAK+H,SAAS,MAAUvI,UAE/DE,EAAAA,EAAAA,KAACyN,EAAAA,EAAQ,SAGjBzN,EAAAA,EAAAA,KAAC+B,EAAAA,EAAO,CAAChF,MAAM,gBAAe+C,UAC1BE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAMiI,EAAW,CAAC,GAAGxI,UAE9BE,EAAAA,EAAAA,KAAC0N,EAAAA,EAAY,mBAOrC1N,EAAAA,EAAAA,KAACgO,EAAAA,EAAa,CAAAlO,UAEVF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,oBAAoBqF,MAAO,CAAEJ,UAAW,OAAQwI,SAAU,QAAS7N,SAAA,CAC7EqI,EAAUzN,KAAI,CAACI,EAAQ2K,KAAE,IAAAQ,EAAA,OACtBrG,EAAAA,EAAAA,MAAA,OAAcM,UAAU,iCAAgCJ,SAAA,EACpDE,EAAAA,EAAAA,KAAA,SAAOE,UAAU,YAAWJ,SAAQ,OAANhF,QAAM,IAANA,GAAkB,QAAZmL,EAANnL,EAAQc,kBAAU,IAAAqK,OAAZ,EAANA,EAAoBzK,QAAQ,KAAM,OAC/D4O,EAAatP,KAFR2K,EAGJ,KAEVzF,EAAAA,EAAAA,KAAA,eAIRA,EAAAA,EAAAA,KAACiO,EAAAA,EAAa,CAAAnO,UACVE,EAAAA,EAAAA,KAACgN,EAAAA,EAAM,CACH3M,QAASA,IAAMuI,GAAWtI,IAAG,IAAUA,EAAK+H,SAAS,MAAUvI,SAClE,gBAMTF,EAAAA,EAAAA,MAACgO,EAAAA,EAAM,CACHnO,KAAMkJ,EAAQE,eACdzG,QAASA,IAAMwG,GAAWtI,IAAG,IAAUA,EAAKuI,gBAAgB,MAC5DiF,SAAS,KAAKD,WAAS,EAAA/N,SAAA,EAEvBE,EAAAA,EAAAA,KAAC+N,EAAAA,EAAW,CAAAjO,SAAC,qBACbE,EAAAA,EAAAA,KAACgO,EAAAA,EAAa,CAAAlO,UACVE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,MAAKJ,SACfrF,EAAQC,KAAI,CAACgJ,EAAGC,KAEb,MAAMuK,EAAkB/F,EAAUpH,MAAKoN,GAAMA,EAAGvS,cAAgB,OAAD8H,QAAC,IAADA,OAAC,EAADA,EAAGsF,eAElE,OACIhJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,wBAAuBJ,UAClCF,EAAAA,EAAAA,MAACwO,EAAAA,EAAI,CACDnJ,UAAWC,EAAAA,EACXhF,UAAS,mEAAAxE,OAAqEiI,EAAI,IAAM,EAAI,WAAa,IAAK7D,SAAA,EAE9GF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,8DAA6DJ,SAAA,EACxEE,EAAAA,EAAAA,KAACqO,EAAAA,EAAM,CACHjC,QAAStL,QAAuB,OAAfoN,QAAe,IAAfA,OAAe,EAAfA,EAAiBlT,WAClCgQ,SAAU/G,GACNmE,GAAakG,GACTA,EAAY5T,KAAIyT,GACZA,EAAGvS,cAAgB,OAAD8H,QAAC,IAADA,OAAC,EAADA,EAAGsF,aACf,IAAKmF,EAAInT,UAAWiJ,EAAE+C,OAAOoF,QAAU,EAAI,GAC3C+B,SAKtBnO,EAAAA,EAAAA,KAAA,MAAIE,UAAU,sBAAqBJ,SAAG,OAAD4D,QAAC,IAADA,OAAC,EAADA,EAAGsF,kBAE5ChJ,EAAAA,EAAAA,KAAA,SACIhC,KAAK,SACLqD,OAAOkN,EAAAA,EAAAA,IAA6B,OAAfL,QAAe,IAAfA,OAAe,EAAfA,EAAiBhF,SAA0B,OAAfgF,QAAe,IAAfA,OAAe,EAAfA,EAAiBhF,QAAU,GAC5E8B,SAAU/G,GACNmE,GAAakG,GACTA,EAAY5T,KAAIyT,GACZA,EAAGvS,cAA8B,OAAfsS,QAAe,IAAfA,OAAe,EAAfA,EAAiBtS,YAC7B,IAAKuS,EAAIjF,QAASjF,EAAE+C,OAAO3F,OAC3B8M,MAIlBzB,MAAO,cACPxM,UAAU,6BACVqF,MAAO,CAAEiJ,MAAO,QAChBzD,YAAY,cAnCoBpH,EAsCtC,SAKtB3D,EAAAA,EAAAA,KAACiO,EAAAA,EAAa,CAAAnO,UAEVE,EAAAA,EAAAA,KAACgN,EAAAA,EAAM,CAAC3M,QAASA,IAAMuI,GAAWtI,IAAG,IAAUA,EAAKuI,gBAAgB,MAAW9F,MAAM,QAAOjD,SAAC,iBAGtG,C","sources":["Components/filterableTable2.jsx","Pages/Sales/SalesReportComponent/DataSetDisplay.jsx"],"sourcesContent":["import React, { Fragment, useRef, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton, Button, Popover, MenuList, MenuItem, ListItemIcon, ListItemText, Tooltip } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} name\r\n * @property {Element} icon\r\n * @property {Function} onclick\r\n * @property {boolean} disabled\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n * @param {boolean} [props.PDFPrintOption]\r\n * @param {boolean} [props.ExcelPrintOption]\r\n * @param {boolean} [props.maxHeightOption]\r\n * @param {React.ReactElement} [props.ButtonArea]\r\n * @param {Array<Menu>} props.MenuButtons\r\n */\r\n\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst createPopUpMenu = (name, icon, onclick, disabled = false) => (\r\n    <MenuItem\r\n        onClick={onclick}\r\n        disabled={disabled}\r\n    >\r\n        <ListItemIcon>{icon}</ListItemIcon>\r\n        <ListItemText>{name}</ListItemText>\r\n    </MenuItem>\r\n)\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = []\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                    column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                                )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                            column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                        )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const TableActions = () => {\r\n        const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n        const popOverOpen = Boolean(anchorEl);\r\n\r\n        const handleClick = (event) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Tooltip title='Export options and more...'>\r\n                    <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </Tooltip>\r\n\r\n                <Popover\r\n                    open={popOverOpen}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                >\r\n                    <MenuList>\r\n\r\n                        {maxHeightOption && (\r\n                            <MenuItem\r\n                                onClick={() => setShowFullHeight(pre => !pre)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    {showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />\r\n                                    }\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    color={showFullHeight ? 'success' : ''}\r\n                                >Max Height</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {PDFPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => generatePDF(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download PDF</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {ExcelPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => exportToExcel(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download Excel</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {MenuButtons.map(btn => createPopUpMenu(btn.name, btn.icon, btn.onclick, btn.disabled))}\r\n\r\n                    </MenuList>\r\n                </Popover>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='rounded-3 bg-white overflow-hidden'>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {/* {maxHeightOption && (\r\n                    <div>\r\n                        <label className=\"form-check-label p-1\" htmlFor=\"fullHeight\">Max Height</label>\r\n                        <input\r\n                            className=\"form-check-input shadow-none\"\r\n                            style={{ padding: '0.7em' }}\r\n                            type=\"checkbox\"\r\n                            id=\"fullHeight\"\r\n                            checked={showFullHeight}\r\n                            onChange={e => setShowFullHeight(e.target.checked)}\r\n                        />\r\n                    </div>\r\n                )} */}\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && <TableActions />}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: []\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    // createPopUpMenu,\r\n}","import React from 'react';\r\nimport { checkIsNumber } from '../../../Components/functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Paper, Box, Card, Switch } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, Settings } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport FilterableTable from '../../../Components/filterableTable2';\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DisplayArrayData = ({ dataArray = [], columns = [], ExpandableComp, enableFilters = false }) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        columnSettings: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        const colWithDataTypes = columns.map((keys, index) => ({\r\n            Field_Name: keys?.Column_Name,\r\n            Fied_Data: keys?.Data_Type,\r\n            isVisible: index <= 7 ? 1 : 0,\r\n            align: 'center',\r\n            OrderBy: index + 1\r\n        }))\r\n        setDispColmn(colWithDataTypes);\r\n    }, [columns])\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...dispColmn].sort((a, b) => a.OrderBy - b.OrderBy);\r\n    }, [dispColmn]);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleExportRows = (rows) => {\r\n        const csv = generateCsv(csvConfig)(rows);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleExportData = () => {\r\n        const csv = generateCsv(csvConfig)(dataArray);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of dispColmn) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(showData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={handleExportData}\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    All Data\r\n                </Button>\r\n                <Button\r\n                    disabled={filteredData.length === 0}\r\n                    className={enableFilters ? '' : 'd-none'}\r\n                    onClick={() =>\r\n                        handleExportRows(filteredData)\r\n                    }\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    Filtered Rows\r\n                </Button>\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className={enableFilters ? \"d-md-none d-inline\" : 'd-none'}\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n\r\n            <div className=\"row \">\r\n\r\n                <div className={enableFilters ? \"col-xxl-10 col-lg-9 col-md-8\" : ''}>\r\n                    <div className=\"p-2\">\r\n                        <FilterableTable\r\n                            dataArray={showData}\r\n                            columns={sortedColumns}\r\n                            isExpendable={ExpandableComp ? true : false}\r\n                            expandableComp={ExpandableComp ? ExpandableComp : undefined}\r\n                            tableMaxHeight={650}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {enableFilters && (\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, columnSettings: true }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                        <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                            {dispColmn.map((column, ke) => (\r\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                    {renderFilter(column)}\r\n                                </div>\r\n                            ))}\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <span>\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {dispColmn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.columnSettings}\r\n                onClose={() => setDialogs(pre => ({ ...pre, columnSettings: false }))}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => {\r\n\r\n                            const displayedColumn = dispColmn.find(oo => oo.Field_Name === o?.Column_Name)\r\n\r\n                            return (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                    <Card\r\n                                        component={Paper}\r\n                                        className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                    >\r\n                                        <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                            <Switch\r\n                                                checked={Boolean(displayedColumn?.isVisible)}\r\n                                                onChange={e =>\r\n                                                    setDispColmn(prevColumns =>\r\n                                                        prevColumns.map(oo =>\r\n                                                            oo.Field_Name === o?.Column_Name\r\n                                                                ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                                : oo\r\n                                                        )\r\n                                                    )}\r\n                                            />\r\n\r\n                                            <h6 className='fa-13 mb-0 fw-bold '>{o?.Column_Name}</h6>\r\n                                        </div>\r\n                                        <input\r\n                                            type='number'\r\n                                            value={checkIsNumber(displayedColumn?.OrderBy) ? displayedColumn?.OrderBy : ''}\r\n                                            onChange={e =>\r\n                                                setDispColmn(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === displayedColumn?.Field_Name\r\n                                                            ? { ...oo, OrderBy: e.target.value }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                            label={'Order Value'}\r\n                                            className='mt-2 p-1 border-0 cus-inpt'\r\n                                            style={{ width: '80px' }}\r\n                                            placeholder='Order'\r\n                                        />\r\n                                    </Card>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {/* <Button onClick={() => setColumns(columnsInitialValue)} variant=\"outlined\">Reset</Button> */}\r\n                    <Button onClick={() => setDialogs(pre => ({ ...pre, columnSettings: false }))} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayArrayData;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","FilterableTable","_ref","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Boolean","find","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","value","console","log","colSpan","Number","TableActions","anchorEl","setAnchorEl","popOverOpen","_Fragment","Tooltip","event","currentTarget","MoreVert","Popover","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","MenuItem","disabled","ListItemIcon","ToggleOn","color","ToggleOff","ListItemText","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","Download","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","btn","name","icon","onclick","createPopUpMenu","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","csvConfig","mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","CheckBoxOutlineBlank","checkedIcon","CheckBox","ExpandableComp","enableFilters","dispColmn","setDispColmn","filters","setFilters","filteredData","setFilteredData","showData","keys","dialogs","setDialogs","columnSettings","useEffect","colWithDataTypes","Column_Name","Data_Type","OrderBy","sortedColumns","useMemo","applyFilters","handleFilterChange","prevFilters","filtered","min","max","item","start","end","dateValue","Date","isArray","_filters$column$Field","includes","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","placeholder","onChange","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","selected","Checkbox","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","Box","display","gap","padding","flexWrap","Button","handleExportData","csv","generateCsv","download","startIcon","FileDownload","handleExportRows","FilterAlt","Settings","FilterAltOff","overflow","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","DialogActions","displayedColumn","oo","Card","Switch","prevColumns","checkIsNumber","width"],"sourceRoot":""}