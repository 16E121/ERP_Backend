{"version":3,"file":"static/js/6516.49441ff8.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Sales/SalesReportComponent/DataSetDisplay.jsx","Pages/Sales/SalesReportComponent/ProductBasedTable.jsx","Pages/Sales/SalesReportComponent/ProductDayBasedTable.jsx","Pages/Sales/LedgerTransaction.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = ''\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                            )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                        column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                    )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {title && <h6 className='fw-bold text-muted'>{title}</h6>}\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableMaxHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined\r\n};\r\n\r\n\r\nexport default FilterableTable;","import React from 'react';\r\nimport { checkIsNumber, LocalDate, NumberFormat } from '../../../Components/functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Paper, Box, Card, Switch } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, Settings } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport FilterableTable from '../../../Components/filterableTable2';\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DisplayArrayData = ({ dataArray = [], columns = [], ExpandableComp, enableFilters = false }) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        columnSettings: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        const colWithDataTypes = columns.map((keys, index) => ({\r\n            Field_Name: keys?.Column_Name,\r\n            Fied_Data: keys?.Data_Type,\r\n            isVisible: index <= 7 ? 1 : 0,\r\n            align: 'center',\r\n            OrderBy: index + 1\r\n        }))\r\n        setDispColmn(colWithDataTypes);\r\n    }, [columns])\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...dispColmn].sort((a, b) => a.OrderBy - b.OrderBy);\r\n    }, [dispColmn]);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleExportRows = (rows) => {\r\n        const csv = generateCsv(csvConfig)(rows);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleExportData = () => {\r\n        const csv = generateCsv(csvConfig)(dataArray);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of dispColmn) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(showData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={handleExportData}\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    All Data\r\n                </Button>\r\n                <Button\r\n                    disabled={filteredData.length === 0}\r\n                    className={enableFilters ? '' : 'd-none'}\r\n                    onClick={() =>\r\n                        handleExportRows(filteredData)\r\n                    }\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    Filtered Rows\r\n                </Button>\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className={enableFilters ? \"d-md-none d-inline\" : 'd-none'}\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n\r\n            <div className=\"row \">\r\n\r\n                <div className={enableFilters ? \"col-xxl-10 col-lg-9 col-md-8\" : ''}>\r\n                    <div className=\"p-2\">\r\n                        <FilterableTable\r\n                            dataArray={showData}\r\n                            columns={sortedColumns}\r\n                            isExpendable={ExpandableComp ? true : false}\r\n                            expandableComp={ExpandableComp ? ExpandableComp : undefined}\r\n                            tableMaxHeight={650}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {enableFilters && (\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, columnSettings: true }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                        <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                            {dispColmn.map((column, ke) => (\r\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                    {renderFilter(column)}\r\n                                </div>\r\n                            ))}\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <span>\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {dispColmn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.columnSettings}\r\n                onClose={() => setDialogs(pre => ({ ...pre, columnSettings: false }))}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => {\r\n\r\n                            const displayedColumn = dispColmn.find(oo => oo.Field_Name === o?.Column_Name)\r\n\r\n                            return (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                    <Card\r\n                                        component={Paper}\r\n                                        className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                    >\r\n                                        <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                            <Switch\r\n                                                checked={Boolean(displayedColumn?.isVisible)}\r\n                                                onChange={e =>\r\n                                                    setDispColmn(prevColumns =>\r\n                                                        prevColumns.map(oo =>\r\n                                                            oo.Field_Name === o?.Column_Name\r\n                                                                ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                                : oo\r\n                                                        )\r\n                                                    )}\r\n                                            />\r\n\r\n                                            <h6 className='fa-13 mb-0 fw-bold '>{o?.Column_Name}</h6>\r\n                                        </div>\r\n                                        <input\r\n                                            type='number'\r\n                                            value={checkIsNumber(displayedColumn?.OrderBy) ? displayedColumn?.OrderBy : ''}\r\n                                            onChange={e =>\r\n                                                setDispColmn(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === displayedColumn?.Field_Name\r\n                                                            ? { ...oo, OrderBy: e.target.value }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                            label={'Order Value'}\r\n                                            className='mt-2 p-1 border-0 cus-inpt'\r\n                                            style={{ width: '80px' }}\r\n                                            placeholder='Order'\r\n                                        />\r\n                                    </Card>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {/* <Button onClick={() => setColumns(columnsInitialValue)} variant=\"outlined\">Reset</Button> */}\r\n                    <Button onClick={() => setDialogs(pre => ({ ...pre, columnSettings: false }))} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayArrayData;","import { Fragment, useEffect, useState } from \"react\";\nimport FilterableTable from \"../../../Components/filterableTable2\";\nimport { calcTotal } from \"../../../Components/functions\";\n\nconst ProductBasedSalesReport = ({ dataArray }) => {\n    const [showData, setShowData] = useState([]);\n\n    useEffect(() => {\n        let temp = Array.isArray(dataArray) ? [...dataArray] : [];\n\n        const modifyCol = temp.map(o => ({\n            ...o,\n            M2_Avg: o.ALL_Avg_M2 ?? 0,\n            M3_Avg: o.ALL_Avg_M3 ?? 0,\n            M6_Avg: o.ALL_Avg_M6 ?? 0,\n            M9_Avg: o.ALL_Avg_M9 ?? 0,\n            M12_Avg: o.ALL_Avg_One_Year ?? 0,\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\n            StockTransaction: o.StockTransaction.map(st => ({\n                ...st,\n                M2_Avg: st.M2_AVG_Qty ?? 0,\n                M3_Avg: st.M3_AVG_Qty ?? 0,\n                M6_Avg: st.M6_AVG_Qty ?? 0,\n                M9_Avg: st.M9_AVG_Qty ?? 0,\n                M12_Avg: st.One_Year_AVG_Qty ?? 0,\n            }))\n        }));\n\n        const withQtySum = modifyCol.map(o => ({\n            ...o,\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\n        }));\n\n        setShowData(withQtySum)\n\n    }, [dataArray])\n\n    return (\n        <Fragment>\n            <FilterableTable\n                dataArray={showData}\n                isExpendable={true}\n                columns={[\n                    {\n                        Field_Name: 'Stock_Group',\n                        isVisible: 1,\n                        Fied_Data: 'string',\n                    },\n                    {\n                        Field_Name: 'Billed_Qty',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M2_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M3_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M6_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M9_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M12_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                ]}\n                expandableComp={({ row }) => {\n                    return (\n                        <FilterableTable\n                            initialPageCount={10}\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\n                            columns={[\n                                {\n                                    Field_Name: 'Item_Name_Modified',\n                                    isVisible: 1,\n                                    Fied_Data: 'string',\n                                },\n                                {\n                                    Field_Name: 'bill_qty',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M2_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M3_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M6_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M9_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M12_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                            ]}\n\n                        />\n                    )\n                }}\n                tableMaxHeight={540}\n            />\n        </Fragment>\n    )\n\n}\n\nexport default ProductBasedSalesReport;","import { Fragment, useEffect, useState } from \"react\";\nimport FilterableTable from \"../../../Components/filterableTable2\";\nimport { calcTotal, getDaysInPreviousMonths, Division } from \"../../../Components/functions\";\n\nconst ProductDayBasedSalesReport = ({ dataArray, days }) => {\n    const [showData, setShowData] = useState([]);\n\n    useEffect(() => {\n        let temp = Array.isArray(dataArray) ? [...dataArray] : [];\n\n        const modifyCol = temp.map(o => ({\n            ...o,\n            M2_Avg: Division(o.ALL_Avg_M2, (getDaysInPreviousMonths(2) / 2)) ?? 0,\n            M3_Avg: Division(o.ALL_Avg_M3, (getDaysInPreviousMonths(3) / 3)) ?? 0,\n            M6_Avg: Division(o.ALL_Avg_M6, (getDaysInPreviousMonths(6) / 6)) ?? 0,\n            M9_Avg: Division(o.ALL_Avg_M9, (getDaysInPreviousMonths(9) / 9)) ?? 0,\n            M12_Avg: Division(o.ALL_Avg_One_Year, (getDaysInPreviousMonths(12) / 12)) ?? 0,\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\n            Billed_Avg: calcTotal(o.StockTransaction, 'bill_qty') / days,\n            StockTransaction: o.StockTransaction.map(st => ({\n                ...st,\n                Grade_Item_Group: st.Item_Name_Modified,\n                M2_Avg: Division(st.M2_AVG_Qty, (getDaysInPreviousMonths(2) / 2)) ?? 0,\n                M3_Avg: Division(st.M3_AVG_Qty, (getDaysInPreviousMonths(3) / 3)) ?? 0,\n                M6_Avg: Division(st.M6_AVG_Qty, (getDaysInPreviousMonths(6) / 6)) ?? 0,\n                M9_Avg: Division(st.M9_AVG_Qty, (getDaysInPreviousMonths(9) / 9)) ?? 0,\n                M12_Avg: Division(st.One_Year_AVG_Qty, (getDaysInPreviousMonths(12) / 12)) ?? 0,\n            }))\n        }));\n\n        const withQtySum = modifyCol.map(o => ({\n            ...o,\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\n        }));\n\n        setShowData(withQtySum)\n\n    }, [dataArray])\n\n    return (\n        <Fragment>\n            <FilterableTable\n                dataArray={showData}\n                isExpendable={true}\n                columns={[\n                    {\n                        Field_Name: 'Stock_Group',\n                        isVisible: 1,\n                        Fied_Data: 'string',\n                    },\n                    {\n                        Field_Name: 'Billed_Qty',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'Billed_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M2_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M3_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M6_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M9_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                    {\n                        Field_Name: 'M12_Avg',\n                        isVisible: 1,\n                        Fied_Data: 'number',\n                    },\n                ]}\n                expandableComp={({ row }) => {\n                    return (\n                        <FilterableTable\n                            initialPageCount={10}\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\n                            columns={[\n                                {\n                                    Field_Name: 'Grade_Item_Group',\n                                    isVisible: 1,\n                                    Fied_Data: 'string',\n                                },\n                                {\n                                    Field_Name: 'bill_qty',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M2_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M3_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M6_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M9_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                                {\n                                    Field_Name: 'M12_Avg',\n                                    isVisible: 1,\n                                    Fied_Data: 'number',\n                                },\n                            ]}\n\n                        />\n                    )\n                }}\n                tableMaxHeight={540}\n            />\n        </Fragment>\n    )\n\n}\n\nexport default ProductDayBasedSalesReport;","import React, { useEffect, useState, Fragment } from \"react\";\nimport { Card, CardContent, IconButton, Tooltip } from \"@mui/material\";\nimport { DaysBetween, getPreviousDate, ISOString } from \"../../Components/functions\";\n// import LedgerBasedSalesReport from './SalesReportComponent/LedgerBasedTable';\nimport DisplayArrayData from './SalesReportComponent/DataSetDisplay'\nimport ProductBasedSalesReport from \"./SalesReportComponent/ProductBasedTable\";\nimport ProductDayBasedSalesReport from \"./SalesReportComponent//ProductDayBasedTable\";\nimport { FilterAlt, Refresh } from \"@mui/icons-material\";\nimport { fetchLink } from \"../../Components/fetchComponent\";\n\n\nconst LedgerDetails = ({ row, Fromdate, Todate, DB }) => {\n    const [salesData, setSalesData] = useState([]);\n    const [dataTypes, setDataTypes] = useState([]);\n\n    useEffect(() => {\n        fetchLink({\n            address: `reports/salesReport/ledger/itemDetails?Fromdate=${Fromdate}&Todate=${Todate}&Ledger_Id=${row?.Ledger_Tally_Id}`,\n            headers: {\n                'Db': DB\n            }\n        }).then(({ success, data, others }) => {\n            if (success) {\n                const { dataTypeInfo } = others;\n                setSalesData(data);\n                setDataTypes(pre => ({...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : []}))\n            } else {\n                setSalesData([]);\n            }\n        })\n        .catch(console.error);\n    }, [row?.Ledger_Tally_Id, Fromdate, Todate])\n\n    return (\n        <DisplayArrayData dataArray={salesData} columns={dataTypes.salesInfo} />\n    )\n}\n\n\nconst SalesReport = () => {\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\n    const [salesData, setSalesData] = useState(null);\n    const [dataTypes, setDataTypes] = useState({\n        salesInfo: [],\n        salesItemInfo: [],\n    })\n    const [salesDataOFProduct, setSalesDataOfProduct] = useState(null);\n    const [filters, setFilters] = useState({\n        Fromdate: getPreviousDate(1),\n        Todate: ISOString(),\n        ReportType: 'LedgerBased',\n        filterDialog: false,\n        reload: true\n    });\n\n    const fetchData = () => {\n        fetchLink({\n            address: `reports/salesReport/ledger?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\n            headers: {\n                'Db': storage?.Company_id\n            }\n        }).then(({ success, data, others }) => {\n            if (success) {\n                const { dataTypeInfo } = others;\n                setSalesData(data);\n                setDataTypes(pre => ({...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : []}))\n            } else {\n                setSalesData([]);\n            }\n        })\n        .catch(console.error);\n\n        fetchLink({\n            address: `reports/salesReport/products?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\n            headers: {\n                'Db': storage?.Company_id\n            }\n        }).then(data => {\n            if (data.success) {\n                const { dataTypeInfo } = data?.others;\n\n                const combinedData = Array.isArray(data?.others?.LOSAbstract) ? data.others.LOSAbstract.map(los => ({\n                    ...los,\n                    StockTransaction: Array.isArray(data.data) ? [...data.data].filter(losDetails => losDetails.Stock_Group === los.Stock_Group) : []\n                })) : [];\n\n                setDataTypes(pre => ({...pre, salesItemInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : []}))\n                setSalesDataOfProduct(combinedData);\n            } else {\n                setSalesDataOfProduct([])\n            }\n        })\n        .catch(e => console.error(e))\n    }\n\n    useEffect(() => {\n        setSalesData(null);\n        setSalesDataOfProduct(null);\n        setDataTypes({\n            salesInfo: [],\n            salesItemInfo: [],\n        })\n        fetchData();\n    }, [filters.reload])\n\n    const closeDialog = () => {\n        setFilters(pre => ({ ...pre, filterDialog: false }))\n    }\n\n    const daysDifferent = DaysBetween(new Date(filters.Fromdate), new Date(filters.Todate));\n\n    return (\n        <Fragment>\n            <Card className=\"mt-3\">\n                <div className=\"px-3 py-2 d-flex justify-content-between align-items-center fw-bold text-dark\" style={{ backgroundColor: '#eae0cc' }}>\n                    <span>\n                        {storage?.Company_Name}\n                    </span>\n                    <span>\n                        <select\n                            value={filters.ReportType}\n                            className=\"cus-inpt ps-3 w-100 rounded-5 border-0\"\n                            onChange={e => setFilters(pre => ({ ...pre, ReportType: e.target.value }))}\n                        >\n                            <option value={'LedgerBased'}>Ledger Based</option>\n                            <option value={'ProductBased'}>Product Based</option>\n                            <option value={'ProductDayAverage'}>Product/Day Based</option>\n                        </select>\n                    </span>\n                </div>\n\n                <CardContent>\n\n                    <div className=\"mb-3\">\n                        <input\n                            type={'date'}\n                            className='cus-inpt w-auto ps-3 border rounded-5 me-1'\n                            value={filters.Fromdate}\n                            onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\n                        />\n\n                        <input\n                            type={'date'}\n                            className='cus-inpt w-auto ps-3 border rounded-5'\n                            value={filters.Todate}\n                            onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\n                        />\n\n                        <Tooltip title='Reload Data'>\n                            <IconButton\n                                onClick={() => setFilters(pre => ({ ...pre, reload: !pre.reload }))}\n                                size=\"small\"\n                                className=\"ms-2\"\n                            >\n                                <Refresh />\n                            </IconButton>\n                        </Tooltip>\n\n                        <Tooltip title=\"Filters\">\n                            <IconButton\n                                onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\n                                size=\"small\"\n                                className=\"d-md-none d-inline\"\n                            >\n                                <FilterAlt />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n\n                    {salesData === null && filters.ReportType === \"LedgerBased\" && (\n                        <h6 className=\"blue-text text-center\">Fetching Ledger Based data...</h6>\n                    )}\n\n                    {(salesDataOFProduct === null && (filters.ReportType === \"ProductBased\" || filters.ReportType === 'ProductDayAverage')) && (\n                        <h6 className=\"blue-text text-center\">Fetching Product Based data...</h6>\n                    )}\n\n                    {(filters.ReportType === \"LedgerBased\" && Array.isArray(salesData)) && (\n                        // <LedgerBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesData} />\n                        <DisplayArrayData \n                            dataArray={salesData} \n                            columns={dataTypes.salesInfo} \n                            ExpandableComp={({ row }) => (\n                                <LedgerDetails \n                                    row={row} \n                                    DB={storage?.Company_id} \n                                    Fromdate={filters?.Fromdate} \n                                    Todate={filters?.Todate} \n                                />\n                            )}\n                            enableFilters={true} \n                        />\n                    )}\n\n                    {(filters.ReportType === \"ProductBased\" && Array.isArray(salesDataOFProduct)) && (\n                        <ProductBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} />\n                    )}\n\n                    {(filters.ReportType === \"ProductDayAverage\" && Array.isArray(salesDataOFProduct)) && (\n                        <ProductDayBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} days={daysDifferent} />\n                    )}\n                </CardContent>\n            </Card>\n        </Fragment>\n    )\n\n}\n\nexport default SalesReport;"],"names":["FilterableTable","_ref","dataArray","columns","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","columnAlign","type","class","columnVerticalAlign","sortedData","data","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","row","index","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","map","column","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Defult_Display","isVisible","Boolean","isCustomCell","Cell","align","find","String","toLowerCase","verticalAlign","Field_Name","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","key","value","console","log","Fied_Data","colSpan","Number","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","ColumnHeader","replace","concat","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","csvConfig","mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","ExpandableComp","enableFilters","dispColmn","setDispColmn","filters","setFilters","filteredData","setFilteredData","showData","keys","dialogs","setDialogs","columnSettings","useEffect","colWithDataTypes","Column_Name","Data_Type","OrderBy","sortedColumns","useMemo","applyFilters","handleFilterChange","prevFilters","filtered","min","max","filter","item","start","end","dateValue","Date","isArray","_filters$column$Field","includes","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","placeholder","onChange","e","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","selected","Checkbox","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","_Fragment","Box","display","gap","padding","flexWrap","Button","handleExportData","csv","generateCsv","download","startIcon","FileDownload","disabled","rows","handleExportRows","FilterAlt","Tooltip","Settings","FilterAltOff","overflow","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","DialogActions","o","i","displayedColumn","oo","Card","Switch","prevColumns","checkIsNumber","width","color","setShowData","withQtySum","_o$ALL_Avg_M","_o$ALL_Avg_M2","_o$ALL_Avg_M3","_o$ALL_Avg_M4","_o$ALL_Avg_One_Year","M2_Avg","ALL_Avg_M2","M3_Avg","ALL_Avg_M3","M6_Avg","ALL_Avg_M6","M9_Avg","ALL_Avg_M9","M12_Avg","ALL_Avg_One_Year","Billed_Qty","calcTotal","StockTransaction","st","_st$M2_AVG_Qty","_st$M3_AVG_Qty","_st$M6_AVG_Qty","_st$M9_AVG_Qty","_st$One_Year_AVG_Qty","M2_AVG_Qty","M3_AVG_Qty","M6_AVG_Qty","M9_AVG_Qty","One_Year_AVG_Qty","days","_Division","_Division2","_Division3","_Division4","_Division5","Division","getDaysInPreviousMonths","Billed_Avg","_Division6","_Division7","_Division8","_Division9","_Division10","Grade_Item_Group","Item_Name_Modified","LedgerDetails","Fromdate","Todate","DB","salesData","setSalesData","dataTypes","setDataTypes","fetchLink","address","Ledger_Tally_Id","headers","then","success","others","dataTypeInfo","salesInfo","catch","error","DisplayArrayData","SalesReport","storage","JSON","parse","localStorage","getItem","salesItemInfo","salesDataOFProduct","setSalesDataOfProduct","getPreviousDate","ISOString","ReportType","filterDialog","reload","Company_id","_data$others","combinedData","LOSAbstract","los","losDetails","Stock_Group","closeDialog","daysDifferent","DaysBetween","Company_Name","CardContent","Refresh","_ref4","ProductBasedSalesReport","ProductDayBasedSalesReport"],"sourceRoot":""}