{"version":3,"file":"static/js/8476.ebd20adc.chunk.js","mappings":"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","sources":["Pages/Authorization/menuMangaement.jsx","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { checkIsNumber, isEqualNumber } from '../../Components/functions';\r\nimport { Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { Edit, KeyboardArrowDown, KeyboardArrowUp } from \"@mui/icons-material\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst menuInitialValue = {\r\n    Id: '',\r\n    MenuName: '',\r\n    PageUrl: '',\r\n    ParentId: 0,\r\n    isActive: 1,\r\n    OrderNo: 1,\r\n    menuType: 'MainMenu',\r\n}\r\n\r\nconst MenuManagement = () => {\r\n    const [menuData, setMenuData] = useState([]);\r\n    const [reload, setReload] = useState(false);\r\n    const [inputValue, setInputValue] = useState(menuInitialValue);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `authorization/menuMaster`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const sorted = data?.data?.sort((a, b) => (a.OrderNo && b.OrderNo) ? a.OrderNo - b.OrderNo : b.OrderNo - a.OrderNo)\r\n                setMenuData(sorted);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [reload])\r\n\r\n    const closeDialog = () => {\r\n        setInputValue(menuInitialValue);\r\n        setDialog(false);\r\n        setIsLoading(false)\r\n    }\r\n\r\n    const saveData = () => {\r\n        setIsLoading(true)\r\n        fetchLink({\r\n            address: `authorization/menuMaster`,\r\n            method: checkIsNumber(inputValue.Id) ? 'PUT' : 'POST',\r\n            bodyData: inputValue\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                setReload(pre => !pre)\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e)).finally(closeDialog)\r\n    }\r\n\r\n    const RowComp = ({ o, i }) => {\r\n        const [open, setOpen] = useState(false);\r\n\r\n        return (\r\n            <>\r\n                <tr>\r\n                    <td className=\"fa-13 border text-center\">\r\n                        {Number(o?.SubMenu?.length) !== 0 && (\r\n                            <IconButton size=\"small\" className=\"p-1\" onClick={() => setOpen(pre => !pre)} >\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize: '18px' }} /> : <KeyboardArrowDown sx={{ fontSize: '18px' }} />}\r\n                            </IconButton>\r\n                        )}\r\n                    </td>\r\n                    <td className=\"fa-13 border text-center\">{i + 1}</td>\r\n                    <td className=\"fa-13 border\">{o?.MenuName}</td>\r\n                    <td className=\"fa-13 border\">{o?.PageUrl}</td>\r\n                    <td className=\"fa-13 border text-center\">{o.OrderNo ?? '-'}</td>\r\n                    <td className=\"fa-12  border text-center\">\r\n                        {isEqualNumber(o?.Active, 1) ? (\r\n                            <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                        ) : (\r\n                            <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">In-Active</span>\r\n                        )}\r\n                    </td>\r\n                    <td className=\"fa-13 border text-center\">\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            className=\"p-1\"\r\n                            onClick={() => {\r\n                                setInputValue(pre => ({\r\n                                    ...pre,\r\n                                    Id: o.Id,\r\n                                    MenuName: o.MenuName,\r\n                                    PageUrl: o.PageUrl,\r\n                                    isActive: o.Active,\r\n                                    OrderNo: Number(o.OrderNo),\r\n                                    ParentId: '',\r\n                                    menuType: 'MainMenu',\r\n                                }));\r\n                                setDialog(true);\r\n                            }}\r\n                        >\r\n                            <Edit sx={{ fontSize: '18px' }} />\r\n                        </IconButton>\r\n                    </td>\r\n                </tr>\r\n\r\n                {open && (\r\n                    <tr>\r\n                        <td className=\"p-2\" colSpan={7}>\r\n                            <div className=\"table-responsive\">\r\n                                <table className=\"table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            {['Sno', 'MainMenu', 'Address', 'OrderNo', 'Status', 'Action'].map((o, i) => (\r\n                                                <th className=\"fa-13 border text-center\" key={i}>{o}</th>\r\n                                            ))}\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {o?.SubMenu?.map((oo, ii) => (\r\n                                            <tr key={ii}>\r\n                                                <td className=\"fa-13 border text-center\">{ii + 1}</td>\r\n                                                <td className=\"fa-13 border\">{oo?.SubMenuName}</td>\r\n                                                <td className=\"fa-13 border\">{oo?.PageUrl}</td>\r\n                                                <td className=\"fa-13 border text-center\">{oo.OrderNo ?? '-'}</td>\r\n                                                <td className=\"fa-12  border text-center\">\r\n                                                    {isEqualNumber(oo?.Active, 1) ? (\r\n                                                        <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                                                    ) : (\r\n                                                        <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">In-Active</span>\r\n                                                    )}\r\n                                                </td>\r\n                                                <td className=\"fa-13 border text-center\">\r\n                                                    <IconButton\r\n                                                        size=\"small\"\r\n                                                        className=\"p-1\"\r\n                                                        onClick={() => {\r\n                                                            setInputValue(pre => ({\r\n                                                                ...pre,\r\n                                                                Id: oo?.Id,\r\n                                                                MenuName: oo?.SubMenuName,\r\n                                                                PageUrl: oo?.PageUrl,\r\n                                                                isActive: oo?.Active,\r\n                                                                OrderNo: 0,\r\n                                                                ParentId: o?.Id,\r\n                                                                menuType: 'SubMenu',\r\n                                                            }));\r\n                                                            setDialog(true);\r\n                                                        }}\r\n                                                    >\r\n                                                        <Edit sx={{ fontSize: '18px' }} />\r\n                                                    </IconButton>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"px-3 py-2 border-bottom d-flex justify-content-between align-items-center\">\r\n                    <h5>Menu Management</h5>\r\n                    <Button variant=\"outlined\" onClick={() => { setInputValue(menuInitialValue); setDialog(true); }}>Add Menu</Button>\r\n                </div>\r\n                <CardContent>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    {['#', 'Sno', 'MainMenu', 'Address', 'OrderNo', 'Status', 'Action'].map((o, i) => (\r\n                                        <th className=\"fa-13 border text-center\" key={i}>{o}</th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {menuData.map((o, i) => <RowComp o={o} i={i} key={i} />)}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                maxWidth='lg'\r\n            >\r\n                <DialogTitle>{inputValue.Id ? 'Update Menu' : 'Create Menu'}</DialogTitle>\r\n                <form\r\n                    onSubmit={e => {\r\n                        e.preventDefault();\r\n                        saveData();\r\n                    }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Menu Type</label>\r\n                                <select\r\n                                    value={inputValue.menuType}\r\n                                    onChange={e => setInputValue(pre => ({ ...pre, menuType: e.target.value }))}\r\n                                    className=\"cus-inpt\"\r\n                                    required\r\n                                >\r\n                                    <option value=\"MainMenu\">Main Menu</option>\r\n                                    <option value=\"SubMenu\">Sub Menu</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Menu Name</label>\r\n                                <input\r\n                                    className=\"cus-inpt \"\r\n                                    value={inputValue.MenuName}\r\n                                    onChange={e => setInputValue(pre => ({ ...pre, MenuName: e.target.value }))}\r\n                                    maxLength={15}\r\n                                    required\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Page Url</label>\r\n                                <input\r\n                                    className=\"cus-inpt \"\r\n                                    value={inputValue.PageUrl}\r\n                                    onChange={e => setInputValue(pre => ({ ...pre, PageUrl: e.target.value }))}\r\n                                    maxLength={100}\r\n                                    required={false}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValue.menuType === 'MainMenu' && (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                    <label>Order No</label>\r\n                                    <input\r\n                                        className=\"cus-inpt \"\r\n                                        type='number'\r\n                                        value={inputValue.OrderNo}\r\n                                        onChange={e => setInputValue(pre => ({ ...pre, OrderNo: e.target.value }))}\r\n                                        min={0}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {inputValue.menuType === 'SubMenu' && (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                    <label>Main Menu</label>\r\n                                    <select\r\n                                        value={inputValue.ParentId}\r\n                                        onChange={e => setInputValue(pre => ({ ...pre, ParentId: e.target.value }))}\r\n                                        className=\"cus-inpt\"\r\n                                        required\r\n                                    >\r\n                                        <option value={0}> - Select -</option>\r\n                                        {menuData.map((o, i) => !o.PageUrl && (\r\n                                            <option value={Number(o?.Id)} key={i}>{o?.MenuName}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                            )}\r\n\r\n                            {inputValue.Id && (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                    <label>Active Status</label>\r\n                                    <select\r\n                                        value={Number(inputValue.isActive)}\r\n                                        onChange={e => setInputValue(pre => ({ ...pre, isActive: Number(e.target.value) }))}\r\n                                        className=\"cus-inpt\"\r\n                                        required\r\n                                        disabled={isEqualNumber(inputValue.Id, 8)}\r\n                                    >\r\n                                        <option value=\"\"> - Select -</option>\r\n                                        <option value={Number(1)}>Active</option>\r\n                                        <option value={Number(0)}>In-Active</option>\r\n                                    </select>\r\n                                </div>\r\n                            )}\r\n\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button type='button' onClick={closeDialog}>cancel</Button>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            type='submit'\r\n                            disabled={isLoading}\r\n                        >\r\n                            {inputValue.Id ? 'Update' : 'Create'}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MenuManagement;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;"],"names":["menuInitialValue","Id","MenuName","PageUrl","ParentId","isActive","OrderNo","menuType","MenuManagement","menuData","setMenuData","useState","reload","setReload","inputValue","setInputValue","dialog","setDialog","isLoading","setIsLoading","useEffect","fetchLink","address","then","data","success","_data$data","sorted","sort","a","b","catch","e","console","error","closeDialog","RowComp","_ref","_o$SubMenu","_o$OrderNo","_o$SubMenu2","o","i","open","setOpen","_jsxs","_Fragment","children","_jsx","className","Number","SubMenu","length","IconButton","size","onClick","pre","KeyboardArrowUp","sx","fontSize","KeyboardArrowDown","isEqualNumber","Active","Edit","colSpan","map","oo","ii","_oo$OrderNo","SubMenuName","Card","Button","variant","CardContent","Dialog","onClose","fullWidth","maxWidth","DialogTitle","onSubmit","preventDefault","method","checkIsNumber","bodyData","toast","message","finally","DialogContent","value","onChange","target","required","maxLength","type","min","disabled","DialogActions","createSvgIcon","d","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","name","overridesResolver","props","styles","root","padding","paddingBottom","React","inProps","ref","useDefaultProps","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx","getCardUtilityClass","CardRoot","Paper","overflow","raised","elevation","undefined"],"sourceRoot":""}