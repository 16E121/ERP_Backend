{"version":3,"file":"static/js/1584.efc9dbdd.chunk.js","mappings":"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","sources":["Pages/Purchase/tallyBasedReport.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { checkIsNumber, getPreviousDate, ISOString } from \"../../Components/functions\";\r\nimport { Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FilterAlt } from '@mui/icons-material';\r\nimport { purchaseOrderDataSet, displayColumns } from \"../DataEntry/purchaseOrderDataArray\";\r\nimport { toast } from 'react-toastify';\r\nimport PurchaseOrderPreviewTemplate from \"../DataEntry/purchaseOrderPreviewTemplate\";\r\n\r\n\r\nconst TallyBasedReport = ({ loadingOn, loadingOff }) => {\r\n\r\n    const [purchaseOrderData, setPurchaseOrderData] = useState([]);\r\n    const [orderPreview, setOrderPreview] = useState({\r\n        OrderDetails: {},\r\n        OrderItemsArray: [],\r\n        DeliveryArray: [],\r\n        TranspoterArray: [],\r\n        display: false,\r\n    });\r\n\r\n    const nav = useNavigate();\r\n\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(10),\r\n        Todate: ISOString(),\r\n        FilterDialog: false,\r\n        OrderStatus: 'PO-Vendor-Wise',\r\n        deleteOrderDialog: false,\r\n        deleteOrderId: '',\r\n        refresh: false,\r\n        view: 'PURCHASE ORDERS'\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `dataEntry/purchaseOrderEntry?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setPurchaseOrderData(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [filters.Fromdate, filters.Todate, filters.refresh]);\r\n\r\n    const deleteOrder = (OrderId) => {\r\n        if (!checkIsNumber(OrderId)) return;\r\n\r\n        fetchLink({\r\n            address: 'dataEntry/purchaseOrderEntry',\r\n            method: 'DELETE',\r\n            bodyData: { OrderId }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setFilters(pre => ({ ...pre, deleteOrderDialog: false, deleteOrderId: '', refresh: !pre.refresh }));\r\n                toast.success(data.message);\r\n            } else {\r\n                setFilters(pre => ({ ...pre, deleteOrderDialog: false, deleteOrderId: '' }));\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    const onCloseDialog = () => {\r\n        setOrderPreview({\r\n            OrderDetails: {},\r\n            OrderItemsArray: [],\r\n            DeliveryArray: [],\r\n            TranspoterArray: [],\r\n            display: false,\r\n        })\r\n    }\r\n\r\n    const navigateToPageWithState = ({ page = '', stateToTransfer = {} }) => {\r\n        nav(page, { state: stateToTransfer });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-2 d-flex flex-wrap align-items-center border-bottom\">\r\n                    <h5 className=\"m-0 flex-grow-1 ps-2\">Purchase Order Report</h5>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        className=\"me-2\"\r\n                        onClick={() => setFilters(pre => ({ ...pre, FilterDialog: true }))}\r\n                    ><FilterAlt /></IconButton>\r\n                </div>\r\n\r\n                <CardContent>\r\n                    <FilterableTable\r\n                        dataArray={purchaseOrderDataSet({\r\n                            data: purchaseOrderData,\r\n                            status: filters.OrderStatus\r\n                        })}\r\n                        columns={displayColumns({\r\n                            OrderStatus: filters.OrderStatus,\r\n                            dialogs: setFilters,\r\n                            setOrderPreview,\r\n                            navigation: navigateToPageWithState\r\n                        })}\r\n                        tableMaxHeight={750}\r\n                        EnableSerialNumber\r\n                        title={filters.OrderStatus}\r\n                        PDFPrintOption={true}\r\n                        ExcelPrintOption={true}\r\n                        maxHeightOption={true}\r\n                    />\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n            {orderPreview.display && (\r\n                <PurchaseOrderPreviewTemplate\r\n                    OrderDetails={orderPreview.OrderDetails}\r\n                    OrderItemsArray={orderPreview.OrderItemsArray}\r\n                    DeliveryArray={orderPreview.DeliveryArray}\r\n                    TranspoterArray={orderPreview.TranspoterArray}\r\n                    display={orderPreview.display}\r\n                    onCloseDialog={() => onCloseDialog()}\r\n                />\r\n            )}\r\n\r\n            <Dialog\r\n                open={filters.FilterDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, FilterDialog: false }))}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <table className=\"table m-0 border-0\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"border-0 vctr\">Fromdate</td>\r\n                                <td className=\"border-0 vctr\">\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                                        value={filters.Fromdate}\r\n                                        className=\"cus-inpt p-2\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border-0 vctr\">Todate</td>\r\n                                <td className=\"border-0 vctr\">\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                                        value={filters.Todate}\r\n                                        className=\"cus-inpt p-2\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border-0 vctr\">Order Status</td>\r\n                                <td className=\"border-0 vctr\">\r\n                                    <select\r\n                                        className=\"cus-inpt p-2\"\r\n                                        value={filters.OrderStatus}\r\n                                        onChange={e => setFilters(pre => ({ ...pre, OrderStatus: e.target.value }))}\r\n                                    >\r\n\r\n                                        <option value=\"PO-Vendor-Wise\">PO-Vendor-Wise</option>\r\n                                        <option value=\"PO-Item-Wise\">PO-Item-Wise</option>\r\n                                        <option value=\"PO-Pending-Only\">PO-Pending-Only</option>\r\n                                        <option value=\"AR-Item-Based\">AR-Item-Based</option>\r\n                                        <option value=\"AR-Vendor-Wise\">AR-Vendor-Wise</option>\r\n                                    </select>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setFilters(pre => ({ ...pre, FilterDialog: false }))}\r\n                        variant=\"outlined\"\r\n                    >Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={filters.deleteOrderDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, deleteOrderDialog: false, deleteOrderId: '' }))}\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Confirmation</DialogTitle>\r\n                <DialogContent>\r\n                    <h6>Do you want to delete the order permanently?</h6>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setFilters(pre => ({ ...pre, deleteOrderDialog: false, deleteOrderId: '' }))}\r\n                    >Cancel</Button>\r\n                    <Button color='error' variant='outlined' onClick={() => deleteOrder(filters.deleteOrderId)}>Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TallyBasedReport;"],"names":["_ref","loadingOn","loadingOff","purchaseOrderData","setPurchaseOrderData","useState","orderPreview","setOrderPreview","OrderDetails","OrderItemsArray","DeliveryArray","TranspoterArray","display","nav","useNavigate","filters","setFilters","Fromdate","getPreviousDate","Todate","ISOString","FilterDialog","OrderStatus","deleteOrderDialog","deleteOrderId","refresh","view","useEffect","fetchLink","address","concat","then","data","success","catch","e","console","error","_jsxs","_Fragment","children","Card","className","_jsx","IconButton","size","onClick","pre","FilterAlt","CardContent","FilterableTable","dataArray","purchaseOrderDataSet","status","columns","displayColumns","dialogs","navigation","_ref2","page","stateToTransfer","state","tableMaxHeight","EnableSerialNumber","title","PDFPrintOption","ExcelPrintOption","maxHeightOption","PurchaseOrderPreviewTemplate","onCloseDialog","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","type","onChange","target","value","DialogActions","Button","variant","color","deleteOrder","OrderId","checkIsNumber","method","bodyData","toast","message"],"sourceRoot":""}