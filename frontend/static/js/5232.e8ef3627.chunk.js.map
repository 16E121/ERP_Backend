{"version":3,"file":"static/js/5232.e8ef3627.chunk.js","mappings":"kVAyCA,MAAMA,EAA0BA,CAACC,EAAMC,IAC5BD,EAAKE,KAAKC,IACb,MAAMC,EAAe,CAAC,EA2BtB,OAzBAH,EAAQI,SAAQ,CAACC,EAAQC,KACrB,GAAID,EAAOE,WAAaF,EAAOG,eAC3B,GAAIH,EAAOI,cAAgBJ,EAAOK,KAAM,CACpC,MAAMC,EAAcN,EAAOK,KAAK,CAAER,QAE5BU,EAAmBP,EAAOQ,aAC1BC,OAAOT,EAAOQ,cAAcE,QAAQ,OAAQ,KAAKC,cAAa,SAAAC,OACrDX,EAAQ,GAEI,kBAAhBK,GAAmD,kBAAhBA,GAAmD,kBAAhBA,IAC7ER,EAAaS,GAAoBD,EAOzC,KAAO,CAEH,IAAIO,EAAMb,EAAOc,WACjBhB,EAAae,GAAOhB,EAAIgB,IAAQ,EACpC,CACJ,IAGGf,CAAY,IA2CrBiB,EAAkBC,IAcjB,IAdkB,UACrBC,EAAY,GAAE,QACdtB,EAAU,GAAE,WACZuB,EAAa,KAAI,aACjBC,GAAe,EAAK,eACpBC,EAAiB,KAAI,eACrBC,EAAiB,IAAG,iBACpBC,EAAmB,GAAE,mBACrBC,GAAqB,EAAK,SAC1BC,EAAW,QAAmB,kBAC9BC,GAAoB,EAAK,MACzBC,EAAQ,GAAE,eACVC,GAAiB,EAAK,iBACtBC,GAAmB,GACtBZ,EAEG,MAAOa,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAC1BC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAST,IACxCY,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,KAC1CK,EAAgBC,IAAqBN,EAAAA,EAAAA,WAAS,GAC/CO,EAAcF,EAAiB,gBAAkBf,EACjDkB,GAAWC,EAAAA,EAAAA,QAAO,MAElBC,EAAc,CAChB,CACIC,KAAM,OACNC,MAAO,cACR,CACCD,KAAM,QACNC,MAAO,YACR,CACCD,KAAM,SACNC,MAAO,gBAITC,EAAsB,CACxB,CACIF,KAAM,MACNC,MAAO,UACR,CACCD,KAAM,SACNC,MAAO,aACR,CACCD,KAAM,SACNC,MAAO,WAkDTE,EAvBYnD,KACd,IAAKwC,EAAaY,OAAQ,OAAOpD,EAmBjC,MAjBmB,IAAIA,GAAMqD,MAAK,CAACC,EAAGC,KAClC,IAAK,MAAMC,KAAYhB,EAAc,CACjC,MAAM,SAAEiB,EAAQ,UAAEC,GAAcF,EAC1BG,EAASL,EAAEG,GACXG,EAASL,EAAEE,GAEjB,GAAIE,IAAWC,EACX,MAAkB,QAAdF,EACOC,EAASC,EAAS,GAAK,EAEvBD,EAASC,EAAS,GAAK,CAG1C,CACA,OAAO,CAAC,GAGK,EAGFC,CAAStC,GACtBuC,EAAa3B,EAAOG,EACpByB,EAAWD,EAAaxB,EACxB0B,EAAgBb,EAAWc,MAAMH,EAAYC,GAE7CG,EAAeA,CAACC,EAAKC,KACvB,OAAQA,GACJ,IAAK,SACD,OAAOC,EAAAA,EAAAA,IAAaF,GACxB,IAAK,OACD,OAAOG,EAAAA,EAAAA,IAAUH,GACrB,IAAK,OACD,OAAOI,EAAAA,EAAAA,IAAUJ,GACrB,IAAK,SACD,OAAOA,EACX,QACI,MAAO,GACf,EAGEK,EAAUC,IAAqB,IAApB,IAAEtE,EAAG,MAAEI,GAAOkE,EAC3B,MAAOC,EAAMC,IAAWtC,EAAAA,EAAAA,WAAS,GAC3BuC,EAAW,OAEjB,OACIC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACLF,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAAAD,SAAA,EAEc,IAAjBtD,GAAyBC,IACvBuD,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,oCAAmCJ,UACpDE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,KAAK,QAAQC,QAASA,IAAMX,GAAQY,IAAQA,IAAKR,SAAEL,GAAOO,EAAAA,EAAAA,KAACO,EAAAA,EAAe,CAACC,GAAI,CAAEb,eAAiBK,EAAAA,EAAAA,KAACS,EAAAA,EAAiB,CAACD,GAAI,CAAEb,mBAIvH,IAAvB/C,IACGoD,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,oCAAmCJ,SAAGzC,EAAcH,EAAQ5B,EAAQ,IAGrF,OAAPN,QAAO,IAAPA,OAAO,EAAPA,EAASC,KAAI,CAACI,EAAQqF,KAAS,IAAAC,EAAAC,EAAA,QAC5BC,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAMqF,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,OAEtC,IAAlCuF,QAAc,OAANzF,QAAM,IAANA,OAAM,EAANA,EAAQI,eAA4BJ,EAAOK,MAqBhDsE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAENC,UAAW,qBACP7E,EAAO0F,MAAoF,QAA/EJ,EAAG7C,EAAYkD,MAAKD,GAASA,EAAMhD,OAASjC,OAAOT,EAAO0F,OAAO/E,uBAAc,IAAA2E,OAAA,EAA5EA,EAA8E3C,MAAQ,KAEjG3C,EAAO4F,cAA4G,QAA/FL,EAAG3C,EAAoB+C,MAAKD,GAASA,EAAMhD,OAASjC,OAAOT,EAAO4F,eAAejF,uBAAc,IAAA4E,OAAA,EAA5FA,EAA8F5C,MAAQ,UAC/H8B,SAELzE,EAAOK,KAAK,CAAER,MAAKiB,WAAYd,EAAOc,cAPlCuE,GArBTQ,OAAOC,QAAQjG,GAAKD,KAAImG,IAAA,IAAAC,EAAAC,EAAA,IAAEpF,EAAKqF,GAAMH,EAAA,OAE5B/F,EAAOc,aAAeD,KAEtB2E,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAMqF,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,MAE9EyE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAENC,UAAW,qBACP7E,EAAO0F,MAAoF,QAA/EM,EAAGvD,EAAYkD,MAAKD,GAASA,EAAMhD,OAASjC,OAAOT,EAAO0F,OAAO/E,uBAAc,IAAAqF,OAAA,EAA5EA,EAA8ErD,MAAQ,KAEjG3C,EAAO4F,cAA4G,QAA/FK,EAAGrD,EAAoB+C,MAAKD,GAASA,EAAMhD,OAASjC,OAAOT,EAAO4F,eAAejF,uBAAc,IAAAsF,OAAA,EAA5FA,EAA8FtD,MAAQ,UAErIqC,QAASA,IAAM9D,EAAaA,EAAWrB,GAAOsG,QAAQC,IAAI,yBAAyB3B,SAElFb,EAAasC,EAAa,OAANlG,QAAM,IAANA,OAAM,EAANA,EAAQqG,YARxBhB,EAUZ,IAcZ,QAKU,IAAjBlE,GAAyBC,GAAkBgD,IACzCO,EAAAA,EAAAA,KAACD,EAAAA,EAAQ,CAAAD,UACLE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAC0B,QAASC,OAAc,OAAP5G,QAAO,IAAPA,OAAO,EAAPA,EAASmD,UAAkC,IAAvBvB,EAA8B,EAAI,GAAGkD,SAAErD,EAAe,CAAEvB,MAAKI,gBAG7G,GAICuG,EAAAA,EAAAA,iBAAgB,CAChCC,QAASA,IAAMlE,EAASmE,UAG5B,OACInC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,2CAA0CJ,SAAA,CACpD/C,IAASiD,EAAAA,EAAAA,KAAA,MAAIE,UAAU,0CAAyCJ,SAAE/C,IAClEC,IACGgD,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACHC,QAAQ,WACRC,MAAM,UACNhC,UAAU,OAEVG,QAASA,IA1Ob8B,EAAC7F,EAAWtB,KAC5B,IACI,MAAMoH,EAAM,IAAIC,EAAAA,QACVC,EAAgBxH,EAAwBwB,EAAWtB,GAEnDuH,EAAUvH,EACXwH,QAAQnH,GAAWA,EAAOE,WAAaF,EAAOG,iBAC9CP,KAAKI,GAAWA,EAAOc,YAAcL,OAAOT,EAAOQ,cAAcE,QAAQ,OAAQ,KAAKC,gBAErFyG,EAAOH,EAAcrH,KAAKC,GAC5BqH,EAAQtH,KAAKyH,GAAWxH,EAAIwH,OAC9BzH,KAAI,CAAC0H,EAAGC,KAAC,IAAUD,EAAGE,IAAKD,EAAI,MAEjCR,EAAIU,UAAU,CACVC,KAAM,CAACR,GACPS,KAAMP,IAGVL,EAAIa,KAAK,YACb,CAAE,MAAOC,GACL1B,QAAQ2B,MAAMD,EAClB,GAqNmCf,CAAY7F,EAAWtB,GACtCoI,UAAUvC,EAAAA,EAAAA,IAAuB,OAATvE,QAAS,IAATA,OAAS,EAATA,EAAW6B,OAAQ,GAC3CkF,WAAWrD,EAAAA,EAAAA,KAACsD,EAAAA,EAAQ,IAAIxD,SAC3B,iBAEJ7C,IACG+C,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACHC,QAAQ,WACRC,MAAM,UACNhC,UAAU,OACVG,QAASA,IA5NXkD,EAACjH,EAAWtB,KAC9B,IACI,MAAMsH,EAAgBxH,EAAwBwB,EAAWtB,GAEnDwI,EAAYC,EAAAA,GAAWC,cAAcpB,GACrCqB,EAAWF,EAAAA,GAAWG,WAE5BH,EAAAA,GAAWI,kBAAkBF,EAAUH,EAAW,QAClDC,EAAAA,GAAeE,EAAU,aAC7B,CAAE,MAAOT,GACL1B,QAAQ2B,MAAMD,EAClB,GAiNmCK,CAAcjH,EAAWtB,GACxCoI,UAAUvC,EAAAA,EAAAA,IAAuB,OAATvE,QAAS,IAATA,OAAS,EAATA,EAAW6B,OAAQ,GAC3CkF,WAAWrD,EAAAA,EAAAA,KAACsD,EAAAA,EAAQ,IAAIxD,SAC3B,oBAELF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,SAAOE,UAAU,4BAA4B4D,QAAQ,aAAYhE,SAAC,gBAClEE,EAAAA,EAAAA,KAAA,SACIE,UAAU,+BACV6D,MAAO,CAAEC,QAAS,SAClBjG,KAAK,WACLkG,GAAG,aACHC,QAASzG,EACT0G,SAAUjB,GAAKxF,EAAkBwF,EAAEkB,OAAOF,kBAKtDlE,EAAAA,EAAAA,KAACqE,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAO/D,GAAI,CAAEgE,UAAW7G,GAAe8G,IAAK7G,EAASkC,UAE5EF,EAAAA,EAAAA,MAAC8E,EAAAA,EAAK,CAACC,cAAY,EAACvE,KAAMvD,EAASiD,SAAA,EAE/BE,EAAAA,EAAAA,KAAC4E,EAAAA,EAAS,CAAA9E,UACNF,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAAAD,SAAA,CAEJtD,GAAgBC,IACbuD,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,kDAAkD6D,MAAO,CAAEc,gBAAiB,WAAY/E,SAAC,MAMjHlD,IACGoD,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,kDAAkD6D,MAAO,CAAEc,gBAAiB,WAAY/E,SAAC,QAMjH9E,EAAQC,KAAI,CAACI,EAAQyJ,KAClB,MAAMC,GAAkBlE,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAMqF,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,GAC/FyJ,GAA+C,IAAlClE,QAAc,OAANzF,QAAM,IAANA,OAAM,EAANA,EAAQI,gBAA4BJ,EAAOK,KAChEuJ,EAAoB1H,EAAayD,MAAKzC,GAAYA,EAASC,WAAanD,EAAOc,aAC/E+I,EAAgBD,EAAoBA,EAAkBxG,UAAY,MAElD,IAAD0G,EAAAC,EAAAC,EAAAC,EAArB,OAAIP,EACOC,GACHhF,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAENC,UAAW,wCACN7E,EAAO0F,MAAoF,QAA/EoE,EAAGrH,EAAYkD,MAAKD,GAASA,EAAMhD,OAASjC,OAAOT,EAAO0F,OAAO/E,uBAAc,IAAAmJ,OAAA,EAA5EA,EAA8EnH,MAAQ,IAC1G+F,MAAO,CAAEc,gBAAiB,WAC1BK,gBAAeD,GAAoBC,EAAsBpF,UAEzDE,EAAAA,EAAAA,KAACuF,EAAAA,EAAc,CACXC,SAAUP,EACVxG,UAAWyG,EACX7E,QAASA,IA7M1B7B,KACvB,MAAMiH,EAAmBlI,EAAayD,MAAKzC,GAAYA,EAASC,WAAaA,IAC7E,GAAIiH,EAAkB,CAClB,MAAMC,EAAuC,QAA/BD,EAAiBhH,UAC/BjB,EAAgBD,EAAatC,KAAIsD,GAC7BA,EAASC,WAAaA,EAChB,IAAKD,EAAUE,UAAWiH,EAAQ,OAAS,OAC3CnH,IAEd,MACIf,EAAgB,IAAID,EAAc,CAAEiB,WAAUC,UAAW,QAC7D,EAkMuDkH,CAAkBtK,EAAOc,YAAY2D,SAEnDzE,EAAOQ,eAAsB,OAANR,QAAM,IAANA,GAAkB,QAAZ+J,EAAN/J,EAAQc,kBAAU,IAAAiJ,OAAZ,EAANA,EAAoBrJ,QAAQ,KAAM,SAXzD+I,IAeT9E,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAENC,UAAW,GAAAjE,OAAIZ,EAAOQ,cAAsB,OAANR,QAAM,IAANA,GAAAA,EAAQc,WAAc,oDAAsD,QAAO,MACpHd,EAAO0F,MAAoF,QAA/EsE,EAAGvH,EAAYkD,MAAKD,GAASA,EAAMhD,OAASjC,OAAOT,EAAO0F,OAAO/E,uBAAc,IAAAqJ,OAAA,EAA5EA,EAA8ErH,MAAQ,IAC1G+F,MAAO,CAAEc,gBAAiB,WAAY/E,SAErCzE,EAAOQ,eAAsB,OAANR,QAAM,IAANA,GAAkB,QAAZiK,EAANjK,EAAQc,kBAAU,IAAAmJ,OAAZ,EAANA,EAAoBvJ,QAAQ,KAAM,OALrD+I,GASV,IAAI,UAOvBlF,EAAAA,EAAAA,MAACgG,EAAAA,EAAS,CAAA9F,SAAA,EACJhD,EAAoBoB,EAAaa,GAAe9D,KAAI,CAACC,EAAKI,KACxD0E,EAAAA,EAAAA,KAACT,EAAO,CAAarE,IAAKA,EAAKI,MAAOA,GAAxBA,KAEI,IAArBgB,EAAU6B,SACP6B,EAAAA,EAAAA,KAACD,EAAAA,EAAQ,CAAAD,UACLE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACN0B,QACI3G,EAAQmD,SACW,IAAjB3B,GAAyBC,EAAkB,EAAI,KACzB,IAAvBG,EAA8B,EAAI,GAEvC4D,GAAI,CAAEqF,UAAW,UAAW/F,SAC/B,uBAWnBhD,GAA8C,IAAzBiC,EAAcZ,SACjC6B,EAAAA,EAAAA,KAAA,OAAKE,UAAU,WAAUJ,UACrBE,EAAAA,EAAAA,KAAC8F,EAAAA,EAAe,CACZxB,UAAU,MACVyB,MAAOzJ,EAAU6B,OACjBjB,KAAMA,EACN8I,aA3QKC,CAACC,EAAOC,KAC7BhJ,EAAQgJ,EAAQ,EA2QA9I,YAAaA,EACb+I,oBAzQaF,IAC7B5I,EAAe+I,SAASH,EAAM9B,OAAO7C,MAAO,KAC5CpE,EAAQ,EAAE,EAwQMmJ,mBAAoBC,MAAMC,KAAK,IAAIC,IAAI,CAAC9J,EAAkB,EAAG,GAAI,GAAI,IAAK,IAAK,OAAOyB,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACzGoI,iBAAiB,gBACjBC,iBAAe,EACfC,gBAAc,QAKxB,EA6BdxK,EAAgByK,aAAe,CAC3BvK,UAAW,GACXtB,QAAS,GACTuB,WAAY,KACZC,cAAc,EACdC,eAAgB,KAChBC,eAAgB,IAChBC,iBAAkB,GAClBC,oBAAoB,EACpBC,SAAU,QACVC,mBAAmB,EACnBC,WAAO+J,EACP9J,gBAAgB,EAChBC,kBAAkB,GAItB,S,6fC7dA,MAAMgC,EAAeA,CAACC,EAAKC,KACvB,OAAQA,GACJ,IAAK,SACD,OAAOC,EAAAA,EAAAA,IAAaF,GACxB,IAAK,OACD,OAAOG,EAAAA,EAAAA,IAAUH,GACrB,IAAK,SACD,OAAOA,EACX,QACI,MAAO,GACf,EAGE6H,EAAU5H,IACZ,OAAQA,GACJ,IAAK,SACD,MAAO,CACH6H,cAAe,QACfC,SAAU,WAElB,IAAK,OAIL,IAAK,SAMD,MAAO,CACHD,cAAe,QAGvB,QACI,MAAO,CAAC,EAChB,EAGEE,GAAYC,EAAAA,EAAAA,IAAS,CACvBC,eAAgB,IAChBC,iBAAkB,IAClBC,kBAAkB,IAGhBC,GAAOvH,EAAAA,EAAAA,KAACwH,EAAAA,EAAoB,CAAC7H,SAAS,UACtC8H,GAAczH,EAAAA,EAAAA,KAAC0H,EAAAA,EAAQ,CAAC/H,SAAS,UAqbvC,EAnbwBtD,IAAkE,IAAjE,SAAEsL,EAAQ,QAAEC,EAAO,aAAEC,EAAY,QAAEC,EAAO,cAAEC,GAAe1L,EAChF,MAAO2L,EAAWC,IAAgB7K,EAAAA,EAAAA,UAAS,KACpCd,EAAW4L,IAAgB9K,EAAAA,EAAAA,UAAS,KACpCpC,EAASmN,IAAc/K,EAAAA,EAAAA,UAAS,KAChCgL,EAASC,IAAcjL,EAAAA,EAAAA,UAAS,CAAC,IACjCkL,EAAcC,IAAmBnL,EAAAA,EAAAA,UAASd,GAE3CkM,EADctH,OAAOuH,KAAKL,GAASjK,OACT,EAAKmK,EAAehM,GAC7CoM,EAAmBC,IAAwBvL,EAAAA,EAAAA,UAAS,CAAC,IACrDwL,EAASC,IAAczL,EAAAA,EAAAA,UAAS,CACnCgL,SAAS,EACTU,cAAc,IAElBtH,QAAQC,IAAIsG,IAEZgB,EAAAA,EAAAA,YAAU,MACNC,EAAAA,EAAAA,GAAU,CACNC,QAAQ,6BAADhN,OAA+B0L,KACvCuB,MAAKnO,IACJ,GAAQ,OAAJA,QAAI,IAAJA,GAAAA,EAAMoO,SACFpO,EAAKA,KAAK,GAAI,CAAC,IAADqO,EAAAC,EAEd,MAAM1G,EAAI5H,EAAKA,KAAK,GACduO,EAAU,CACZC,eAAiB,OAAD5G,QAAC,IAADA,OAAC,EAADA,EAAG4G,eACnBC,WAAa,OAAD7G,QAAC,IAADA,OAAC,EAADA,EAAG8G,YACfC,OAAS,OAAD/G,QAAC,IAADA,GAAa,QAAZyG,EAADzG,EAAGgH,kBAAU,IAAAP,OAAZ,EAADA,EAAenO,KAAI2O,IAAK,IAAAC,EAAA,MAAK,CACjCC,SAAe,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOE,SACjBC,WAAiB,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOG,WACnBC,UAAgB,OAALJ,QAAK,IAALA,OAAK,EAALA,EAAOI,UAClBC,eAAqB,OAALL,QAAK,IAALA,OAAK,EAALA,EAAOK,eACvBC,WAAW,EACXlP,QAAc,OAAL4O,QAAK,IAALA,GAAkB,QAAbC,EAALD,EAAOO,mBAAW,IAAAN,OAAb,EAALA,EAAoB5O,KAAII,IAAM,CACnC+O,iBAAwB,OAAN/O,QAAM,IAANA,OAAM,EAANA,EAAQ+O,iBAC1BC,YAAmB,OAANhP,QAAM,IAANA,OAAM,EAANA,EAAQgP,YACrBC,WAAkB,OAANjP,QAAM,IAANA,OAAM,EAANA,EAAQiP,WACpBC,YAAmB,OAANlP,QAAM,IAANA,OAAM,EAANA,EAAQkP,YACrBC,SAAgB,OAANnP,QAAM,IAANA,OAAM,EAANA,EAAQmP,SAClBV,SAAgB,OAANzO,QAAM,IAANA,OAAM,EAANA,EAAQyO,SAClBvO,WAAW,EACXkP,iBAAiB,GAADxO,OAAU,OAAL2N,QAAK,IAALA,OAAK,EAALA,EAAOK,eAAc,KAAAhO,OAAU,OAANZ,QAAM,IAANA,OAAM,EAANA,EAAQgP,iBAE7D,KAECK,EAA2B,QAAjBrB,EAAGC,EAAQI,cAAM,IAAAL,OAAA,EAAdA,EAAgBsB,QAAO,CAACC,EAAQhB,IACxCgB,EAAO3O,OAAO2N,EAAM5O,UAC5B,IACHmN,EAAWuC,EACf,CACJ,IACDG,OAAM3H,GAAK1B,QAAQC,IAAIyB,IAAG,GAE9B,CAACyE,KAEJoB,EAAAA,EAAAA,YAAU,KACFpB,IACAqB,EAAAA,EAAAA,GAAU,CACNC,QAAQ,gCACR6B,OAAQ,OACRvI,QAAS,CACL,GAAMqF,GAEVmD,SAAU,CACNC,UAAWnD,EACXoD,SAAUtD,KAEfuB,MAAKnO,IACI,OAAJA,QAAI,IAAJA,GAAAA,EAAMoO,SACNjB,EAAiB,OAAJnN,QAAI,IAAJA,OAAI,EAAJA,EAAMA,KACvB,IACD8P,OAAM3H,GAAK1B,QAAQC,IAAIyB,IAC9B,GACD,CAAC0E,EAASD,KAEboB,EAAAA,EAAAA,YAAU,KACN,MAEMmC,EAFiB,IAAIlQ,GAASoD,MAAK,CAACC,EAAGC,IAAOD,EAAEmM,UAAYlM,EAAEkM,SAAYnM,EAAEmM,SAAWlM,EAAEkM,SAAWlM,EAAEkM,SAAWnM,EAAEmM,WAEvFhI,QAAOnH,IACpCyF,QAAQc,OAAa,OAANvG,QAAM,IAANA,OAAM,EAANA,EAAQiP,eAAiBxJ,QAAQc,OAAa,OAANvG,QAAM,IAANA,OAAM,EAANA,EAAQkP,gBAClEtP,KAAII,IAAM,IAAA8P,EAAA,MAAK,CACbzI,OAAc,OAANrH,QAAM,IAANA,GAAmB,QAAb8P,EAAN9P,EAAQgP,mBAAW,IAAAc,OAAb,EAANA,EAAqBpP,QAAQ,KAAM,KAC3CqP,YAAmB,OAAN/P,QAAM,IAANA,OAAM,EAANA,EAAQoP,iBACrBY,UAAU,EACVjL,KAAM,IAENkL,cAAe5C,EAAwB,OAANrN,QAAM,IAANA,OAAM,EAANA,EAAQgP,aAAe3B,EAAwB,OAANrN,QAAM,IAANA,OAAM,EAANA,EAAQgP,aAAe,GACjGkB,eAAgB/L,IAAA,IAAC,KAAEgM,GAAMhM,EAAA,OACrBQ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,wCAAuCJ,SACjD0L,EAAKC,YAAarM,EAAAA,EAAAA,IAAaoM,EAAKC,YAAc,IACjD,EAEV/P,KAAM0F,IAAA,IAAC,KAAEoK,GAAMpK,EAAA,OACXpB,EAAAA,EAAAA,KAAA,KAAGE,UAAS,8BAAgCJ,SACvCb,EAAauM,EAAKC,WAAkB,OAANpQ,QAAM,IAANA,OAAM,EAANA,EAAQ+O,mBACvC,KAELrD,EAAa,OAAN1L,QAAM,IAANA,OAAM,EAANA,EAAQ+O,kBACrB,IAEDnC,EAAaiD,EAAW,GACzB,CAAClQ,EAAS0N,KAEbK,EAAAA,EAAAA,YAAU,KACN2C,GAAc,GACf,CAACtD,IAEJ,MAMMuD,EAAmBA,KACrB,MAAMC,GAAMC,EAAAA,EAAAA,IAAY3E,EAAZ2E,CAAuBvP,IACnCwP,EAAAA,EAAAA,IAAS5E,EAAT4E,CAAoBF,EAAI,EAGtBhC,GAAQmC,EAAAA,EAAAA,IAAsB,CAChC/Q,QAASgN,EACTjN,KAAMyN,GAAY,GAClBwD,sBAAsB,EACtBC,gBAAgB,EAChBC,oBAAoB,EACpBC,oBAAoB,EACpBC,sBAAsB,EACtBC,kBAAkB,EAClBC,aAAc,CACVC,QAAS,UAOTC,WAAY,CAAEC,UAAW,EAAGC,SAAU,MAE1CC,+BAAgC,CAAEzK,MAAO,WACzC0K,uBAAwB,CAAEpM,GAAI,CAAEgE,UAAW,QAASqI,UAAW,SAC/DC,cAAe,CACXtM,GAAI,CACAuM,QAAS,CACLC,YAAa,SAIzBC,sBAAuB,CACnBzM,GAAI,CACA0M,WAAY,UAEhBhN,UAAW,uBAEfiN,sBAAuB,CACnBjN,UAAW,2BAEfkN,8BAA+BC,IAAA,IAAC,MAAEzD,GAAOyD,EAAA,OACrCzN,EAAAA,EAAAA,MAAC0N,EAAAA,EAAG,CACA9M,GAAI,CACA+M,QAAS,OACTC,IAAK,OACLxJ,QAAS,MACTyJ,SAAU,QACZ3N,SAAA,EAEFE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QAASsL,EACTtI,WAAWrD,EAAAA,EAAAA,KAAC0N,EAAAA,EAAY,IAAI5N,SAC/B,cAGDE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACHoB,SAA2D,IAAjDwG,EAAM+D,2BAA2BlL,KAAKtE,OAChDkC,QAASA,IAjECoC,KACtB,MAAMmL,EAAUnL,EAAKxH,KAAKC,GAAQA,EAAI2S,WAChCjC,GAAMC,EAAAA,EAAAA,IAAY3E,EAAZ2E,CAAuB+B,IACnC9B,EAAAA,EAAAA,IAAS5E,EAAT4E,CAAoBF,EAAI,EA+DRkC,CAAiBlE,EAAM+D,2BAA2BlL,MAEtDY,WAAWrD,EAAAA,EAAAA,KAAC0N,EAAAA,EAAY,IAAI5N,SAC/B,mBAGDE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QAASA,IAAMwI,GAAWvI,IAAG,IAAUA,EAAKwI,cAAc,MAC1DzF,WAAWrD,EAAAA,EAAAA,KAAC+N,EAAAA,EAAgB,IAAIjO,SACnC,iBAKDE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QAASA,IAAMwI,GAAWvI,IAAG,IAAUA,EAAK8H,SAAS,MACrDlI,UAAU,qBACVmD,WAAWrD,EAAAA,EAAAA,KAACgO,EAAAA,EAAS,IAAIlO,SAC5B,cAGC,IAIRmO,GAAsBC,EAAAA,EAAAA,UAAQ,IAAMtE,GAAO,CAACA,EAAOlB,EAAmBF,EAAUT,IAEhFoG,EAAqBA,CAAC9S,EAAQkG,KAChC8G,GAAW+F,IAAW,IACfA,EACH,CAAC/S,GAASkG,KACX,EAGDmK,EAAeA,KACjB,IAAI2C,EAAW,IAAI/R,GACnB,IAAK,MAAMjB,KAAUL,EACjB,GAAIoN,EAAQ/M,EAAOoP,kBACf,GAA8C,UAA1CrC,EAAQ/M,EAAOoP,kBAAkB1M,KAAkB,CACnD,MAAM,IAAEuQ,EAAG,IAAEC,GAAQnG,EAAQ/M,EAAOoP,kBACpC4D,EAAWA,EAAS7L,QAAOgM,IACvB,MAAMjN,EAAQiN,EAAKnT,EAAOoP,kBAC1B,YAAgB3D,IAARwH,GAAqB/M,GAAS+M,UAAiBxH,IAARyH,GAAqBhN,GAASgN,EAAI,GAEzF,MAAO,GAA8C,SAA1CnG,EAAQ/M,EAAOoP,kBAAkB1M,KAAiB,CACzD,MAAM,MAAE0Q,EAAK,IAAEC,GAAQtG,EAAQ/M,EAAOoP,kBAAkBlJ,MACxD8M,EAAWA,EAAS7L,QAAOgM,IACvB,MAAMG,EAAY,IAAIC,KAAKJ,EAAKnT,EAAOoP,mBACvC,YAAkB3D,IAAV2H,GAAuBE,GAAa,IAAIC,KAAKH,WAAoB3H,IAAR4H,GAAqBC,GAAa,IAAIC,KAAKF,GAAK,GAEzH,MAAO,GAAInI,MAAMsI,QAAQzG,EAAQ/M,EAAOoP,mBAAoB,CAAC,IAADqE,EACxDT,GAA2C,QAAhCS,EAAA1G,EAAQ/M,EAAOoP,yBAAiB,IAAAqE,OAAA,EAAhCA,EAAkC3Q,QAAS,EAAIkQ,EAAS7L,QAAOgM,GAAQpG,EAAQ/M,EAAOoP,kBAAkBsE,SAASP,EAAKnT,EAAOoP,kBAAkBzO,cAAcgT,UAAWX,CACvL,CAGR9F,EAAgB8F,EAAS,EAGvBY,EAAgB5T,IAClB,MAAM,iBAAEoP,EAAgB,YAAEJ,EAAW,iBAAED,GAAqB/O,EACxB,IAAD6T,EAAAC,EAAAC,EAAAC,EAmBKC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAnBxC,GAAyB,WAArBvF,EACA,OACIxK,EAAAA,EAAAA,MAAA,OAAKM,UAAU,sCAAqCJ,SAAA,EAChDE,EAAAA,EAAAA,KAAA,SACI4P,YAAY,MACZ7R,KAAK,SACLmC,UAAU,iCACVqB,MAAqC,QAAhC2N,EAA2B,QAA3BC,EAAE/G,EAAQqC,UAAiB,IAAA0E,OAAA,EAAzBA,EAA2Bb,WAAG,IAAAY,EAAAA,EAAI,GACzC/K,SAAWjB,GAAMiL,EAAmB1D,EAAkB,CAAE1M,KAAM,WAAYqK,EAAQqC,GAAmB6D,IAAKpL,EAAEkB,OAAO7C,MAAQsO,WAAW3M,EAAEkB,OAAO7C,YAASuF,OAE5J9G,EAAAA,EAAAA,KAAA,SACI4P,YAAY,MACZ7R,KAAK,SACLmC,UAAU,iCACVqB,MAAqC,QAAhC6N,EAA2B,QAA3BC,EAAEjH,EAAQqC,UAAiB,IAAA4E,OAAA,EAAzBA,EAA2Bd,WAAG,IAAAa,EAAAA,EAAI,GACzCjL,SAAWjB,GAAMiL,EAAmB1D,EAAkB,CAAE1M,KAAM,WAAYqK,EAAQqC,GAAmB8D,IAAKrL,EAAEkB,OAAO7C,MAAQsO,WAAW3M,EAAEkB,OAAO7C,YAASuF,SAIjK,GAAyB,SAArBsD,EACP,OACIxK,EAAAA,EAAAA,MAAA,OAAKM,UAAU,sCAAqCJ,SAAA,EAChDE,EAAAA,EAAAA,KAAA,SACI4P,YAAY,aACZ7R,KAAK,OACLmC,UAAU,iCACVqB,MAA8C,QAAzC+N,EAA2B,QAA3BC,EAAEnH,EAAQqC,UAAiB,IAAA8E,GAAO,QAAPC,EAAzBD,EAA2BhO,aAAK,IAAAiO,OAAP,EAAzBA,EAAkCf,aAAK,IAAAa,EAAAA,EAAI,GAClDnL,SAAWjB,IAAC,IAAA4M,EAAA,OAAK3B,EAAmB1D,EAAkB,CAAE1M,KAAM,OAAQwD,MAAO,IAA8B,QAA5BuO,EAAG1H,EAAQqC,UAAiB,IAAAqF,OAAA,EAAzBA,EAA2BvO,MAAOkN,MAAOvL,EAAEkB,OAAO7C,YAASuF,IAAc,KAE/J9G,EAAAA,EAAAA,KAAA,SACI4P,YAAY,WACZ7R,KAAK,OACLmC,UAAU,iCACVqB,MAA4C,QAAvCkO,EAA2B,QAA3BC,EAAEtH,EAAQqC,UAAiB,IAAAiF,GAAO,QAAPC,EAAzBD,EAA2BnO,aAAK,IAAAoO,OAAP,EAAzBA,EAAkCjB,WAAG,IAAAe,EAAAA,EAAI,GAChDtL,SAAWjB,IAAC,IAAA6M,EAAA,OAAK5B,EAAmB1D,EAAkB,CAAE1M,KAAM,OAAQwD,MAAO,IAA8B,QAA5BwO,EAAG3H,EAAQqC,UAAiB,IAAAsF,OAAA,EAAzBA,EAA2BxO,MAAOmN,IAAKxL,EAAEkB,OAAO7C,YAASuF,IAAc,OAIlK,GAAyB,WAArBsD,EAA+B,CACtC,MAAM4F,EAAiB,IAAI,IAAIvJ,IAAInK,EAAUrB,KAAIuT,IAAI,IAAAyB,EAAAC,EAAA,OAA0B,QAA1BD,EAAIzB,EAAK/D,UAAiB,IAAAwF,GAAe,QAAfC,EAAtBD,EAAwBjU,qBAAa,IAAAkU,OAAf,EAAtBA,EAAuClB,MAAM,MAAI5Q,OAC1G,OACI4B,EAAAA,EAAAA,KAACmQ,EAAAA,EAAY,CACTC,UAAQ,EACRnM,GAAE,GAAAhI,OAAKwO,EAAgB,WACvB4F,QAASL,EACTM,sBAAoB,EACpBC,eAAgBC,GAAUA,EAC1BjP,MAAO6G,EAAQqC,IAAqB,GACpCtG,SAAUA,CAAC+B,EAAOuK,IAAatC,EAAmB1D,EAAkBgG,GACpEC,aAAcA,CAACC,EAAOH,EAAMI,KAAA,IAAE,SAAEC,GAAUD,EAAA,OACtChR,EAAAA,EAAAA,MAAA,SAAQ+Q,EAAK7Q,SAAA,EACTE,EAAAA,EAAAA,KAAC8Q,EAAAA,EAAQ,CACLvJ,KAAMA,EACNE,YAAaA,EACb1D,MAAO,CAAEgN,YAAa,GACtB7M,QAAS2M,IAEZL,IACA,EAETQ,qBAAsBA,CAACC,EAAK/R,IAAQ+R,IAAQ/R,EAC5CgS,YAAcC,IACVnR,EAAAA,EAAAA,KAACoR,EAAAA,EAAS,IACFD,EACJE,MAAkB,OAAXhH,QAAW,IAAXA,OAAW,EAAXA,EAAatO,QAAQ,KAAM,KAClC6T,YAAW,UAAA3T,OAAuB,OAAXoO,QAAW,IAAXA,OAAW,EAAXA,EAAatO,QAAQ,KAAM,SAKtE,GAGJ,OACI6D,EAAAA,EAAAA,MAAA0R,EAAAA,SAAA,CAAAxR,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,OAAMJ,SAAA,EAEjBE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,+BAA8BJ,UACzCE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,MAAKJ,UAChBE,EAAAA,EAAAA,KAACuR,EAAAA,GAAkB,CAAC3H,MAAOqE,SAInCrO,EAAAA,EAAAA,MAAA,OAAKM,UAAU,gDAA+CJ,SAAA,EAC1DF,EAAAA,EAAAA,MAAA,MAAIM,UAAU,sCAAqCJ,SAAA,CAAC,WAEhDE,EAAAA,EAAAA,KAACwR,EAAAA,EAAO,CAACzU,MAAM,gBAAe+C,UAC1BE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAMgI,EAAW,CAAC,GAAGvI,UAE9BE,EAAAA,EAAAA,KAACyR,EAAAA,EAAY,YAIzB7R,EAAAA,EAAAA,MAAA,OAAKM,UAAU,oBAAoB6D,MAAO,CAAES,UAAW,OAAQkN,SAAU,QAAS5R,SAAA,CAC7E9E,EAAQC,KAAI,CAACI,EAAQyJ,KAAE,IAAA6M,EAAA,OAAM9Q,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQiP,WAAY,KAAMzJ,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQkP,YAAa,KACrG3K,EAAAA,EAAAA,MAAA,OAAcM,UAAU,iCAAgCJ,SAAA,EACpDE,EAAAA,EAAAA,KAAA,SAAOE,UAAU,YAAWJ,SAAQ,OAANzE,QAAM,IAANA,GAAmB,QAAbsW,EAANtW,EAAQgP,mBAAW,IAAAsH,OAAb,EAANA,EAAqB5V,QAAQ,KAAM,OAChEkT,EAAa5T,KAFRyJ,EAIb,KACD9E,EAAAA,EAAAA,KAAA,mBAMZJ,EAAAA,EAAAA,MAACgS,EAAAA,EAAM,CACHnS,KAAMmJ,EAAQR,QACdyJ,QAASA,IAAMhJ,GAAWvI,IAAG,IAAUA,EAAK8H,SAAS,MACrD0J,WAAS,EAACC,SAAS,KAAIjS,SAAA,EAEvBE,EAAAA,EAAAA,KAACgS,EAAAA,EAAW,CAAAlS,UACRF,EAAAA,EAAAA,MAAA,MAAIM,UAAU,sCAAqCJ,SAAA,CAAC,WAEhDE,EAAAA,EAAAA,KAACwR,EAAAA,EAAO,CAACzU,MAAM,gBAAe+C,UAC1BE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAMgI,EAAW,CAAC,GAAGvI,UAE9BE,EAAAA,EAAAA,KAACyR,EAAAA,EAAY,cAK7BzR,EAAAA,EAAAA,KAACiS,EAAAA,EAAa,CAAAnS,UAEVF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,oBAAoB6D,MAAO,CAAES,UAAW,OAAQkN,SAAU,QAAS5R,SAAA,CAC7E9E,EAAQC,KAAI,CAACI,EAAQyJ,KAAE,IAAAoN,EAAA,OAAMrR,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQiP,WAAY,KAAMzJ,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQkP,YAAa,KACrG3K,EAAAA,EAAAA,MAAA,OAAcM,UAAU,iCAAgCJ,SAAA,EACpDE,EAAAA,EAAAA,KAAA,SAAOE,UAAU,YAAWJ,SAAQ,OAANzE,QAAM,IAANA,GAAmB,QAAb6W,EAAN7W,EAAQgP,mBAAW,IAAA6H,OAAb,EAANA,EAAqBnW,QAAQ,KAAM,OAChEkT,EAAa5T,KAFRyJ,EAIb,KACD9E,EAAAA,EAAAA,KAAA,eAIRA,EAAAA,EAAAA,KAACmS,EAAAA,EAAa,CAAArS,UACVE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QAASA,IAAMwI,GAAWvI,IAAG,IAAUA,EAAK8H,SAAS,MAAUtI,SAClE,gBAMTF,EAAAA,EAAAA,MAACgS,EAAAA,EAAM,CACHnS,KAAMmJ,EAAQE,aACd+I,QAASA,IAAMhJ,GAAWvI,IAAG,IAAUA,EAAKwI,cAAc,MAC1DgJ,WAAS,EAACC,SAAS,KAAIjS,SAAA,EAEvBE,EAAAA,EAAAA,KAACgS,EAAAA,EAAW,CAAAlS,SAAC,kBACbE,EAAAA,EAAAA,KAACiS,EAAAA,EAAa,CAAAnS,UACVE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,MAAM6D,MAAO,CAAE8I,UAAW,SAAU/M,SAC9C,IAAI9E,GAASwH,QAAOnH,IACjBwF,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQiP,WAAY,KAC/BzJ,EAAAA,EAAAA,IAAoB,OAANxF,QAAM,IAANA,OAAM,EAANA,EAAQkP,YAAa,KACN,WAA5BlP,EAAO+O,kBACwB,WAA5B/O,EAAO+O,oBACfnP,KAAI,CAAC0H,EAAGC,KAAC,IAAAwP,EAAAC,EAAA,OACRzS,EAAAA,EAAAA,MAAA,OAAKM,UAAU,kCAAiCJ,SAAA,EAC5CE,EAAAA,EAAAA,KAAA,SAAAF,SAAS,OAAD6C,QAAC,IAADA,GAAc,QAAbyP,EAADzP,EAAG0H,mBAAW,IAAA+H,OAAb,EAADA,EAAgBrW,QAAQ,KAAM,QACtCiE,EAAAA,EAAAA,KAAA,UACIE,UAAU,WACVqB,MAAwC,QAAnC8Q,EAAE3J,EAAmB,OAAD/F,QAAC,IAADA,OAAC,EAADA,EAAG0H,oBAAY,IAAAgI,EAAAA,EAAI,GAC5ClO,SAAUjB,GAAKyF,GAAqBrI,IAAG,IAAUA,EAAK,CAACqC,EAAE0H,aAAcnH,EAAEkB,OAAO7C,UAAUzB,SAGtF,CACI,CAAEuR,MAAO,qBAAsB9P,MAAO,IACtC,CAAE8P,MAAO,QAAS9P,MAAO,SACzB,CAAE8P,MAAO,SAAU9P,MAAO,UAC1B,CAAE8P,MAAO,MAAO9P,MAAO,OACvB,CAAE8P,MAAO,MAAO9P,MAAO,OACvB,CAAE8P,MAAO,OAAQ9P,MAAO,QACxB,CAAE8P,MAAO,SAAU9P,MAAO,UAC1B,CAAE8P,MAAO,cAAe9P,MAAO,eAC/B,CAAE8P,MAAO,MAAO9P,MAAO,OACvB,CAAE8P,MAAO,SAAU9P,MAAO,WAC5BtG,KAAI,CAAC0H,EAAGC,KACN5C,EAAAA,EAAAA,KAAA,UAAQuB,MAAOoB,EAAEpB,MAAMzB,SAAU6C,EAAE0O,OAANzO,SApBSA,EAwBhD,SAIlB5C,EAAAA,EAAAA,KAACmS,EAAAA,EAAa,CAAArS,UACVE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QAASA,IAAMwI,GAAWvI,IAAG,IAAUA,EAAKwI,cAAc,MAAUhJ,SACvE,iBAKV,E,0BCvdX,MAAMwS,EAAY3B,IACd,MAAM,SAAE7Q,EAAQ,MAAEyB,EAAK,MAAEjG,KAAUiX,GAAU5B,EAE7C,OACI3Q,EAAAA,EAAAA,KAAA,OACIwS,KAAK,WACLC,OAAQlR,IAAUjG,EAClB2I,GAAE,YAAAhI,OAAcX,GAChB,yBAAAW,OAAwBX,MACpBiX,EAAKzS,SAERyB,IAAUjG,IACP0E,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CAACoF,EAAG,EAAE5S,UACNE,EAAAA,EAAAA,KAAC2S,EAAAA,EAAU,CAAA7S,SAAEA,OAGnB,EAqfd,GAjfwB8S,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAC1B,MAAMC,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,UACzCC,EAAWC,IAAgBzW,EAAAA,EAAAA,UAAS,KAQpC0W,EAAeC,IAAoB3W,EAAAA,EAAAA,UAPpB,CAClB4W,OAAQ,GACRC,kBAAkB,EAClBC,uBAAwB,CAAC,EACzBC,0BAA0B,EAC1BC,iBAAiB,KAGf,WAAEC,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAC3BnM,EAASC,IAAcjL,EAAAA,EAAAA,UAAS,CAAC,GAClCoX,GAAMC,EAAAA,EAAAA,OACLC,EAAQC,IAAavX,EAAAA,EAAAA,WAAS,IAC9BwX,GAAaC,KAAkBzX,EAAAA,EAAAA,UAAS,IAM/C2L,EAAAA,EAAAA,YAAU,MACNC,EAAAA,EAAAA,GAAU,CACNC,QAAQ,qBACTC,MAAKnO,IACI,OAAJA,QAAI,IAAJA,GAAAA,EAAMoO,SACN0K,EAAiB,OAAJ9Y,QAAI,IAAJA,OAAI,EAAJA,EAAMA,KACvB,IACD8P,OAAM3H,GAAK1B,QAAQC,IAAIyB,IAAG,GAC9B,CAACwR,IAEJ,MAAMvG,GAAqBA,CAAC9S,EAAQkG,KAChC8G,GAAW+F,IAAW,IACfA,EACH,CAAC/S,GAASkG,KACX,EAGD0N,GAAgB5T,IAClB,MAAM,YAAEgP,EAAW,iBAAED,GAAqB/O,EACN,IAADyZ,EAAAC,EAAAC,EAAAC,EA2BKC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAyBEC,EAAAC,EApD1C,MAAyB,WAArBrL,GAEIxK,EAAAA,EAAAA,MAAA,OAAKM,UAAU,iCAAgCJ,SAAA,EAC3CE,EAAAA,EAAAA,KAAA,SACI4P,YAAY,MACZ7R,KAAK,SACLmC,UAAU,gBACVqB,MAAgC,QAA3BuT,EAAsB,QAAtBC,EAAE3M,EAAQiC,UAAY,IAAA0K,OAAA,EAApBA,EAAsBzG,WAAG,IAAAwG,EAAAA,EAAI,GACpC3Q,SAAWjB,GAAMiL,GAAmB9D,EAAa,CAC7CtM,KAAM,WACHqK,EAAQiC,GACXiE,IAAKpL,EAAEkB,OAAO7C,MAAQsO,WAAW3M,EAAEkB,OAAO7C,YAASuF,OAG3D9G,EAAAA,EAAAA,KAAA,SACI4P,YAAY,MACZ7R,KAAK,SACLmC,UAAU,gBACVqB,MAAgC,QAA3ByT,EAAsB,QAAtBC,EAAE7M,EAAQiC,UAAY,IAAA4K,OAAA,EAApBA,EAAsB1G,WAAG,IAAAyG,EAAAA,EAAI,GACpC7Q,SAAWjB,GAAMiL,GAAmB9D,EAAa,CAC7CtM,KAAM,WACHqK,EAAQiC,GACXkE,IAAKrL,EAAEkB,OAAO7C,MAAQsO,WAAW3M,EAAEkB,OAAO7C,YAASuF,SAKvC,SAArBsD,GAEHxK,EAAAA,EAAAA,MAAA,OAAKM,UAAU,2CAA0CJ,SAAA,EACrDE,EAAAA,EAAAA,KAAA,SACI4P,YAAY,aACZ7R,KAAK,OACLmC,UAAU,wCACVqB,MAAyC,QAApC2T,EAAsB,QAAtBC,EAAE/M,EAAQiC,UAAY,IAAA8K,GAAO,QAAPC,EAApBD,EAAsB5T,aAAK,IAAA6T,OAAP,EAApBA,EAA6B3G,aAAK,IAAAyG,EAAAA,EAAI,GAC7C/Q,SAAWjB,IAAC,IAAAwS,EAAA,OAAKvH,GAAmB9D,EAAa,CAC7CtM,KAAM,OACNwD,MAAO,IAAyB,QAAvBmU,EAAGtN,EAAQiC,UAAY,IAAAqL,OAAA,EAApBA,EAAsBnU,MAAOkN,MAAOvL,EAAEkB,OAAO7C,YAASuF,IACpE,KAEN9G,EAAAA,EAAAA,KAAA,SACI4P,YAAY,WACZ7R,KAAK,OACLmC,UAAU,wCACVqB,MAAuC,QAAlC8T,EAAsB,QAAtBC,EAAElN,EAAQiC,UAAY,IAAAiL,GAAO,QAAPC,EAApBD,EAAsB/T,aAAK,IAAAgU,OAAP,EAApBA,EAA6B7G,WAAG,IAAA2G,EAAAA,EAAI,GAC3ClR,SAAWjB,IAAC,IAAAyS,EAAA,OAAKxH,GAAmB9D,EAAa,CAC7CtM,KAAM,OACNwD,MAAO,IAAyB,QAAvBoU,EAAGvN,EAAQiC,UAAY,IAAAsL,OAAA,EAApBA,EAAsBpU,MAAOmN,IAAKxL,EAAEkB,OAAO7C,YAASuF,IAClE,OAIc,WAArBsD,GAEHpK,EAAAA,EAAAA,KAAA,SACIjC,KAAK,OACL6R,YAAY,YACZ1P,UAAU,WACVqB,MAAkC,QAA7BiU,EAAsB,QAAtBC,EAAErN,EAAQiC,UAAY,IAAAoL,OAAA,EAApBA,EAAsBlU,aAAK,IAAAiU,EAAAA,EAAI,GACtCrR,SAAUjB,GAAKiL,GAAmB9D,EAAa,CAC3CtM,KAAM,cACNwD,MAAOzF,OAAOoH,EAAEkB,OAAO7C,OAAOvF,eAAiB,YATxD,CAaP,EAGE4Z,GAAUvZ,IAAY,IAAD+M,EAAA,IAAV,EAAEzG,GAAGtG,EAClB,MAAOwZ,EAAUC,IAAe1Y,EAAAA,EAAAA,UAAS,MAEnC2Y,EAAgB,CAClBxM,eAAiB,OAAD5G,QAAC,IAADA,OAAC,EAADA,EAAG4G,eACnBC,WAAa,OAAD7G,QAAC,IAADA,OAAC,EAADA,EAAG8G,YACfuM,YAAc,OAADrT,QAAC,IAADA,OAAC,EAADA,EAAGqT,YAChBtM,OAAS,OAAD/G,QAAC,IAADA,GAAa,QAAZyG,EAADzG,EAAGgH,kBAAU,IAAAP,OAAZ,EAADA,EAAenO,KAAI2O,IAAK,IAAAC,EAAA,MAAK,CACjCC,SAAe,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOE,SACjBC,WAAiB,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOG,WACnBC,UAAgB,OAALJ,QAAK,IAALA,OAAK,EAALA,EAAOI,UAClBC,eAAqB,OAALL,QAAK,IAALA,OAAK,EAALA,EAAOK,eACvBC,WAAW,EACXlP,QAAc,OAAL4O,QAAK,IAALA,GAAkB,QAAbC,EAALD,EAAOO,mBAAW,IAAAN,OAAb,EAALA,EAAoB5O,KAAII,IAAM,CACnC+O,iBAAwB,OAAN/O,QAAM,IAANA,OAAM,EAANA,EAAQ+O,iBAC1BC,YAAmB,OAANhP,QAAM,IAANA,OAAM,EAANA,EAAQgP,YACrBC,WAAkB,OAANjP,QAAM,IAANA,OAAM,EAANA,EAAQiP,WACpBC,YAAmB,OAANlP,QAAM,IAANA,OAAM,EAANA,EAAQkP,YACrBC,SAAgB,OAANnP,QAAM,IAANA,OAAM,EAANA,EAAQmP,SAClBV,SAAgB,OAANzO,QAAM,IAANA,OAAM,EAANA,EAAQyO,SAClBvO,WAAW,MAElB,KAGC0a,EAAcnV,QAAQ+U,GACtB5R,EAAKgS,EAAe,OAADtT,QAAC,IAADA,OAAC,EAADA,EAAG8G,iBAAc3C,EAU1C,OACIlH,EAAAA,EAAAA,MAAA0R,EAAAA,SAAA,CAAAxR,SAAA,EACIE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAAC,mBAAkB8D,EAAI5D,QAVrB6F,IACjB4P,EAAY5P,EAAMgQ,cAAc,EAS2BpW,UACnDE,EAAAA,EAAAA,KAACmW,EAAAA,EAAI,OAGTnW,EAAAA,EAAAA,KAACoW,EAAAA,GAAO,CACJnS,GAAIA,EACJxE,KAAMwW,EACNJ,SAAUA,EACVhE,QAdQwE,KAChBP,EAAY,KAAK,EAcTQ,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,QACd1W,UAEFF,EAAAA,EAAAA,MAAC8W,EAAAA,EAAQ,CAAA5W,SAAA,EAELF,EAAAA,EAAAA,MAAC+W,EAAAA,EAAQ,CACLtW,QACIA,KACI0T,GAAiBzT,IAAG,IACbA,EACH4T,uBAAwB6B,EACxB9B,kBAAkB,MAEtBY,GAAe,GACfxM,EAAW,CAAC,EAAE,EAErBvI,SAAA,EAEDE,EAAAA,EAAAA,KAAC4W,EAAAA,EAAY,CAAA9W,UAACE,EAAAA,EAAAA,KAAC6W,EAAAA,EAAU,CAAClX,SAAS,aACnCK,EAAAA,EAAAA,KAAC8W,EAAAA,EAAY,CAAAhX,SAAC,aAGlBF,EAAAA,EAAAA,MAAC+W,EAAAA,EAAQ,CACLtW,QACY,OAAPkT,QAAO,IAAPA,GAAAA,EAASwD,WAEJ,KACEhD,GAAiBzT,IAAG,IACbA,EACH4T,uBAAwB6B,EACxB3B,iBAAiB,MAErB/L,EAAW,CAAC,GACZwM,GAAe,EAAE,EARnB,IAAMmC,EAAAA,GAAMC,KAAK,mBAU1BnX,SAAA,EAEDE,EAAAA,EAAAA,KAAC4W,EAAAA,EAAY,CAAA9W,UAACE,EAAAA,EAAAA,KAACgO,EAAAA,EAAS,CAACrO,SAAS,aAClCK,EAAAA,EAAAA,KAAC8W,EAAAA,EAAY,CAAAhX,SAAC,gBAGlBF,EAAAA,EAAAA,MAAC+W,EAAAA,EAAQ,CACLtW,QAASA,IAAMmU,EAAI,SAAU,CAAE0C,MAAO,CAAElB,YAAaD,KAAmBjW,SAAA,EAExEE,EAAAA,EAAAA,KAAC4W,EAAAA,EAAY,CAAA9W,UAACE,EAAAA,EAAAA,KAACmX,EAAAA,EAAI,CAACxX,SAAS,aAC7BK,EAAAA,EAAAA,KAAC8W,EAAAA,EAAY,CAAAhX,SAAC,aAGlBF,EAAAA,EAAAA,MAAC+W,EAAAA,EAAQ,CACLtW,QAASA,IAAM0T,GAAiBzT,IAAG,IAAUA,EAAK6T,0BAA0B,EAAMD,uBAAwB6B,MAAkBjW,SAAA,EAE5HE,EAAAA,EAAAA,KAAC4W,EAAAA,EAAY,CAAA9W,UAACE,EAAAA,EAAAA,KAACoX,EAAAA,EAAM,CAACzX,SAAS,QAAQuC,MAAM,aAC7ClC,EAAAA,EAAAA,KAAC8W,EAAAA,EAAY,CAAAhX,SAAC,qBAK3B,EAILP,GAAUC,IAAY,IAAD6X,EAAA,IAAV,EAAE1U,GAAGnD,EAClB,OACIQ,EAAAA,EAAAA,KAAAsR,EAAAA,SAAA,CAAAxR,UACIE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mBAAkBJ,UAC7BF,EAAAA,EAAAA,MAAA,SAAOM,UAAU,QAAOJ,SAAA,EACpBE,EAAAA,EAAAA,KAAA,SAAAF,UACIE,EAAAA,EAAAA,KAAA,MAAAF,SACK,CAAC,MAAO,QAAS,SAAU,YAAa,SAAS7E,KAAI0H,IAClD3C,EAAAA,EAAAA,KAAA,MAAIE,UAAU,2BAAmC6D,MAAO,CAAEc,gBAAiB,WAAY/E,SAAE6C,GAA3CA,UAI1D3C,EAAAA,EAAAA,KAAA,SAAAF,SACM,OAAD6C,QAAC,IAADA,GAAa,QAAZ0U,EAAD1U,EAAGgH,kBAAU,IAAA0N,OAAZ,EAADA,EAAepc,KAAI,CAAC2O,EAAO0N,KAAQ,IAAAC,EAAA,OAChCvX,EAAAA,EAAAA,KAACwX,EAAAA,SAAc,CAAA1X,SACL,OAAL8J,QAAK,IAALA,GAAkB,QAAb2N,EAAL3N,EAAOO,mBAAW,IAAAoN,OAAb,EAALA,EAAoBtc,KAAI,CAACI,EAAQqF,KAAS,IAAA+W,EAAAC,EAAA,OACvC9X,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACmB,IAAdY,IACGd,EAAAA,EAAAA,MAAA0R,EAAAA,SAAA,CAAAxR,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAIE,UAAU,gCAAgCyX,QAAc,OAAL/N,QAAK,IAALA,GAAkB,QAAb6N,EAAL7N,EAAOO,mBAAW,IAAAsN,OAAb,EAALA,EAAoBtZ,OAAO2B,SAAEwX,EAAW,KAC/FtX,EAAAA,EAAAA,KAAA,MAAIE,UAAU,0CAA0CyX,QAAc,OAAL/N,QAAK,IAALA,GAAkB,QAAb8N,EAAL9N,EAAOO,mBAAW,IAAAuN,OAAb,EAALA,EAAoBvZ,OAAO2B,SAClF,OAAL8J,QAAK,IAALA,OAAK,EAALA,EAAOI,gBAIpBhK,EAAAA,EAAAA,KAAA,MACIE,UAAS,wJAAAjE,OAES6E,QAAQc,OAAa,OAANvG,QAAM,IAANA,OAAM,EAANA,EAAQiP,aAAe,cAAgB,GAAE,sEAAArO,OACxD6E,QAAQc,OAAa,OAANvG,QAAM,IAANA,OAAM,EAANA,EAAQkP,cAAgB,YAAc,GAAE,sEACvDzK,SAEX,OAANzE,QAAM,IAANA,OAAM,EAANA,EAAQgP,eAEbrK,EAAAA,EAAAA,KAAA,MAAIE,UAAU,oBAAmBJ,SAAQ,OAANzE,QAAM,IAANA,OAAM,EAANA,EAAQ+O,oBAC3CpK,EAAAA,EAAAA,KAAA,MAAIE,UAAU,oBAAmBJ,SAAQ,OAANzE,QAAM,IAANA,OAAM,EAANA,EAAQmP,aAnBtC9J,EAoBJ,KAtBQ4W,EAwBJ,YAKlC,EAILM,GAAcA,KAChB7D,GAAiBzT,IAAG,IAAUA,EAAK2T,kBAAkB,EAAOC,uBAAwB,CAAC,KAAK,EAGxF2D,GAAgCA,KAClC9D,GAAiBzT,IAAG,IAAUA,EAAK6T,0BAA0B,EAAOD,uBAAwB,CAAC,KAAK,EAGhG4D,GAAoBA,KACtB/D,GAAiBzT,IAAG,IAAUA,EAAK8T,iBAAiB,MACpD/L,EAAW,CAAC,EAAE,EAuClB,OACIzI,EAAAA,EAAAA,MAAA0R,EAAAA,SAAA,CAAAxR,SAAA,EAEIF,EAAAA,EAAAA,MAACmY,EAAAA,EAAI,CAAAjY,SAAA,EAEDF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,oFAAmFJ,SAAA,EAC9FE,EAAAA,EAAAA,KAAA,QAAME,UAAU,mCAAkCJ,SAAC,sBAClDe,EAAAA,EAAAA,IAAwB,OAAVwT,QAAU,IAAVA,OAAU,EAAVA,EAAY2D,WAAY,KACnChY,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CAACC,QAAQ,WAAW5B,QAASA,IAAMmU,EAAI,UAAU1U,SAAC,mBAIjEE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,iCAAgCJ,UAC3CE,EAAAA,EAAAA,KAAA,SACIjC,KAAK,SACLmC,UAAU,kBACV0P,YAAY,qBACZrO,MAA4B,QAAvBsR,EAAe,OAAbiB,QAAa,IAAbA,OAAa,EAAbA,EAAeE,cAAM,IAAAnB,EAAAA,EAAI,GAChC1O,SAAUjB,GAAK6Q,GAAiBzT,IAAG,IAAUA,EAAK0T,OAAQlY,OAAOoH,EAAEkB,OAAO7C,OAAOvF,uBAIzFgE,EAAAA,EAAAA,KAACiY,EAAAA,EAAW,CAAC/X,UAAU,MAAKJ,UACxBE,EAAAA,EAAAA,KAAC5D,EAAAA,EAAe,CACZE,UACkB,OAAbwX,QAAa,IAAbA,GAAAA,EAAeE,OACZ,IAAIJ,GAAWpR,QAAO0V,GAClBpc,OAAU,OAAHoc,QAAG,IAAHA,OAAG,EAAHA,EAAKzO,aAAazN,cAAc+S,SAAS+E,EAAcE,UAF7CJ,EAM7B5Y,QAAS,CACL,CAAEmB,WAAY,cAAeN,aAAc,cAAe6F,UAAW,SAAUnG,UAAW,GAC1F,CAAEM,aAAc,SAAUN,UAAW,EAAGE,cAAc,EAAMC,KAAM0F,IAAA,IAAA+W,EAAA,IAAC,IAAEjd,GAAKkG,EAAA,OAAQ,OAAHlG,QAAG,IAAHA,GAAe,QAAZid,EAAHjd,EAAKyO,kBAAU,IAAAwO,OAAZ,EAAHA,EAAiBha,MAAM,GACtG,CAAEtC,aAAc,UAAWN,UAAW,EAAGE,cAAc,EAAMC,KAAM2R,IAAA,IAAA+K,EAAA,IAAC,IAAEld,GAAKmS,EAAA,OAAQ,OAAHnS,QAAG,IAAHA,GAAe,QAAZkd,EAAHld,EAAKyO,kBAAU,IAAAyO,OAAZ,EAAHA,EAAiBzN,QAAO,CAAC0N,EAAK7J,KAAI,IAAA8J,EAAA,OAAKD,EAAOzW,OAAW,OAAJ4M,QAAI,IAAJA,GAAiB,QAAb8J,EAAJ9J,EAAMrE,mBAAW,IAAAmO,OAAb,EAAJA,EAAmBna,OAAO,GAAE,EAAE,GACnK,CAAEhC,WAAY,eAAgBN,aAAc,aAAc6F,UAAW,SAAUnG,UAAW,GAC1F,CAAEM,aAAc,UAAWN,UAAW,EAAGE,cAAc,EAAMC,KAAMkV,IAAA,IAAC,IAAE1V,GAAK0V,EAAA,OAAQ,OAAH1V,QAAG,IAAHA,GAAAA,EAAKqd,WAAYC,EAAAA,EAAAA,IAAmB,OAAHtd,QAAG,IAAHA,OAAG,EAAHA,EAAKqd,WAAa,KAAK,GACxI,CAAE1c,aAAc,SAAUN,UAAW,EAAGE,cAAc,EAAMC,KAAM+c,IAAA,IAAC,IAAEvd,GAAKud,EAAA,OAAKzY,EAAAA,EAAAA,KAAC4V,GAAO,CAACjT,EAAGzH,GAAO,IAEtG0B,oBAAkB,EAClBJ,cAAc,EACdC,eAAgBic,IAAA,IAAC,IAAExd,GAAKwd,EAAA,OAAK1Y,EAAAA,EAAAA,KAACT,GAAO,CAACoD,EAAGzH,GAAO,EAChDwB,eAAgB,YAK5BkD,EAAAA,EAAAA,MAACgS,EAAAA,EAAM,CACHnS,KAAmB,OAAbqU,QAAa,IAAbA,OAAa,EAAbA,EAAeG,iBACrBpC,QAAS+F,GACTe,YAAU,EAAA7Y,SAAA,EAEVF,EAAAA,EAAAA,MAACoS,EAAAA,EAAW,CAAC9R,UAAU,0DAAyDJ,SAAA,EAC5EF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,aACOE,EAAAA,EAAAA,KAAA,QAAME,UAAU,YAAWJ,SAAe,OAAbgU,QAAa,IAAbA,GAAqC,QAAxBhB,EAAbgB,EAAeI,8BAAsB,IAAApB,OAAxB,EAAbA,EAAuCtJ,iBAEjFxJ,EAAAA,EAAAA,KAAA,QAAAF,UACIE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACE,QAASuX,GAAa1V,MAAM,QAAQhC,UAAU,aAAYJ,UAClEE,EAAAA,EAAAA,KAAC4Y,EAAAA,EAAK,YAIlB5Y,EAAAA,EAAAA,KAACiS,EAAAA,EAAa,CAAAnS,UACK,OAAbgU,QAAa,IAAbA,GAAqC,QAAxBf,EAAbe,EAAeI,8BAAsB,IAAAnB,OAAxB,EAAbA,EAAuCxJ,kBAAyB,OAAPgK,QAAO,IAAPA,OAAO,EAAPA,EAASwD,cAChE/W,EAAAA,EAAAA,KAAC6Y,EAAe,CACZlR,SAAuB,OAAbmM,QAAa,IAAbA,GAAqC,QAAxBd,EAAbc,EAAeI,8BAAsB,IAAAlB,OAAxB,EAAbA,EAAuCzJ,eACjD3B,QAAgB,OAAP2L,QAAO,IAAPA,OAAO,EAAPA,EAASwD,WAClBlP,aAAcO,OAmB1BpI,EAAAA,EAAAA,KAACmS,EAAAA,EAAa,CAAArS,UACVE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QAASuX,GACTvU,WAAWrD,EAAAA,EAAAA,KAAC8Y,EAAAA,EAAuB,IAAIhZ,SAC1C,eAMTF,EAAAA,EAAAA,MAACgS,EAAAA,EAAM,CACHnS,KAAmB,OAAbqU,QAAa,IAAbA,OAAa,EAAbA,EAAeK,yBACrBtC,QAASgG,GACT/F,WAAS,EAACC,SAAS,KAAIjS,SAAA,EAEvBE,EAAAA,EAAAA,KAACgS,EAAAA,EAAW,CAAAlS,SAAC,kBACbF,EAAAA,EAAAA,MAACqS,EAAAA,EAAa,CAAAnS,SAAA,CAAC,uCACwBE,EAAAA,EAAAA,KAAA,QAAME,UAAU,YAAWJ,SAAe,OAAbgU,QAAa,IAAbA,GAAqC,QAAxBb,EAAba,EAAeI,8BAAsB,IAAAjB,OAAxB,EAAbA,EAAuCzJ,aAAkB,mBAE7H5J,EAAAA,EAAAA,MAACuS,EAAAA,EAAa,CAAArS,SAAA,EACVE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QAASwX,GAA8B/X,SAC1C,YAGDE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QApJG0Y,KAAO,IAADC,EACzBjF,GAAiBzT,IAAG,IAAUA,EAAK6T,0BAA0B,OAC7DnL,EAAAA,EAAAA,GAAU,CACNC,QAAQ,mBACR6B,OAAQ,SACRC,SAAU,CACNxB,eAA6B,OAAbuK,QAAa,IAAbA,GAAqC,QAAxBkF,EAAblF,EAAeI,8BAAsB,IAAA8E,OAAxB,EAAbA,EAAuCzP,kBAE5DL,MAAKnO,IACI,OAAJA,QAAI,IAAJA,GAAAA,EAAMoO,SACN6N,EAAAA,GAAM7N,QAAQpO,EAAKke,SACnBtE,GAAUrU,IAAQA,KAElB0W,EAAAA,GAAM7T,MAAMpI,EAAKke,QACrB,IACDpO,OAAM3H,GAAK1B,QAAQC,IAAIyB,KACrBgW,SAAQ,IAAMnF,GAAiBzT,IAAG,IAAUA,EAAK4T,uBAAwB,CAAC,OAAM,EAqIrE7Q,WAAWrD,EAAAA,EAAAA,KAACoX,EAAAA,EAAM,IAClBnV,QAAQ,WACRC,MAAM,QAAOpC,SAChB,kBAMTF,EAAAA,EAAAA,MAACgS,EAAAA,EAAM,CACHnS,KAAmB,OAAbqU,QAAa,IAAbA,OAAa,EAAbA,EAAeM,gBACrBvC,QAASiG,GACThG,WAAS,EAACC,SAAS,KAAIjS,SAAA,EAEvBF,EAAAA,EAAAA,MAACoS,EAAAA,EAAW,CAAC9R,UAAU,iCAAgCJ,SAAA,EACnDF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,gBACUE,EAAAA,EAAAA,KAAA,QAAME,UAAU,YAAWJ,SAAe,OAAbgU,QAAa,IAAbA,GAAqC,QAAxBZ,EAAbY,EAAeI,8BAAsB,IAAAhB,OAAxB,EAAbA,EAAuC1J,aAAkB,gBAEtGxJ,EAAAA,EAAAA,KAAA,QAAAF,UACIE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACE,QAASyX,GAAmB5V,MAAM,QAAQhC,UAAU,aAAYJ,UACxEE,EAAAA,EAAAA,KAAC4Y,EAAAA,EAAK,YAIlBhZ,EAAAA,EAAAA,MAACqS,EAAAA,EAAa,CAAAnS,SAAA,EACVE,EAAAA,EAAAA,KAACmZ,EAAAA,EAAI,CAAC5X,MAAOqT,GAAazQ,SAvblBiV,CAAClT,EAAOuK,KAC5BoE,GAAepE,EAAS,EAsbwC3Q,SAClC,OAAbgU,QAAa,IAAbA,GAAqC,QAAxBX,EAAbW,EAAeI,8BAAsB,IAAAf,GAAQ,QAARC,EAArCD,EAAuCzJ,cAAM,IAAA0J,OAAhC,EAAbA,EAA+CnY,KAAI,CAAC2O,EAAOhH,KACxD5C,EAAAA,EAAAA,KAACqZ,EAAAA,EAAG,CAAChI,MAAY,OAALzH,QAAK,IAALA,OAAK,EAALA,EAAOI,WAAgBpH,OAG7B,OAAbkR,QAAa,IAAbA,GAAqC,QAAxBT,EAAbS,EAAeI,8BAAsB,IAAAb,GAAQ,QAARC,EAArCD,EAAuC3J,cAAM,IAAA4J,OAAhC,EAAbA,EAA+CrY,KAAI,CAAC2O,EAAOhH,KAAC,IAAA0W,EAAA,OACzDtZ,EAAAA,EAAAA,KAACsS,EAAQ,CAAC/Q,MAAOqT,GAAatZ,MAAOsH,EAAE9C,UACnCE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,MAAKJ,SACV,OAAL8J,QAAK,IAALA,GAAc,QAAT0P,EAAL1P,EAAO5O,eAAO,IAAAse,OAAT,EAALA,EAAgBre,KAAI,CAACI,EAAQke,KACzBzY,QAAQc,OAAa,OAANvG,QAAM,IAANA,OAAM,EAANA,EAAQiP,eACvBxJ,QAAQc,OAAa,OAANvG,QAAM,IAANA,OAAM,EAANA,EAAQkP,gBAEpB3K,EAAAA,EAAAA,MAAA,OAAKM,UAAU,gBAAeJ,SAAA,EAC1BE,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0BAAyBJ,SAAQ,OAANzE,QAAM,IAANA,OAAM,EAANA,EAAQgP,cACnD4E,GAAa5T,KAFkBke,QANP3W,EAalC,QAGnBhD,EAAAA,EAAAA,MAACuS,EAAAA,EAAa,CAAArS,SAAA,EACVE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QAASyX,GAAkBhY,SAC9B,YAGDE,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACH3B,QAASA,IAAM0T,GAAiBzT,IAAG,IAAUA,EAAK2T,kBAAkB,EAAMG,iBAAiB,MAC3F/Q,WAAWrD,EAAAA,EAAAA,KAACwZ,EAAAA,EAAM,IAClBvX,QAAQ,YAAWnC,SACtB,wBAKV,C","sources":["Components/filterableTable2.jsx","Components/dynamicMuiTable.jsx","Pages/Analytics/reportTemplates.jsx"],"sourcesContent":["import React, { Fragment, useRef, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton, Button } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {boolean} [props.PDFPrintOption]\r\n * @param {boolean} [props.ExcelPrintOption]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    } \r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({...o, Sno: i + 1}))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(false);\r\n    const tableHeight = showFullHeight ? ' max-content ' : tableMaxHeight;\r\n    const printRef = useRef(null);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                    column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                                )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                            column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                        )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex align-items-center flex-wrap mb-2\">\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0 ps-3'>{title}</h6>}\r\n                {PDFPrintOption && (\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='primary'\r\n                        className='me-2'\r\n                        // onClick={handlePrint}\r\n                        onClick={() => generatePDF(dataArray, columns)}\r\n                        disabled={isEqualNumber(dataArray?.length, 0)}\r\n                        startIcon={<Download />}\r\n                    >Download PDF</Button>\r\n                )}\r\n                {ExcelPrintOption && (\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='success'\r\n                        className='me-2'\r\n                        onClick={() => exportToExcel(dataArray, columns)}\r\n                        disabled={isEqualNumber(dataArray?.length, 0)}\r\n                        startIcon={<Download />}\r\n                    >Download Excel</Button>\r\n                )}\r\n                <div>\r\n                    <label className=\"form-check-label p-1 pe-2\" htmlFor=\"fullHeight\">Max Height</label>\r\n                    <input\r\n                        className=\"form-check-input shadow-none\"\r\n                        style={{ padding: '0.7em' }}\r\n                        type=\"checkbox\"\r\n                        id=\"fullHeight\"\r\n                        checked={showFullHeight}\r\n                        onChange={e => setShowFullHeight(e.target.checked)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableHeight }} ref={printRef}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n};\r\n\r\n\r\nexport default FilterableTable;","import React from 'react';\r\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\r\nimport { isEqualNumber, LocalDate, NumberFormat } from './functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Box } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, SettingsOutlined } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport { fetchLink } from './fetchComponent';\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return NumberFormat(val)\r\n        case 'date':\r\n            return LocalDate(val);\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst getFun = (dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return {\r\n                filterVariant: 'range',\r\n                filterFn: 'between',\r\n            }\r\n        case 'date':\r\n            return {\r\n                filterVariant: 'text',\r\n            };\r\n        case 'string':\r\n            // const distinctValues = [];\r\n            // dataArray?.forEach(item => (item[key] && (distinctValues.findIndex(o => o?.value === item[key]?.toLocaleLowerCase()) === -1))\r\n            //     ? distinctValues.push({ label: String(item[key]), value: String(item[key]).toLocaleLowerCase() })\r\n            //     : null\r\n            // )\r\n            return {\r\n                filterVariant: 'text',\r\n            }\r\n\r\n        default:\r\n            return {}\r\n    }\r\n}\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DynamicMuiTable = ({ reportId, company, queryFilters, buttons, groupingState }) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [dataArray, setDataArray] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [aggregationValues, setAggregationValues] = useState({});\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        aggregations: false\r\n    });\r\n    console.log(groupingState)\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/template?ReportId=${reportId}`\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                if (data.data[0]) {\r\n\r\n                    const o = data.data[0];\r\n                    const strucre = {\r\n                        Report_Type_Id: o?.Report_Type_Id,\r\n                        reportName: o?.Report_Name,\r\n                        tables: o?.tablesList?.map(table => ({\r\n                            Table_Id: table?.Table_Id,\r\n                            Table_Name: table?.Table_Name,\r\n                            AliasName: table?.AliasName,\r\n                            Table_Accronym: table?.Table_Accronym,\r\n                            isChecked: true,\r\n                            columns: table?.columnsList?.map(column => ({\r\n                                Column_Data_Type: column?.Column_Data_Type,\r\n                                Column_Name: column?.Column_Name,\r\n                                IS_Default: column?.IS_Default,\r\n                                IS_Join_Key: column?.IS_Join_Key,\r\n                                Order_By: column?.Order_By,\r\n                                Table_Id: column?.Table_Id,\r\n                                isVisible: true,\r\n                                accessColumnName: `${table?.Table_Accronym}_${column?.Column_Name}`\r\n                            }))\r\n                        }))\r\n                    }\r\n                    const allColumns = strucre.tables?.reduce((colArr, table) => {\r\n                        return colArr.concat(table.columns);\r\n                    }, []);\r\n                    setColumns(allColumns);\r\n                }\r\n            }\r\n        }).catch(e => console.log(e))\r\n\r\n    }, [reportId])\r\n\r\n    useEffect(() => {\r\n        if (reportId) {\r\n            fetchLink({\r\n                address: `reports/template/executeQuery`,\r\n                method: 'POST',\r\n                headers: {\r\n                    'Db': company,\r\n                },\r\n                bodyData: {\r\n                    filterReq: queryFilters,\r\n                    ReportID: reportId\r\n                }\r\n            }).then(data => {\r\n                if (data?.success) {\r\n                    setDataArray(data?.data);\r\n                }\r\n            }).catch(e => console.log(e))\r\n        }\r\n    }, [company, reportId])\r\n\r\n    useEffect(() => {\r\n        const displayColumns = [...columns].sort((a, b) => (a.Order_By && b.Order_By) ? a.Order_By - b.Order_By : b.Order_By - a.Order_By)\r\n\r\n        const muiColumns = displayColumns.filter(column =>\r\n            !Boolean(Number(column?.IS_Default)) && !Boolean(Number(column?.IS_Join_Key))\r\n        ).map(column => ({\r\n            header: column?.Column_Name?.replace(/_/g, ' '),\r\n            accessorKey: column?.accessColumnName,\r\n            sortable: true,\r\n            size: 150,\r\n            // ...aggregations(column?.Column_Data_Type, column?.Column_Name),\r\n            aggregationFn: aggregationValues[column?.Column_Name] ? aggregationValues[column?.Column_Name] : '',\r\n            AggregatedCell: ({ cell }) => (\r\n                <div className='blue-text text-center float-end w-100'>\r\n                    {cell.getValue() ? NumberFormat(cell.getValue()) : ''}\r\n                </div>\r\n            ),\r\n            Cell: ({ cell }) => (\r\n                <p className={`m-0 text-center fa-14 w-100`}>\r\n                    {formatString(cell.getValue(), column?.Column_Data_Type)}\r\n                </p>\r\n            ),\r\n            ...getFun(column?.Column_Data_Type),\r\n        }))\r\n\r\n        setDispColmn(muiColumns)\r\n    }, [columns, aggregationValues])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleExportRows = (rows) => {\r\n        const rowData = rows.map((row) => row.original);\r\n        const csv = generateCsv(csvConfig)(rowData);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleExportData = () => {\r\n        const csv = generateCsv(csvConfig)(dataArray);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const table = useMaterialReactTable({\r\n        columns: dispColmn,\r\n        data: showData || [],\r\n        enableColumnResizing: true,\r\n        enableGrouping: true,\r\n        enableStickyHeader: true,\r\n        enableStickyFooter: true,\r\n        enableColumnOrdering: true,\r\n        enableRowNumbers: false,\r\n        initialState: {\r\n            density: 'compact',\r\n            // grouping: groupingState?.filter(o => typeof o === 'string')\r\n            // .filter(o => {\r\n            //     const ind = dispColmn.findIndex(indVal => indVal?.accessorKey === o);\r\n            //     return ind !== -1; \r\n            // })\r\n            // ,\r\n            pagination: { pageIndex: 0, pageSize: 100 },\r\n        },\r\n        muiToolbarAlertBannerChipProps: { color: 'primary' },\r\n        muiTableContainerProps: { sx: { maxHeight: '68dvh', minHeight: '46vh' } },\r\n        muiTableProps: {\r\n            sx: {\r\n                caption: {\r\n                    captionSide: 'top',\r\n                },\r\n            },\r\n        },\r\n        muiTableHeadCellProps: {\r\n            sx: {\r\n                fontWeight: 'normal',\r\n            },\r\n            className: ' border text-center'\r\n        },\r\n        muiTableBodyCellProps: {\r\n            className: ' border-end text-center'\r\n        },\r\n        renderTopToolbarCustomActions: ({ table }) => (\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={handleExportData}\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    All Data\r\n                </Button>\r\n                <Button\r\n                    disabled={table.getPrePaginationRowModel().rows.length === 0}\r\n                    onClick={() =>\r\n                        handleExportRows(table.getPrePaginationRowModel().rows)\r\n                    }\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    Filtered Rows\r\n                </Button>\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, aggregations: true }))}\r\n                    startIcon={<SettingsOutlined />}\r\n                >\r\n                    Aggregation\r\n                </Button>\r\n                {/*  */}\r\n                {/* {buttons({grouping: table.getState().grouping})} */}\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className=\"d-md-none d-inline\"\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n        ),\r\n    })\r\n\r\n    const memoizedTableConfig = useMemo(() => table, [table, aggregationValues, showData, groupingState]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of columns) {\r\n            if (filters[column.accessColumnName]) {\r\n                if (filters[column.accessColumnName].type === 'range') {\r\n                    const { min, max } = filters[column.accessColumnName];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.accessColumnName];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.accessColumnName].type === 'date') {\r\n                    const { start, end } = filters[column.accessColumnName].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.accessColumnName]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.accessColumnName])) {\r\n                    filtered = filters[column.accessColumnName]?.length > 0 ? filtered.filter(item => filters[column.accessColumnName].includes(item[column.accessColumnName].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { accessColumnName, Column_Name, Column_Data_Type } = column;\r\n        if (Column_Data_Type === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'range', ...filters[accessColumnName], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'range', ...filters[accessColumnName], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'date', value: { ...filters[accessColumnName]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'date', value: { ...filters[accessColumnName]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[accessColumnName]?.toLowerCase()?.trim()))].sort();\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${accessColumnName}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[accessColumnName] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(accessColumnName, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Column_Name?.replace(/_/g, ' ')}\r\n                            placeholder={`Select ${Column_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row \">\r\n\r\n                <div className=\"col-xxl-10 col-lg-9 col-md-8\">\r\n                    <div className=\"p-2\">\r\n                        <MaterialReactTable table={memoizedTableConfig} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        Filters\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {columns.map((column, ke) => (isEqualNumber(column?.IS_Default, 0) && isEqualNumber(column?.IS_Join_Key, 0)) && (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        Filters\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </h5>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {columns.map((column, ke) => (isEqualNumber(column?.IS_Default, 0) && isEqualNumber(column?.IS_Join_Key, 0)) && (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.aggregations}\r\n                onClose={() => setDialogs(pre => ({ ...pre, aggregations: false }))}\r\n                fullWidth maxWidth='lg'\r\n            >\r\n                <DialogTitle>Aggregations</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\" style={{ minHeight: '30dvh' }}>\r\n                        {[...columns].filter(column => (\r\n                            isEqualNumber(column?.IS_Default, 0)\r\n                            && isEqualNumber(column?.IS_Join_Key, 0)\r\n                            && (column.Column_Data_Type === 'number'\r\n                                || column.Column_Data_Type === 'string')\r\n                        )).map((o, i) => (\r\n                            <div className=\"col-xxl-3 col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <label>{o?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                <select\r\n                                    className='cus-inpt'\r\n                                    value={aggregationValues[o?.Column_Name] ?? ''}\r\n                                    onChange={e => setAggregationValues(pre => ({ ...pre, [o.Column_Name]: e.target.value }))}\r\n                                >\r\n                                    {\r\n                                        [\r\n                                            { label: 'Select Aggregation', value: '' },\r\n                                            { label: 'count', value: 'count' },\r\n                                            { label: 'extent', value: 'extent' },\r\n                                            { label: 'max', value: 'max' },\r\n                                            { label: 'min', value: 'min' },\r\n                                            { label: 'mean', value: 'mean' },\r\n                                            { label: 'median', value: 'median' },\r\n                                            { label: 'uniqueCount', value: 'uniqueCount' },\r\n                                            { label: 'sum', value: 'sum' },\r\n                                            { label: 'unique', value: 'unique' },\r\n                                        ].map((o, i) => (\r\n                                            <option value={o.value} key={i}>{o.label}</option>\r\n                                        ))\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, aggregations: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DynamicMuiTable;","import React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n    Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tab, Tabs, Box, Typography,\r\n    ListItemIcon, ListItemText, MenuItem, MenuList, Popover, \r\n} from '@mui/material';\r\nimport { ArrowBackIosNewOutlined, Edit, Visibility, List, Delete, FilterAlt, Launch, Close } from '@mui/icons-material';\r\nimport { isEqualNumber, UTCDateWithTime } from '../../Components/functions';\r\nimport { MyContext } from '../../Components/context/contextProvider';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport DynamicMuiTable from '../../Components/dynamicMuiTable';\r\nimport { toast } from 'react-toastify';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport FilterableTable from '../../Components/filterableTable2'\r\n\r\n\r\n\r\nconst TabPanel = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`tabpanel-${index}`}\r\n            aria-labelledby={`tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ReportTemplates = () => {\r\n    const storage = JSON.parse(localStorage.getItem('user'))\r\n    const [templates, setTemplates] = useState([]);\r\n    const variableState = {\r\n        search: '',\r\n        openFilterDialog: false,\r\n        filterTablesAndColumns: {},\r\n        deleteConfirmationDialog: false,\r\n        preFilterDialog: false,\r\n    }\r\n    const [localVariable, setLocalVariable] = useState(variableState);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [filters, setFilters] = useState({})\r\n    const nav = useNavigate();\r\n    const [reload, setReload] = useState(false)\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/template`,\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                setTemplates(data?.data);\r\n            }\r\n        }).catch(e => console.log(e))\r\n    }, [reload])\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Column_Name, Column_Data_Type } = column;\r\n        if (Column_Data_Type === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"cus-inpt me-1\"\r\n                        value={filters[Column_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'range',\r\n                            ...filters[Column_Name],\r\n                            min: e.target.value ? parseFloat(e.target.value) : undefined\r\n                        })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"cus-inpt ms-1\"\r\n                        value={filters[Column_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'range',\r\n                            ...filters[Column_Name],\r\n                            max: e.target.value ? parseFloat(e.target.value) : undefined\r\n                        })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between flex-wrap'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"cus-inpt w-auto flex-grow-1 me-1 my-1\"\r\n                        value={filters[Column_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'date',\r\n                            value: { ...filters[Column_Name]?.value, start: e.target.value || undefined }\r\n                        })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"cus-inpt w-auto flex-grow-1 ms-1 my-1\"\r\n                        value={filters[Column_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'date',\r\n                            value: { ...filters[Column_Name]?.value, end: e.target.value || undefined }\r\n                        })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'string') {\r\n            return (\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder='Search...'\r\n                    className='cus-inpt'\r\n                    value={filters[Column_Name]?.value ?? ''}\r\n                    onChange={e => handleFilterChange(Column_Name, {\r\n                        type: 'textCompare',\r\n                        value: String(e.target.value).toLowerCase() || ''\r\n                    })}\r\n                />\r\n            )\r\n        }\r\n    };\r\n\r\n    const Actions = ({ o }) => {\r\n        const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n        const dataToForward = {\r\n            Report_Type_Id: o?.Report_Type_Id,\r\n            reportName: o?.Report_Name,\r\n            ReportState: o?.ReportState,\r\n            tables: o?.tablesList?.map(table => ({\r\n                Table_Id: table?.Table_Id,\r\n                Table_Name: table?.Table_Name,\r\n                AliasName: table?.AliasName,\r\n                Table_Accronym: table?.Table_Accronym,\r\n                isChecked: true,\r\n                columns: table?.columnsList?.map(column => ({\r\n                    Column_Data_Type: column?.Column_Data_Type,\r\n                    Column_Name: column?.Column_Name,\r\n                    IS_Default: column?.IS_Default,\r\n                    IS_Join_Key: column?.IS_Join_Key,\r\n                    Order_By: column?.Order_By,\r\n                    Table_Id: column?.Table_Id,\r\n                    isVisible: true\r\n                }))\r\n            }))\r\n        }\r\n\r\n        const popOverOpen = Boolean(anchorEl);\r\n        const id = popOverOpen ? o?.Report_Name : undefined;\r\n\r\n        const handleClick = (event) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <IconButton aria-describedby={id} onClick={handleClick}>\r\n                    <List />\r\n                </IconButton>\r\n\r\n                <Popover\r\n                    id={id}\r\n                    open={popOverOpen}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                >\r\n                    <MenuList>\r\n\r\n                        <MenuItem\r\n                            onClick={\r\n                                () => {\r\n                                    setLocalVariable(pre => ({\r\n                                        ...pre,\r\n                                        filterTablesAndColumns: dataToForward,\r\n                                        openFilterDialog: true,\r\n                                    }));\r\n                                    setSelectedTab(0);\r\n                                    setFilters({})\r\n                                }\r\n                            }\r\n                        >\r\n                            <ListItemIcon><Visibility fontSize=\"small\" /></ListItemIcon>\r\n                            <ListItemText>OPEN</ListItemText>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem\r\n                            onClick={\r\n                                !storage?.Company_id\r\n                                    ? () => toast.warn('Select Company!')\r\n                                    : () => {\r\n                                        setLocalVariable(pre => ({\r\n                                            ...pre,\r\n                                            filterTablesAndColumns: dataToForward,\r\n                                            preFilterDialog: true,\r\n                                        }));\r\n                                        setFilters({});\r\n                                        setSelectedTab(0);\r\n                                    }\r\n                            }\r\n                        >\r\n                            <ListItemIcon><FilterAlt fontSize=\"small\" /></ListItemIcon>\r\n                            <ListItemText>FILTERS</ListItemText>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem\r\n                            onClick={() => nav('create', { state: { ReportState: dataToForward } })}\r\n                        >\r\n                            <ListItemIcon><Edit fontSize=\"small\" /></ListItemIcon>\r\n                            <ListItemText>EDIT</ListItemText>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem\r\n                            onClick={() => setLocalVariable(pre => ({ ...pre, deleteConfirmationDialog: true, filterTablesAndColumns: dataToForward }))}\r\n                        >\r\n                            <ListItemIcon><Delete fontSize=\"small\" color='error' /></ListItemIcon>\r\n                            <ListItemText>DELETE</ListItemText>\r\n                        </MenuItem>\r\n\r\n                    </MenuList>\r\n                </Popover>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const RowComp = ({ o }) => {\r\n        return (\r\n            <>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                {['SNo', 'Table', 'Column', 'Data-Type', 'Order'].map(o => (\r\n                                    <th className=\"border fa-14 text-center\" key={o} style={{ backgroundColor: '#EDF0F7' }}>{o}</th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {o?.tablesList?.map((table, tableInd) => (\r\n                                <React.Fragment key={tableInd}>\r\n                                    {table?.columnsList?.map((column, columnInd) => (\r\n                                        <tr key={columnInd}>\r\n                                            {columnInd === 0 && (\r\n                                                <>\r\n                                                    <td className=\"border fa-13 text-center vctr\" rowSpan={table?.columnsList?.length}>{tableInd + 1}</td>\r\n                                                    <td className=\"border fa-13 text-center blue-text vctr\" rowSpan={table?.columnsList?.length}>\r\n                                                        {table?.AliasName}\r\n                                                    </td>\r\n                                                </>\r\n                                            )}\r\n                                            <td\r\n                                                className={`\r\n                                                                border fa-13 vctr\r\n                                                                ${Boolean(Number(column?.IS_Default)) ? ' blue-text ' : ''}\r\n                                                                ${Boolean(Number(column?.IS_Join_Key)) ? ' fw-bold ' : ''}\r\n                                                                `}\r\n                                            >\r\n                                                {column?.Column_Name}\r\n                                            </td>\r\n                                            <td className=\"border fa-13 vctr\">{column?.Column_Data_Type}</td>\r\n                                            <td className=\"border fa-13 vctr\">{column?.Order_By}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </React.Fragment>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setLocalVariable(pre => ({ ...pre, openFilterDialog: false, filterTablesAndColumns: {} }))\r\n    }\r\n\r\n    const closeDeleteConfirmationDialog = () => {\r\n        setLocalVariable(pre => ({ ...pre, deleteConfirmationDialog: false, filterTablesAndColumns: {} }))\r\n    }\r\n\r\n    const closeFilterDialog = () => {\r\n        setLocalVariable(pre => ({ ...pre, preFilterDialog: false }));\r\n        setFilters({})\r\n    }\r\n\r\n    const deleteTemplate = () => {\r\n        setLocalVariable(pre => ({ ...pre, deleteConfirmationDialog: false }))\r\n        fetchLink({\r\n            address: `reports/template`,\r\n            method: 'DELETE',\r\n            bodyData: {\r\n                Report_Type_Id: localVariable?.filterTablesAndColumns?.Report_Type_Id\r\n            }\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                toast.success(data.message)\r\n                setReload(pre => !pre)\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.log(e))\r\n            .finally(() => setLocalVariable(pre => ({ ...pre, filterTablesAndColumns: {} })))\r\n    }\r\n\r\n    const saveReportGroupingState = (reportid, grouping) => {\r\n        fetchLink({\r\n            address: `reports/template/templateState`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                Report_Type_Id: reportid,\r\n                ReportState: grouping\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Card>\r\n\r\n                <div className=\"p-2 border-bottom fa-16 fw-bold d-flex justify-content-between align-items-center\">\r\n                    <span className=\"text-primary text-uppercase ps-3\">Report Templates</span>\r\n                    {isEqualNumber(contextObj?.Add_Rights, 1) && (\r\n                        <Button variant='outlined' onClick={() => nav('create')}>Add Report</Button>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"d-flex justify-content-end p-3\">\r\n                    <input\r\n                        type=\"search\"\r\n                        className='cus-inpt w-auto'\r\n                        placeholder='Search Report Name'\r\n                        value={localVariable?.search ?? ''}\r\n                        onChange={e => setLocalVariable(pre => ({ ...pre, search: String(e.target.value).toLowerCase() }))}\r\n                    />\r\n                </div>\r\n\r\n                <CardContent className='p-0'>\r\n                    <FilterableTable\r\n                        dataArray={\r\n                            !localVariable?.search ? templates : (\r\n                                [...templates].filter(fil =>\r\n                                    String(fil?.Report_Name).toLowerCase().includes(localVariable.search)\r\n                                )\r\n                            )\r\n                        }\r\n                        columns={[\r\n                            { Field_Name: 'Report_Name', ColumnHeader: 'Report Name', Fied_Data: 'string', isVisible: 1 },\r\n                            { ColumnHeader: 'Tables', isVisible: 1, isCustomCell: true, Cell: ({ row }) => row?.tablesList?.length },\r\n                            { ColumnHeader: 'Columns', isVisible: 1, isCustomCell: true, Cell: ({ row }) => row?.tablesList?.reduce((sum, item) => sum += Number(item?.columnsList?.length), 0) },\r\n                            { Field_Name: 'CreatedByGet', ColumnHeader: 'Created By', Fied_Data: 'string', isVisible: 1, },\r\n                            { ColumnHeader: 'Columns', isVisible: 1, isCustomCell: true, Cell: ({ row }) => row?.CreatedAt ? UTCDateWithTime(row?.CreatedAt) : ' - ' },\r\n                            { ColumnHeader: 'Action', isVisible: 1, isCustomCell: true, Cell: ({ row }) => <Actions o={row} /> },\r\n                        ]}\r\n                        EnableSerialNumber\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => <RowComp o={row} />}\r\n                        tableMaxHeight={650}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={localVariable?.openFilterDialog}\r\n                onClose={closeDialog}\r\n                fullScreen\r\n            >\r\n                <DialogTitle className='d-flex justify-content-between align-items-center fa-16'>\r\n                    <span>\r\n                        Report - <span className=\"blue-text\">{localVariable?.filterTablesAndColumns?.reportName}</span>\r\n                    </span>\r\n                    <span>\r\n                        <IconButton onClick={closeDialog} color='error' className=' shadow-lg'>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {(localVariable?.filterTablesAndColumns?.Report_Type_Id && storage?.Company_id) && (\r\n                        <DynamicMuiTable\r\n                            reportId={localVariable?.filterTablesAndColumns?.Report_Type_Id}\r\n                            company={storage?.Company_id}\r\n                            queryFilters={filters}\r\n                            // buttons={({ grouping }) => (\r\n                            //     <Button\r\n                            //         onClick={() => saveReportGroupingState(localVariable?.filterTablesAndColumns?.Report_Type_Id, grouping)}\r\n                            //         disabled={grouping.length === 0}\r\n                            //         startIcon={<Save />}\r\n                            //     >\r\n                            //         Save State\r\n                            //     </Button>\r\n                            // )}\r\n                            // groupingState={\r\n                            //     localVariable?.filterTablesAndColumns?.ReportState \r\n                            //         ? JSON.parse(localVariable?.filterTablesAndColumns?.ReportState)\r\n                            //         : []\r\n                            // }\r\n                        />\r\n                    )}\r\n                    {/* {console.log(localVariable)} */}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={closeDialog}\r\n                        startIcon={<ArrowBackIosNewOutlined />}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={localVariable?.deleteConfirmationDialog}\r\n                onClose={closeDeleteConfirmationDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Confirmation</DialogTitle>\r\n                <DialogContent>\r\n                    Do you want to delete the Template <span className='blue-text'>{localVariable?.filterTablesAndColumns?.reportName}</span> permanently\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={closeDeleteConfirmationDialog}\r\n                    >\r\n                        cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={deleteTemplate}\r\n                        startIcon={<Delete />}\r\n                        variant='outlined'\r\n                        color='error'\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={localVariable?.preFilterDialog}\r\n                onClose={closeFilterDialog}\r\n                fullWidth maxWidth='md'\r\n            >\r\n                <DialogTitle className='d-flex justify-content-between'>\r\n                    <span>\r\n                        Filters For <span className=\"blue-text\">{localVariable?.filterTablesAndColumns?.reportName}</span> - Report\r\n                    </span>\r\n                    <span>\r\n                        <IconButton onClick={closeFilterDialog} color='error' className='shadow-lg '>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Tabs value={selectedTab} onChange={handleTabChange}>\r\n                        {localVariable?.filterTablesAndColumns?.tables?.map((table, i) => (\r\n                            <Tab label={table?.AliasName} key={i} />\r\n                        ))}\r\n                    </Tabs>\r\n                    {localVariable?.filterTablesAndColumns?.tables?.map((table, i) => (\r\n                        <TabPanel value={selectedTab} index={i} key={i}>\r\n                            <div className=\"row\">\r\n                                {table?.columns?.map((column, ii) => (\r\n                                    !Boolean(Number(column?.IS_Default)) &&\r\n                                    !Boolean(Number(column?.IS_Join_Key)) &&\r\n                                    (\r\n                                        <div className=\"p-2 col-md-6 \" key={ii}>\r\n                                            <label className='mb-2 fw-bold text-muted'>{column?.Column_Name}</label>\r\n                                            {renderFilter(column)}\r\n                                        </div>\r\n                                    )\r\n                                ))}\r\n                            </div>\r\n                        </TabPanel>\r\n                    ))}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={closeFilterDialog}\r\n                    >\r\n                        cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => setLocalVariable(pre => ({ ...pre, openFilterDialog: true, preFilterDialog: false }))}\r\n                        startIcon={<Launch />}\r\n                        variant='contained'\r\n                    >\r\n                        Open report\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportTemplates"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","FilterableTable","_ref","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","PDFPrintOption","ExcelPrintOption","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","printRef","useRef","columnAlign","type","class","columnVerticalAlign","sortedData","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Boolean","align","find","verticalAlign","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","value","console","log","Fied_Data","colSpan","Number","useReactToPrint","content","current","Button","variant","color","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","disabled","startIcon","Download","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","htmlFor","style","padding","id","checked","onChange","target","TableContainer","component","Paper","maxHeight","ref","Table","stickyHeader","TableHead","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","getFun","filterVariant","filterFn","csvConfig","mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","reportId","company","queryFilters","buttons","groupingState","dispColmn","setDispColmn","setDataArray","setColumns","filters","setFilters","filteredData","setFilteredData","showData","keys","aggregationValues","setAggregationValues","dialogs","setDialogs","aggregations","useEffect","fetchLink","address","then","success","_o$tablesList","_strucre$tables","strucre","Report_Type_Id","reportName","Report_Name","tables","tablesList","table","_table$columnsList","Table_Id","Table_Name","AliasName","Table_Accronym","isChecked","columnsList","Column_Data_Type","Column_Name","IS_Default","IS_Join_Key","Order_By","accessColumnName","allColumns","reduce","colArr","catch","method","bodyData","filterReq","ReportID","muiColumns","_column$Column_Name","accessorKey","sortable","aggregationFn","AggregatedCell","cell","getValue","applyFilters","handleExportData","csv","generateCsv","download","useMaterialReactTable","enableColumnResizing","enableGrouping","enableStickyHeader","enableStickyFooter","enableColumnOrdering","enableRowNumbers","initialState","density","pagination","pageIndex","pageSize","muiToolbarAlertBannerChipProps","muiTableContainerProps","minHeight","muiTableProps","caption","captionSide","muiTableHeadCellProps","fontWeight","muiTableBodyCellProps","renderTopToolbarCustomActions","_ref4","Box","display","gap","flexWrap","FileDownload","getPrePaginationRowModel","rowData","original","handleExportRows","SettingsOutlined","FilterAlt","memoizedTableConfig","useMemo","handleFilterChange","prevFilters","filtered","min","max","item","start","end","dateValue","Date","isArray","_filters$column$acces","includes","trim","renderFilter","_filters$accessColumn","_filters$accessColumn2","_filters$accessColumn3","_filters$accessColumn4","_filters$accessColumn5","_filters$accessColumn6","_filters$accessColumn7","_filters$accessColumn9","_filters$accessColumn10","_filters$accessColumn11","placeholder","parseFloat","_filters$accessColumn8","_filters$accessColumn12","distinctValues","_item$accessColumnNam","_item$accessColumnNam2","Autocomplete","multiple","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","_ref5","selected","Checkbox","marginRight","isOptionEqualToValue","opt","renderInput","params","TextField","label","_Fragment","MaterialReactTable","Tooltip","FilterAltOff","overflow","_column$Column_Name2","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","_column$Column_Name3","DialogActions","_o$Column_Name","_aggregationValues$o$","TabPanel","other","role","hidden","p","Typography","ReportTemplates","_localVariable$search","_localVariable$filter2","_localVariable$filter3","_localVariable$filter4","_localVariable$filter5","_localVariable$filter6","_localVariable$filter7","_localVariable$filter8","_localVariable$filter9","_localVariable$filter10","storage","JSON","parse","localStorage","getItem","templates","setTemplates","localVariable","setLocalVariable","search","openFilterDialog","filterTablesAndColumns","deleteConfirmationDialog","preFilterDialog","contextObj","useContext","MyContext","nav","useNavigate","reload","setReload","selectedTab","setSelectedTab","_filters$Column_Name$","_filters$Column_Name","_filters$Column_Name$2","_filters$Column_Name2","_filters$Column_Name$3","_filters$Column_Name3","_filters$Column_Name4","_filters$Column_Name$4","_filters$Column_Name6","_filters$Column_Name7","_filters$Column_Name$5","_filters$Column_Name9","_filters$Column_Name5","_filters$Column_Name8","Actions","anchorEl","setAnchorEl","dataToForward","ReportState","popOverOpen","currentTarget","List","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","MenuItem","ListItemIcon","Visibility","ListItemText","Company_id","toast","warn","state","Edit","Delete","_o$tablesList2","tableInd","_table$columnsList2","React","_table$columnsList3","_table$columnsList4","rowSpan","closeDialog","closeDeleteConfirmationDialog","closeFilterDialog","Card","Add_Rights","CardContent","fil","_row$tablesList","_row$tablesList2","sum","_item$columnsList","CreatedAt","UTCDateWithTime","_ref6","_ref7","fullScreen","Close","DynamicMuiTable","ArrowBackIosNewOutlined","deleteTemplate","_localVariable$filter","message","finally","Tabs","handleTabChange","Tab","_table$columns","ii","Launch"],"sourceRoot":""}