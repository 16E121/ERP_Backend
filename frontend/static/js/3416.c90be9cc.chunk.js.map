{"version":3,"file":"static/js/3416.c90be9cc.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/requiredStar.jsx","Pages/Authorization/newMenuManagement.jsx","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = ''\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: ''\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {title && <h6 className='fw-bold text-muted'>{title}</h6>}\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableMaxHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n\r\n                            {(isExpendable === true && expandableComp) && (\r\n                                <TableCell\r\n                                    className='fa-13 fw-bold border-end border-top text-center'\r\n                                    style={{ backgroundColor: '#EDF0F7' }}\r\n                                >#</TableCell>\r\n                            )}\r\n\r\n                            {EnableSerialNumber === true && (\r\n                                <TableCell\r\n                                    className='fa-13 fw-bold border-end border-top text-center'\r\n                                    style={{ backgroundColor: '#EDF0F7' }}\r\n                                >SNo</TableCell>\r\n                            )}\r\n\r\n                            {columns.map((column, ke) => {\r\n                                return (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)) && (\r\n                                    (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            )}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={\r\n                                                sortCriteria.some(criteria => criteria.columnId === column.Field_Name)\r\n                                                    ? sortCriteria.find(criteria => criteria.columnId === column.Field_Name).direction\r\n                                                    : false\r\n                                            }\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={sortCriteria.some(criteria => criteria.columnId === column.Field_Name)}\r\n                                                direction={\r\n                                                    sortCriteria.some(criteria => criteria.columnId === column.Field_Name)\r\n                                                        ? sortCriteria.find(criteria => criteria.columnId === column.Field_Name).direction\r\n                                                        : 'asc'\r\n                                                }\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader ? column.ColumnHeader : column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${column.ColumnHeader ? 'fa-13 fw-bold border-end border-top' : ' p-0 '}` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            )}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader ? column.ColumnHeader : column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                )\r\n                            })}\r\n\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? dataArray : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.element,\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined\r\n};\r\n\r\n\r\nexport default FilterableTable;","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { isEqualNumber, isValidObject } from '../../Components/functions';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tooltip } from \"@mui/material\";\r\nimport { Add, Edit } from \"@mui/icons-material\";\r\nimport { toast } from \"react-toastify\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport RequiredStar from \"../../Components/requiredStar\";\r\n\r\nconst initialValue = {\r\n    id: '',\r\n    name: '',\r\n    menu_type: 1,\r\n    parent_id: '',\r\n    url: '',\r\n    display_order: 1,\r\n    is_active: 1,\r\n    parantDetails: {},\r\n}\r\n\r\nconst MenuManagement = ({ loadingOn, loadingOff }) => {\r\n    const [inputValues, setInputValues] = useState(initialValue);\r\n    const [reload, setReload] = useState(false);\r\n    const [menuData, setMenuData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `authorization/menuMaster`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setMenuData(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [reload])\r\n\r\n    const DisplayChildMenu = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                <FilterableTable\r\n                    dataArray={row?.ChildMenu ?? []}\r\n                    title='Child Menus'\r\n                    columns={[\r\n                        {\r\n                            isVisible: 1,\r\n                            Field_Name: 'name',\r\n                            Fied_Data: 'string',\r\n                            ColumnHeader: 'Child Menu',\r\n                        },\r\n                        {\r\n                            isVisible: 1,\r\n                            Field_Name: 'url',\r\n                            Fied_Data: 'string',\r\n                            ColumnHeader: 'Address',\r\n                        },\r\n                        {\r\n                            isVisible: 1,\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => (\r\n                                <Tooltip title='Add SubRouting'>\r\n                                    <span>\r\n                                        <Button\r\n                                            size=\"small\"\r\n                                            className=\"bg-light\"\r\n                                            onClick={() => {\r\n                                                setInputValues(pre => ({\r\n                                                    ...pre,\r\n                                                    menu_type: 0,\r\n                                                    parent_id: row.id,\r\n                                                    parantDetails: row,\r\n                                                    url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                }));\r\n                                                setDialog(true);\r\n                                            }}\r\n                                            startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                        >\r\n                                            {row?.SubRoutes?.length ?? 0}\r\n                                        </Button>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            ),\r\n                            ColumnHeader: 'Sub Routings',\r\n                        },\r\n                        {\r\n                            isVisible: 1,\r\n                            Field_Name: 'display_order',\r\n                            Fied_Data: 'number',\r\n                            ColumnHeader: 'Order',\r\n                        },\r\n                        {\r\n                            isVisible: 1,\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => (\r\n                                isEqualNumber(row?.is_active, 1) ? (\r\n                                    <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                                ) : (\r\n                                    <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">In-Active</span>\r\n                                )\r\n                            ),\r\n                            ColumnHeader: 'Status',\r\n                        },\r\n                        {\r\n                            isVisible: 1,\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => (\r\n                                <>\r\n                                    <Tooltip title='Edit Menu'>\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            className=\"p-1\"\r\n                                            onClick={() => {\r\n                                                setInputValues(pre => ({\r\n                                                    ...pre,\r\n                                                    id: row?.id,\r\n                                                    name: row?.name ?? '',\r\n                                                    menu_type: 3,\r\n                                                    parent_id: row?.parent_id ?? '',\r\n                                                    url: row?.url ?? '',\r\n                                                    display_order: row?.display_order ?? '',\r\n                                                    is_active: row?.is_active ?? '',\r\n                                                }));\r\n                                                setDialog(true);\r\n                                            }}\r\n                                        >\r\n                                            <Edit sx={{ fontSize: '18px' }} />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n\r\n                                </>\r\n                            ),\r\n                            ColumnHeader: 'Action',\r\n                        }\r\n                    ]}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n    const DisplaySubMenu = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                {row.SubMenu.length > 0 && (\r\n                    <FilterableTable\r\n                        dataArray={row?.SubMenu ?? []}\r\n                        title='Sub Menus'\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'name',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Sub Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'url',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Address',\r\n                            },\r\n\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add Child-Menu'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 3,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.ChildMenu?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Child Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add SubRouting'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 0,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.SubRoutes?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Sub Routings',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'display_order',\r\n                                Fied_Data: 'number',\r\n                                ColumnHeader: 'Order',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    isEqualNumber(row?.is_active, 1) ? (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                                    ) : (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">In-Active</span>\r\n                                    )\r\n                                ),\r\n                                ColumnHeader: 'Status',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <>\r\n                                        <Tooltip title='Edit Menu'>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                className=\"p-1\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        id: row?.id,\r\n                                                        name: row?.name ?? '',\r\n                                                        menu_type: 2,\r\n                                                        parent_id: row?.parent_id ?? '',\r\n                                                        url: row?.url ?? '',\r\n                                                        display_order: row?.display_order ?? '',\r\n                                                        is_active: row?.is_active ?? '',\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                            >\r\n                                                <Edit sx={{ fontSize: '18px' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </>\r\n                                ),\r\n                                ColumnHeader: 'Action',\r\n                            }\r\n                        ]}\r\n                        tableMaxHeight={700}\r\n                        isExpendable={true}\r\n                        expandableComp={DisplayChildMenu}\r\n                    />\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setInputValues(initialValue);\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (loadingOn) {\r\n            loadingOn();\r\n        }\r\n        fetchLink({\r\n            address: 'authorization/menuMaster',\r\n            method: inputValues.id ? 'PUT' : 'POST',\r\n            bodyData: inputValues\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                closeDialog();\r\n                setReload(pre => !pre);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) {\r\n                loadingOff();\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex justify-content-end pb-2\">\r\n                <Button\r\n                    onClick={() => {\r\n                        setDialog(true);\r\n                        setInputValues(initialValue);\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    startIcon={<Add />}\r\n                >\r\n                    New Menu\r\n                </Button>\r\n            </div>\r\n\r\n            <FilterableTable\r\n                dataArray={menuData}\r\n                columns={[\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'name',\r\n                        Fied_Data: 'string',\r\n                        ColumnHeader: 'Main Menu',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'url',\r\n                        Fied_Data: 'string',\r\n                        ColumnHeader: 'Address',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <Tooltip title='Add Sub-Menu'>\r\n                                <span>\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        className=\"bg-light\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                menu_type: 2,\r\n                                                parent_id: row.id,\r\n                                                parantDetails: row,\r\n                                                url: (row?.url ?? '') + '/'\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                        startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                    >\r\n                                        {row?.SubMenu?.length ?? 0}\r\n                                    </Button>\r\n                                </span>\r\n                            </Tooltip>\r\n                        ),\r\n                        ColumnHeader: 'Sub Menu',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <Tooltip title='Add SubRouting'>\r\n                                <span>\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        className=\"bg-light\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                menu_type: 0,\r\n                                                parent_id: row.id,\r\n                                                parantDetails: row,\r\n                                                url: (row?.url ?? '') + '/'\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                        startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                    >\r\n                                        {row?.SubRoutes?.length ?? 0}\r\n                                    </Button>\r\n                                </span>\r\n                            </Tooltip>\r\n                        ),\r\n                        ColumnHeader: 'Sub Routings',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'display_order',\r\n                        Fied_Data: 'number',\r\n                        ColumnHeader: 'Order',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            isEqualNumber(row?.is_active, 1) ? (\r\n                                <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                            ) : (\r\n                                <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">In-Active</span>\r\n                            )\r\n                        ),\r\n                        ColumnHeader: 'Status',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <>\r\n                                <Tooltip title='Edit Menu'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        className=\"p-1\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                id: row?.id,\r\n                                                name: row?.name ?? '',\r\n                                                menu_type: 1,\r\n                                                parent_id: row?.parent_id ?? '',\r\n                                                url: row?.url ?? '',\r\n                                                display_order: row?.display_order ?? '',\r\n                                                is_active: row?.is_active ?? '',\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                    >\r\n                                        <Edit sx={{ fontSize: '18px' }} />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n\r\n\r\n                            </>\r\n                        ),\r\n                        ColumnHeader: 'Action',\r\n                    }\r\n                ]}\r\n                tableMaxHeight={700}\r\n                isExpendable={true}\r\n                expandableComp={DisplaySubMenu}\r\n            />\r\n\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogTitle>\r\n                    {inputValues.id ? 'Modify ' : 'Add '}\r\n                    {(() => {\r\n                        switch (inputValues.menu_type) {\r\n                            case 0:\r\n                                return 'SUB ROUTING'\r\n                            case 1:\r\n                                return 'MAIN MENU'\r\n                            case 2:\r\n                                return 'SUB MENU'\r\n                            case 3:\r\n                                return 'CHILD MENU'\r\n                            default:\r\n                                return ''\r\n                        }\r\n                    })()}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    saveData();\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            {(isValidObject(inputValues.parantDetails) && inputValues.parantDetails.name) && (\r\n                                <div className=\"col-lg-4 p-2\">\r\n                                    <label>Parant Name </label>\r\n                                    <input\r\n                                        className=\"cus-inpt\"\r\n                                        value={inputValues?.parantDetails?.name}\r\n                                        disabled\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                            <div className=\"col-lg-4 p-2\">\r\n                                <label>Name <RequiredStar /></label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.name}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, name: e.target.value }))}\r\n                                    required\r\n                                    minLength={3}\r\n                                    maxLength={20}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-4 p-2\">\r\n                                <label>URL (Link)</label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.url}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, url: e.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-4 p-2\">\r\n                                <label>Order No</label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.display_order}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, display_order: e.target.value }))}\r\n                                />\r\n                            </div>\r\n                            {inputValues.id && (\r\n                                <div className=\"col-lg-4 p-2\">\r\n                                    <label>Is Active</label>\r\n                                    <select\r\n                                        className=\"cus-inpt\"\r\n                                        value={inputValues.is_active}\r\n                                        onChange={e => setInputValues(pre => ({ ...pre, is_active: e.target.value }))}\r\n                                    >\r\n                                        <option value='' disabled>select</option>\r\n                                        <option value='1'>Active</option>\r\n                                        <option value='0'>In-Active</option>\r\n                                    </select>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            type=\"button\"\r\n                            onClick={closeDialog}\r\n                        >\r\n                            cancel\r\n                        </Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"outlined\"\r\n                        >\r\n                            save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default MenuManagement","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["FilterableTable","_ref","dataArray","columns","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","columnAlign","type","class","sortedData","data","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","row","index","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","map","column","columnInd","_columnAlign$find2","isEqualNumber","Defult_Display","isVisible","Boolean","isCustomCell","Cell","align","find","String","toLowerCase","Field_Name","Object","entries","_ref3","_columnAlign$find","key","value","console","log","Fied_Data","colSpan","Number","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","concat","ColumnHeader","replace","sortDirection","some","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","RequiredStar","color","fontWeight","initialValue","id","name","menu_type","parent_id","url","display_order","is_active","parantDetails","_inputValues$parantDe","loadingOn","loadingOff","inputValues","setInputValues","reload","setReload","menuData","setMenuData","dialog","setDialog","useEffect","fetchLink","address","then","success","catch","e","error","DisplayChildMenu","_row$ChildMenu","_Fragment","ChildMenu","_row$SubRoutes$length","_row$SubRoutes","Tooltip","Button","_row$ParantData","_row$ParantData2","_row$url","ParantData","startIcon","Add","SubRoutes","_ref4","_ref5","_row$name","_row$parent_id","_row$url2","_row$display_order","_row$is_active","Edit","closeDialog","variant","_ref11","_row$SubMenu$length","_row$SubMenu2","_row$url6","SubMenu","_ref12","_row$SubRoutes$length3","_row$SubRoutes3","_row$url7","_ref13","_ref14","_row$name3","_row$parent_id3","_row$url8","_row$display_order3","_row$is_active3","_ref6","_row$SubMenu","_ref7","_row$ChildMenu$length","_row$ChildMenu2","_row$ParantData3","_row$ParantData4","_row$url3","_ref8","_row$SubRoutes$length2","_row$SubRoutes2","_row$ParantData5","_row$ParantData6","_row$url4","_ref9","_ref10","_row$name2","_row$parent_id2","_row$url5","_row$display_order2","_row$is_active2","Dialog","onClose","maxWidth","fullWidth","DialogTitle","onSubmit","preventDefault","method","bodyData","toast","message","finally","DialogContent","isValidObject","disabled","onChange","required","minLength","maxLength","DialogActions","createSvgIcon","d"],"sourceRoot":""}