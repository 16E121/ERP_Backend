{"version":3,"file":"static/js/7668.ccfd8a95.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Purchase/billFormat.jsx","Pages/Purchase/purchaseReportForCustomer.jsx","../node_modules/@mui/icons-material/esm/Close.js","../node_modules/@mui/icons-material/esm/LaunchOutlined.js","../node_modules/@mui/icons-material/esm/Visibility.js","../node_modules/@babel/runtime/helpers/esm/typeof.js"],"sourcesContent":["import React, { Fragment, useRef, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton, Button, Popover, MenuList, MenuItem, ListItemIcon, ListItemText, Tooltip, Card } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} name\r\n * @property {Element} icon\r\n * @property {Function} onclick\r\n * @property {boolean} disabled\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n * @param {boolean} [props.PDFPrintOption]\r\n * @param {boolean} [props.ExcelPrintOption]\r\n * @param {boolean} [props.maxHeightOption]\r\n * @param {React.ReactElement} [props.ButtonArea]\r\n * @param {Array<Menu>} props.MenuButtons\r\n */\r\n\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst createPopUpMenu = (name, icon, onclick, disabled = false) => (\r\n    <MenuItem\r\n        onClick={onclick}\r\n        disabled={disabled}\r\n    >\r\n        <ListItemIcon>{icon}</ListItemIcon>\r\n        <ListItemText>{name}</ListItemText>\r\n    </MenuItem>\r\n)\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = []\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                    column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                                )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                            column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                        )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const TableActions = () => {\r\n        const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n        const popOverOpen = Boolean(anchorEl);\r\n\r\n        const handleClick = (event) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Tooltip title='Export options and more...'>\r\n                    <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </Tooltip>\r\n\r\n                <Popover\r\n                    open={popOverOpen}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                >\r\n                    <MenuList>\r\n\r\n                        {maxHeightOption && (\r\n                            <MenuItem\r\n                                onClick={() => setShowFullHeight(pre => !pre)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    {showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />\r\n                                    }\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    color={showFullHeight ? 'success' : ''}\r\n                                >Max Height</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {PDFPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => generatePDF(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download PDF</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {ExcelPrintOption && (\r\n                            <MenuItem\r\n                                onClick={() => exportToExcel(dataArray, columns)}\r\n                                disabled={isEqualNumber(dataArray?.length, 0)}\r\n                            >\r\n                                <ListItemIcon><Download fontSize=\"small\" color='primary' /></ListItemIcon>\r\n                                <ListItemText>Download Excel</ListItemText>\r\n                            </MenuItem>\r\n                        )}\r\n\r\n                        {MenuButtons.map(btn => createPopUpMenu(btn.name, btn.icon, btn.onclick, btn.disabled))}\r\n\r\n                    </MenuList>\r\n                </Popover>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && <TableActions />}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: []\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    // createPopUpMenu,\r\n}","\nimport SMT_LOGO from './smt.png';\n\nexport const customTableStyles = {\n    table: {\n        style: {\n            width: 'auto',\n            backgroundColor: 'transparent',\n            // borderRadius: '5px',\n        }\n    },\n    rows: {\n        style: {\n            backgroundColor: 'transparent',\n        },\n    },\n    headCells: {\n        style: {\n            backgroundColor: '#6b9080f8',\n            color: 'white',\n            fontSize: '14px',\n            // borderRadius: '5px',\n        },\n    },\n};\n\nexport const customSelectStyles = {\n    control: (provided, state) => ({\n        ...provided,\n        height: '45px',\n        background: 'rgba(255, 255, 255, 0.322)'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n\nexport const customSelectStyles2 = {\n    control: (provided, state) => ({\n        ...provided,\n        background: 'transparent',\n        border: 'none',\n        color: 'rgba(255, 255, 255, 0.322)',\n        // minWidth: '160px'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        color: 'black',\n        zIndex: 9999,\n    }),\n};\n\nexport const MainMenu = [\n    {\n        id: 1,\n        headname: 'Menu ID',\n        variant: 'head',\n        align: 'left',\n        width: 100\n    },\n    {\n        id: 2,\n        headname: 'MenuName',\n    },\n    {\n        id: 3,\n        headname: 'Read Rights'\n    },\n    {\n        id: 4,\n        headname: 'Add Rights'\n    },\n    {\n        id: 5,\n        headname: 'Edit Rights'\n    },\n    {\n        id: 6,\n        headname: 'Delete Rights'\n    },\n    {\n        id: 7,\n        headname: 'Print Rights'\n    },\n    {\n        id: 8,\n        headname: 'Action'\n    }\n];\n\nexport const companyDetails = [\n    {\n        dataBase: 1,\n        name: 'SHANKAR TRADERS',\n        business: 'Wholesale Merchant in Dhall',\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33AADFS6973R1ZD',\n        phone: '984-313-1353, 984-335-5166',\n        fssai: '12418012000818',\n        bankAccount: '0021 5032 0885 122',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 2,\n        name: 'SMT AGRO PRODUCTS',\n        business: '',\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33ACMFS3420Q1ZQ',\n        phone: '0452-4371625',\n        fssai: '12418012000818',\n        bankAccount: '0025 3031 0875 947',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 3,\n        name: 'BHAVANI TRADERS',\n        business: '',\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\n        logo: SMT_LOGO,\n        gstin: '33AAEFB6728J1ZG',\n        phone: '958-559-7641, 958-559-7614',\n        fssai: '12418012000670',\n        bankAccount: '0021 5005 0800 309',\n        ifsc: 'TMBL0000002'\n    },\n]","import { numberToWords } from \"../../Components/functions\";\nimport { companyDetails } from \"../../Components/tablecolumn\";\n\n\nconst InvoiceBill = ({ companyInfo, invoieInfo, expencesInfo }) => {\n\n    const getTotal = (arr, colmn) => {\n        let count = 0;\n        arr.forEach(obj => {\n            count += Number(obj[colmn]);\n        })\n        return count\n    }\n\n    return (\n        <>\n\n            <div className=\"d-flex justify-content-between align-items-center \">\n\n                <div className=\"d-flex\">\n                    <img src={companyDetails[companyInfo?.Company_Id]?.logo} className=\"invoiceLogo\" alt=\"company_logo\" />\n\n                    <div className=\"\">\n                        <p className=\"mb-0 \">{companyInfo?.Company_Name}</p>\n                        <p className=\"mb-0 text-muted\">{companyInfo?.Company_address_1}</p>\n                        <p className=\"mb-0 text-muted fa-14\">{companyInfo?.Company_address_2}</p>\n                        {companyInfo?.Company_address_3 && <p className=\"mb-0 text-muted fa-14\">{companyInfo?.Company_address_3}</p>}\n                    </div>\n                </div>\n\n                <div className=\"table-responsive\">\n                    <table className=\"table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"p-1 border-0 fa-13\">GSTIN</td>\n                                <td className=\"p-1 border-0 fa-13 text-end\">{companyInfo?.Company_GSTIN}</td>\n                            </tr>\n                            <tr>\n                                <td className=\"p-1 border-0 fa-13\">PHONE</td>\n                                <td className=\"p-1 border-0 fa-13 text-end\">{companyInfo?.Company_Mobile}</td>\n                            </tr>\n                            <tr>\n                                <td className=\"p-1 border-0 fa-13\">FSSAI</td>\n                                <td className=\"p-1 border-0 fa-13 text-end\">{companyInfo?.fssai_no}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <p className=\"mb-0 fa-13 d-flex\">\n                        <span className=\"flex-grow-1 text-muted\"> </span>\n                        <span > </span>\n                    </p>\n                    <p className=\"mb-0 fa-13 d-flex\">\n                        <span className=\"flex-grow-1 text-muted\"></span>\n                        <span></span>\n                    </p>\n                    <p className=\"mb-0 fa-13 d-flex\">\n                        <span className=\"flex-grow-1 text-muted\"></span>\n                        <span></span>\n                    </p>\n                </div>\n\n            </div>\n\n            {/* to address */}\n            <table className=\"table mb-0 border\">\n                <tbody>\n                    <tr>\n                        <td className=\"border\">\n                            <p className=\"fa-13 mb-0\">To</p>\n                            <p className=\"fa-13 mb-0 ps-3 fw-bold\">{companyInfo?.Customer_name}</p>\n                            <p className=\"fa-13 mb-0 ps-3\">{companyInfo?.Customer_Mobile}</p>\n                            <p className=\"fa-13 mb-0 ps-3\">GSTIN: {companyInfo?.Customer_GSTIN}</p>\n                        </td>\n                        <td className=\"border\">\n                            <p className=\"mb-0 d-flex fa-13\">\n                                Date:\n                                <span className=\"flex-grow-1 ps-2 text-primary\">\n                                    {companyInfo?.invoice_date\n                                        ? new Date(companyInfo?.invoice_date).toLocaleDateString('en-IN', { day: '2-digit', month: '2-digit', year: '2-digit' })\n                                        : ''\n                                    }\n                                </span>\n                                <span>{companyInfo?.Bill_Type}</span>\n                            </p>\n                            <p className=\"fa-13 mb-0\">Bill No: {companyInfo?.invoice_no}</p>\n                            <p className=\"fa-13 mb-0 d-flex\">\n                                <span className=\"flex-grow-1\">Broker: {companyInfo?.Broker_Name}</span>\n                                <span>Transpoter: {companyInfo?.Transporter}</span>\n                            </p>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n\n            {/* invoice items */}\n            <div className=\"table-responsive\">\n                <table className=\"table mb-0\">\n                    <thead>\n                        <tr>\n                            <th className=\"fa-13 border\">Sno</th>\n                            <th className=\"fa-13 border\">Items</th>\n                            <th className=\"fa-13 border\">HSN</th>\n                            <th className=\"fa-13 border\">GST</th>\n                            <th className=\"fa-13 border\">Qty</th>\n                            <th className=\"fa-13 border\">Rate</th>\n                            <th className=\"fa-13 border\">Bags</th>\n                            <th className=\"fa-13 border\">Amount</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {invoieInfo?.map((o, i) => (\n                            <tr key={i}>\n                                <td className=\"fa-13 border\">{i + 1}</td>\n                                <td className=\"fa-13 border\">{o?.stock_item_name}</td>\n                                <td className=\"fa-13 border\">{o?.hsn_code}</td>\n                                <td className=\"fa-13 border\">{Number(o?.igst) ? o?.igst : Number(o?.cgst) + Number(o.sgst)}</td>\n                                <td className=\"fa-13 border\">{Number(o?.bill_qty).toLocaleString('en-IN')}</td>\n                                <td className=\"fa-13 border\">{(o?.amount / o?.bill_qty).toLocaleString('en-IN')}</td>\n                                <td className=\"fa-13 border\">{Number(o?.bags ? o?.bags : o?.bill_alt_qty).toLocaleString('en-IN')}</td>\n                                <td className=\"fa-13 border\">{Number(o?.amount).toLocaleString('en-IN')}</td>\n                            </tr>\n                        ))}\n                        <tr>\n                            <td className=\"fa-13 border\" colSpan={4}>\n                                <span className=\"fw-bold\">BANK: </span>\n                                {companyInfo?.bank_name}\n                            </td>\n                            <td className=\"fa-13 border\">{getTotal(invoieInfo, 'bill_qty').toLocaleString('en-IN')}</td>\n                            <td className=\"fa-13 border\"></td>\n                            <td className=\"fa-13 border\">{getTotal(invoieInfo, 'bill_alt_qty').toLocaleString('en-IN')}</td>\n                            <td className=\"fa-13 border\">{getTotal(invoieInfo, 'amount').toLocaleString('en-IN')}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"fa-13 border fw-bold\" colSpan={6}>{numberToWords(companyInfo?.total_invoice_value)} Only</td>\n                            <td className=\"fa-13 border\" colSpan={2}>\n                                {expencesInfo.map((o, i) => (\n                                    <p className=\"d-flex mb-0\" key={i}>\n                                        <span className=\"flex-grow-1\">{o?.ledger_name}</span>\n                                        <span>{Number(o?.amount_value_DR || o?.amount_value_CR).toLocaleString('en-IN')}</span>\n                                    </p>\n                                ))}\n                                <p className=\"d-flex mb-0\">\n                                    <span className=\"flex-grow-1\">Net:</span>\n                                    <span className=\"fa-18\">{Number(companyInfo?.total_invoice_value).toLocaleString('en-IN')}</span>\n                                </p>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            {/* tax info */}\n            <div className=\"table-responsive\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th className=\"border fa-13 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>HSN / SAC</th>\n                            <th className=\"border fa-13 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>Taxable Value</th>\n                            <th className=\"border fa-13 text-center\" colSpan={2}>Central Tax</th>\n                            <th className=\"border fa-13 text-center\" colSpan={2}>State Tax</th>\n                            <th className=\"border fa-13 text-center\">Total</th>\n                        </tr>\n                        <tr>\n                            <th className=\"border fa-13 text-center\">Rate</th>\n                            <th className=\"border fa-13 text-center\">Amount</th>\n                            <th className=\"border fa-13 text-center\">Rate</th>\n                            <th className=\"border fa-13 text-center\">Amount</th>\n                            <th className=\"border fa-13 text-center\">Tax Amount</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {invoieInfo.map((o, i) => (\n                            <tr key={i}>\n                                <td className=\"border fa-13 text-end\">{o?.hsn_code}</td>\n                                <td className=\"border fa-13 text-end\">{Number(o?.amount).toLocaleString('en-IN')}</td>\n                                <td className=\"border fa-13 text-end\">{o?.cgst}</td>\n                                <td className=\"border fa-13 text-end\">{(o?.cgst ? (o?.amount / 100) * o?.cgst : 0).toLocaleString('en-IN', { maximumFractionDigits: 2 })}</td>\n                                <td className=\"border fa-13 text-end\">{o?.sgst}</td>\n                                <td className=\"border fa-13 text-end\">{(o?.sgst ? (o?.amount / 100) * o?.sgst : 0).toLocaleString('en-IN', { maximumFractionDigits: 2 })}</td>\n                                <td className=\"border fa-13 text-end\">\n                                    {(Number((o?.cgst ? (o?.amount / 100) * o?.cgst : 0) + (o?.sgst ? (o?.amount / 100) * o?.sgst : 0))).toLocaleString('en-IN', { maximumFractionDigits: 2 })}\n                                </td>\n                            </tr>\n                        ))}\n                        <tr>\n                            <td className=\"border fa-13 text-end\">Total</td>\n                            <td className=\"border fa-13 text-end\">{getTotal(invoieInfo, 'amount').toLocaleString('en-IN')}</td>\n                            <td className=\"border fa-13 text-end\"></td>\n                            <td className=\"border fa-13 text-end\">\n                                {(() => {\n                                    let total = 0;\n                                    invoieInfo.forEach(o => {\n                                        total += o?.cgst ? (o?.amount / 100) * o?.cgst : 0\n                                    });\n                                    return total.toLocaleString('en-IN', { maximumFractionDigits: 2 });\n                                })()}\n                            </td>\n                            <td className=\"border fa-13 text-end\"></td>\n                            <td className=\"border fa-13 text-end\">\n                                {(() => {\n                                    let total = 0;\n                                    invoieInfo.forEach(o => {\n                                        total += o?.sgst ? (o?.amount / 100) * o?.sgst : 0\n                                    });\n                                    return total.toLocaleString('en-IN', { maximumFractionDigits: 2 });\n                                })()}\n                            </td>\n                            <td className=\"border fa-13 text-end\">\n                                {(() => {\n                                    let totalCGST = 0;\n                                    let totalSGST = 0;\n                                    invoieInfo.forEach(o => {\n                                        totalCGST += o?.cgst ? (o?.amount / 100) * o?.cgst : 0;\n                                        totalSGST += o?.sgst ? (o?.amount / 100) * o?.sgst : 0;\n                                    });\n                                    const totalCombined = totalCGST + totalSGST;\n                                    return totalCombined.toLocaleString('en-IN', { maximumFractionDigits: 2 });\n                                })()}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </>\n    )\n}\n\nexport default InvoiceBill;","import { Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Button } from \"@mui/material\";\nimport { useReactToPrint } from 'react-to-print';\nimport { useEffect, useRef, useState } from \"react\";\nimport { Close, LaunchOutlined, Visibility } from '@mui/icons-material';\nimport InvoiceBill from \"./billFormat\";\nimport { NumberFormat } from \"../../Components/functions\";\nimport { fetchLink } from \"../../Components/fetchComponent\";\nimport FilterableTable from \"../../Components/filterableTable2\";\n\nconst PurchaseReportForCustomer = () => {\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\n    const [sales, setSales] = useState([]);\n    const [salesInfo, setSalesInfo] = useState([]);\n    const [total, setTotal] = useState(0)\n    const [dialog, setDialog] = useState({\n        salesInfoDialog: false,\n        billDialog: false\n    });\n    const [companyInfo, setCompanyInfo] = useState({});\n    const [invoieInfo, setInvoiceInfo] = useState([]);\n    const [expencesInfo, setExpencesInfo] = useState([]);\n    const printRef = useRef()\n\n    useEffect(() => {\n        fetchLink({\n            address: `userModule/customer/customerSalesReport?UserId=${storage?.UserId}`,\n        }).then(data => {\n            if (data.success) {\n                setSales(data.data)\n                let temp = 0;\n                data.data.forEach(obj => {\n                    temp += Number(obj?.Total_Amount)\n                    console.log(obj?.Total_Amount)\n                })\n                setTotal(temp)\n            }\n        }).catch(e => console.error(e));\n\n    }, [])\n\n    const getSalesDetials = (obj) => {\n        setSalesInfo([]);\n        fetchLink({\n            address: `userModule/customer/salesInfo?Cust_Id=${obj?.Cust_Id}&Acc_Id=${obj?.tally_id}&Company_Id=${obj?.Company_Id}`\n        }).then(data => {\n            if (data.success) {\n                setSalesInfo(data.data);\n                setDialog(pre => ({ ...pre, salesInfoDialog: true }))\n            }\n        }).catch(e => console.log(e))\n    }\n\n    const fetchInvoiceDetails = (CompanyId, Invoice_No) => {\n        setCompanyInfo({});\n        setInvoiceInfo([]);\n        setExpencesInfo([]);\n        if (CompanyId && Invoice_No) {\n            fetchLink({\n                address: `userModule/customer/invoiceDetails?Company_Id=${CompanyId}&UserId=${storage?.UserId}&Invoice_No=${Invoice_No}`\n            }).then(data => {\n                if (data.success) {\n                    if (data?.data[0]?.length) {\n                        const company = data.data[0]\n                        setCompanyInfo(company[0])\n                    }\n                    if (data?.data[1]?.length) {\n                        setInvoiceInfo(data?.data[1]);\n                    }\n                    if (data?.data[2].length) {\n                        setExpencesInfo(data?.data[2])\n                    }\n                    setDialog(pre => ({ ...pre, billDialog: true }));\n                }\n            }).catch(e => console.log(e))\n        }\n    }\n\n    const handlePrint = useReactToPrint({\n        content: () => printRef.current,\n    });\n\n    return (\n        <>\n            <div className=\"card\">\n                <div className=\"card-header py-3 bg-white\" >\n                    <p className=\"mb-0 fw-bold\" >\n                        <span>Balance of {storage?.Name}</span>\n                        <span className={total > 0 ? 'text-primary' : 'text-danger'}> &nbsp;( {NumberFormat(total)} {(total < 0 ? ' CR' : ' DR')} )</span>\n                    </p>\n                </div>\n                <div className=\"card-body p-0 table-responsive\" style={{ maxHeight: '80vh' }}>\n                    <table className=\"table\" >\n                        <thead>\n                            <tr>\n                                {['S.No', '-', 'Company', 'Ledger', 'Balance', 'Dr/Cr'].map((o, i) => (\n                                    <th className=\"tble-hed-stick fa-13\" key={i}>{o}</th>\n                                ))}\n                            </tr>\n                        </thead>\n                        <tbody >\n                            {sales.map((o, i) => (\n                                <tr key={i}>\n                                    <td style={{ fontSize: '13px' }}>{i + 1}</td>\n                                    <td style={{ fontSize: '13px' }}>\n                                        <button\n                                            className=\"icon-btn\"\n                                            onClick={() => { getSalesDetials(o) }}>\n                                            <LaunchOutlined sx={{ fontSize: 'inherit' }} />\n                                        </button>\n                                    </td>\n                                    <td style={{ fontSize: '13px' }}>{o?.Company_Name}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.ledger_name}</td>\n                                    <td style={{ fontSize: '13px' }}>{NumberFormat(o?.Total_Amount)}</td>\n                                    <td style={{ fontSize: '13px' }}>{o?.Total_Count}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <Dialog\n                fullScreen\n                open={dialog.salesInfoDialog}\n                onClose={() => setDialog(pre => ({ ...pre, salesInfoDialog: false }))}>\n                <DialogTitle className=\"d-flex\">\n                    Sales List Of\n                    <span className=\"text-primary flex-grow-1\"> {salesInfo[0]?.Customer_name}</span>\n                    <IconButton size=\"small\" color='error' onClick={() => setDialog(pre => ({ ...pre, salesInfoDialog: false }))}>\n                        <Close />\n                    </IconButton>\n                </DialogTitle>\n                <DialogContent> \n                    <FilterableTable\n                        dataArray={salesInfo}\n                        columns={[\n                            {\n                                Field_Name: 'invoice_date',\n                                isVisible: 1,\n                                Fied_Data: 'date',\n                            },\n                            {\n                                Field_Name: 'invoice_no',\n                                isVisible: 1,\n                                Fied_Data: 'string',\n                            },\n                            {\n                                Field_Name: 'total_invoice_value',\n                                isVisible: 1,\n                                Fied_Data: 'number',\n                            },\n                            {\n                                Field_Name: 'View_Bill',\n                                isVisible: 1,\n                                isCustomCell: true,\n                                Cell: ({ row }) => (\n                                    <IconButton onClick={() => fetchInvoiceDetails(row?.Company_Id, row?.invoice_no)} size=\"small\">\n                                        <Visibility />\n                                    </IconButton>\n                                )\n                            },\n                        ]}\n                        EnableSerialNumber={true}\n                        tableMaxHeight={720}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button color='error' variant='outlined' onClick={() => setDialog(pre => ({ ...pre, salesInfoDialog: false }))}>close</Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={dialog.billDialog}\n                onClose={() => setDialog(pre => ({ ...pre, billDialog: false }))}\n                fullWidth maxWidth='lg'\n            >\n                <DialogTitle className=\"border-bottom text-primary d-flex align-items-center fa-18\">\n                    <span className=\"flex-grow-1\">Invoice Details</span>\n                    <Button\n                        className=\"fw-bold\"\n                        onClick={handlePrint}>\n                        PDF\n                    </Button>\n                    <IconButton size=\"small\" className=\"bg-light\" onClick={() => setDialog(pre => ({ ...pre, billDialog: false }))}>\n                        <Close />\n                    </IconButton>\n                </DialogTitle>\n                <DialogContent className=\"p-0\" ref={printRef}>\n                    <InvoiceBill invoieInfo={invoieInfo} companyInfo={companyInfo} expencesInfo={expencesInfo} />\n                </DialogContent>\n            </Dialog>\n        </>\n    )\n}\n\nexport default PurchaseReportForCustomer;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'LaunchOutlined');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","FilterableTable","_ref","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Boolean","find","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","value","console","log","colSpan","Number","TableActions","anchorEl","setAnchorEl","popOverOpen","_Fragment","Tooltip","event","currentTarget","MoreVert","Popover","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","MenuItem","disabled","ListItemIcon","ToggleOn","color","ToggleOff","ListItemText","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","Download","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","btn","name","icon","onclick","createPopUpMenu","Card","component","Paper","TableContainer","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","width","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_companyDetails$compa","companyInfo","invoieInfo","expencesInfo","getTotal","arr","colmn","obj","src","Company_Id","alt","Company_Name","Company_address_1","Company_address_2","Company_address_3","Company_GSTIN","Company_Mobile","fssai_no","Customer_name","Customer_Mobile","Customer_GSTIN","invoice_date","Date","toLocaleDateString","day","month","year","Bill_Type","invoice_no","Broker_Name","Transporter","stock_item_name","hsn_code","igst","cgst","sgst","bill_qty","toLocaleString","amount","bags","bill_alt_qty","bank_name","numberToWords","total_invoice_value","ledger_name","amount_value_DR","amount_value_CR","rowSpan","maximumFractionDigits","total","totalCGST","totalSGST","PurchaseReportForCustomer","_salesInfo$","storage","JSON","parse","localStorage","getItem","sales","setSales","salesInfo","setSalesInfo","setTotal","dialog","setDialog","salesInfoDialog","billDialog","setCompanyInfo","setInvoiceInfo","setExpencesInfo","printRef","useRef","useEffect","fetchLink","UserId","then","success","temp","Total_Amount","catch","handlePrint","useReactToPrint","content","current","Name","Cust_Id","tally_id","LaunchOutlined","Total_Count","Dialog","fullScreen","DialogTitle","Close","DialogContent","fetchInvoiceDetails","CompanyId","Invoice_No","_data$data$","_data$data$2","company","Visibility","DialogActions","Button","fullWidth","maxWidth","ref","InvoiceBill","createSvgIcon","d","_typeof","Symbol","iterator","constructor","prototype"],"sourceRoot":""}