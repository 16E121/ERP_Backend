{"version":3,"file":"static/js/2744.11d27ef1.chunk.js","mappings":"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","sources":["Components/requiredStar.jsx","Components/tablecolumn.js","Pages/ProjectList/addEditProject.jsx","Pages/employeeManagement/employeeManagement.jsx","Pages/Tasks/Components/newaddEditTask.jsx","Pages/Tasks/taskAssign/addEditTaskAssign.jsx","Pages/Tasks/taskDetails/taskIndividual.jsx","Pages/Tasks/taskDetails/listingTask.jsx","Pages/Masters/ProjectList.jsx"],"sourcesContent":["const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\nimport SMT_LOGO from './smt.png';\n\nexport const customTableStyles = {\n    table: {\n        style: {\n            width: 'auto',\n            backgroundColor: 'transparent',\n            // borderRadius: '5px',\n        }\n    },\n    rows: {\n        style: {\n            backgroundColor: 'transparent',\n        },\n    },\n    headCells: {\n        style: {\n            backgroundColor: '#6b9080f8',\n            color: 'white',\n            fontSize: '14px',\n            // borderRadius: '5px',\n        },\n    },\n};\n\nexport const customSelectStyles = {\n    control: (provided, state) => ({\n        ...provided,\n        height: '45px',\n        background: 'rgba(255, 255, 255, 0.322)'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n\nexport const customSelectStyles2 = {\n    control: (provided, state) => ({\n        ...provided,\n        background: 'transparent',\n        border: 'none',\n        color: 'rgba(255, 255, 255, 0.322)',\n        // minWidth: '160px'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        color: 'black',\n        zIndex: 9999,\n    }),\n};\n\nexport const MainMenu = [\n    {\n        id: 1,\n        headname: 'Menu ID',\n        variant: 'head',\n        align: 'left',\n        width: 100\n    },\n    {\n        id: 2,\n        headname: 'MenuName',\n    },\n    {\n        id: 3,\n        headname: 'Read Rights'\n    },\n    {\n        id: 4,\n        headname: 'Add Rights'\n    },\n    {\n        id: 5,\n        headname: 'Edit Rights'\n    },\n    {\n        id: 6,\n        headname: 'Delete Rights'\n    },\n    {\n        id: 7,\n        headname: 'Print Rights'\n    },\n    {\n        id: 8,\n        headname: 'Action'\n    }\n];\n\nexport const companyDetails = [\n    {\n        dataBase: 1,\n        name: 'SHANKAR TRADERS',\n        business: 'Wholesale Merchant in Dhall',\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33AADFS6973R1ZD',\n        phone: '984-313-1353, 984-335-5166',\n        fssai: '12418012000818',\n        bankAccount: '0021 5032 0885 122',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 2,\n        name: 'SMT AGRO PRODUCTS',\n        business: '',\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33ACMFS3420Q1ZQ',\n        phone: '0452-4371625',\n        fssai: '12418012000818',\n        bankAccount: '0025 3031 0875 947',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 3,\n        name: 'BHAVANI TRADERS',\n        business: '',\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\n        logo: SMT_LOGO,\n        gstin: '33AAEFB6728J1ZG',\n        phone: '958-559-7641, 958-559-7614',\n        fssai: '12418012000670',\n        bankAccount: '0021 5005 0800 309',\n        ifsc: 'TMBL0000002'\n    },\n]","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport RequiredStar from '../../Components/requiredStar';\r\nimport { ISOString } from '../../Components/functions';\r\n\r\nconst ProjectForm = ({ open, onClose, inputValue, isEdit, setReload }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n\r\n    const [projectHead, setProjectHead] = useState([]);\r\n    const [proStatus, setProStatus] = useState([]);\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        Project_Id: '',\r\n        Project_Name: '',\r\n        Project_Desc: '',\r\n        Project_Head: '',\r\n        Est_Start_Dt: ISOString(),\r\n        Est_End_Dt: ISOString(),\r\n        Project_Status: '',\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            setProjectHead(data.success ? data.data : []);\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, [parseData?.Company_id]);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `taskManagement/statusList`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProStatus(data.data);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (open) {\r\n            console.log('inputValue',inputValue)\r\n\r\n            if (isEdit && inputValue) {\r\n                console.log(inputValue)\r\n                setFormData({\r\n                    ...inputValue,\r\n                    Project_Head:inputValue.Proejct_Head|| '',\r\n                    Est_Start_Dt: inputValue.Est_Start_Dt ? ISOString(inputValue.Est_Start_Dt) : '',\r\n                    Est_End_Dt: inputValue.Est_End_Dt ? ISOString(inputValue.Est_End_Dt) : '',\r\n                });\r\n            } else if (!isEdit) {\r\n\r\n                setFormData({\r\n                    Project_Id: '',\r\n                    Project_Name: '',\r\n                    Project_Desc: '',\r\n                    Project_Head: '',\r\n                    Est_Start_Dt: ISOString(),\r\n                    Est_End_Dt: ISOString(),\r\n                    Project_Status: '',\r\n                    Entry_By: parseData?.UserId,\r\n                    Company_id: parseData?.Company_id\r\n                });\r\n            }\r\n        }\r\n    }, [inputValue, open, isEdit]);\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const validateFields = () => {\r\n        const requiredFields = [\r\n            'Project_Name',\r\n            'Project_Head',\r\n            'Est_Start_Dt',\r\n            'Est_End_Dt',\r\n            'Project_Status',\r\n        ];\r\n\r\n        for (const field of requiredFields) {\r\n            if (!formData[field]) {\r\n                toast.error(`${field.replace(/_/g, ' ')} is required`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    const createFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        const payload = {\r\n            ...formData,\r\n            Company_id: parseData.Company_id\r\n        };\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'POST',\r\n            bodyData: payload,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => {\r\n            console.error('Fetch Error:', e);\r\n            toast.error(\"An error occurred while creating the project.\");\r\n        });\r\n    };\r\n\r\n    const editFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'PUT',\r\n            bodyData: formData,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        isEdit ? editFun() : createFun();\r\n    };\r\n\r\n    const inputFields = [\r\n        {\r\n            label: 'Project Name',\r\n            elem: 'input',\r\n            type: 'text',\r\n            required: true,\r\n            name: 'Project_Name',\r\n            value: formData.Project_Name || '',\r\n        },\r\n        {\r\n            label: \"Project Head\",\r\n            elem: \"select\",\r\n            options: projectHead.map(obj => ({ value: obj?.UserId, label: obj?.Name })),\r\n            required: true,\r\n            name: 'Project_Head',\r\n            value: formData.Project_Head || '',\r\n        },\r\n        {\r\n            label: 'Estimated Start Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_Start_Dt',\r\n            value: formData.Est_Start_Dt || '',\r\n        },\r\n        {\r\n            label: 'Estimated End Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_End_Dt',\r\n            value: formData.Est_End_Dt || '',\r\n        },\r\n        {\r\n            label: 'Project Status',\r\n            elem: 'select',\r\n            options: proStatus.map(obj => ({ value: obj.Status_Id, label: obj.Status })),\r\n            required: true,\r\n            name: 'Project_Status',\r\n            value: formData.Project_Status || '',\r\n        },\r\n        {\r\n            label: 'Description',\r\n            elem: 'textarea',\r\n            name: 'Project_Desc',\r\n            value: formData.Project_Desc || ' ',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} onClose={onClose}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? \"Edit Project\" : 'Create Project'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"row\">\r\n                            {inputFields.map((field, index) => (\r\n                                <div key={index} className=\"col-lg-4 mb-3\">\r\n                                    <label>{field.label} {field.required && <RequiredStar />}</label>\r\n                                    {field.elem === 'textarea' ? (\r\n                                        <textarea\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    ) : field.elem === 'select' ? (\r\n                                        <select\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            <option value=''>Select</option>\r\n                                            {field.options && field.options.map((option, idx) => (\r\n                                                <option key={idx} value={option.value}>{option.label}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    ) : (\r\n                                        <input\r\n                                            type={field.type}\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <DialogActions>\r\n                            <button\r\n                                className=\"btn btn-light rounded-5 px-3\"\r\n                                type=\"button\"\r\n                                onClick={onClose}>\r\n                                Cancel\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-primary rounded-5 px-3\"\r\n                                type='submit'>\r\n                                {isEdit ? \"Update\" : \"Submit\"}\r\n                            </button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectForm;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Autocomplete,\r\n    TextField,\r\n} from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Box } from '@mui/material';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport Popper from '@mui/material/Popper';\r\n\r\nconst EmployeeManagementDialog = ({ open, onClose, projectId, onReload }) => {\r\n\r\n    const initialValue = {\r\n        Name: '',\r\n        Designation_Name: '',\r\n        BranchName: ''\r\n    }\r\n\r\n    const [employees, setEmployees] = useState(initialValue);\r\n    const [loading, setLoading] = useState(true);\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open && projectId) {\r\n            fetchEmployeeDetails();\r\n            fetchDropdownEmployees();\r\n            fetchAssignedEmployees();\r\n        }\r\n    }, [open, projectId]);\r\n\r\n    const CustomPopper = (props) => {\r\n        return <Popper {...props} placement=\"top\" />;\r\n    };\r\n\r\n    const fetchEmployeeDetails = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employee details\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchAssignedEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setSelectedEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch assigned employees\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddEmployeeOpen = () => {\r\n        setAddEmployeeDialogOpen(true);\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n        onClosed()\r\n        setEmployees(initialValue)\r\n    };\r\n\r\n    const handleAddEmployees = async () => {\r\n        if (Number(contextObj?.Add_Rights) === 1) {\r\n            try {\r\n                const response = await fetchLink({\r\n                    address: 'masters/Employeedetails/employeeAdd',\r\n                    method: 'POST',\r\n                    bodyData: {\r\n                        Project_Id: projectId,\r\n                        UserIds: selectedEmployees.map(emp => emp.UserId),\r\n                    },\r\n                });\r\n\r\n                if (response.success) {\r\n                    toast.success(\"Employees added successfully\");\r\n                    setAddEmployeeDialogOpen(false);\r\n                    await fetchEmployeeDetails();\r\n                    await fetchAssignedEmployees();\r\n                    onReload();\r\n                } else {\r\n                    toast.error(\"Failed to add employees\");\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n                toast.error(\"Error adding employees\");\r\n            }\r\n        }\r\n    };\r\n    const onClosed = () => {\r\n\r\n        onClose()\r\n        setEmployees(initialValue);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" marginTop={2} marginInlineStart={2}>\r\n                    <span>Employee Details</span>\r\n\r\n{/* <Button variant=\"contained\" color=\"primary\"    style={{ marginRight: '18px ' }}   onClick={onClosed}>Close</Button> */}\r\n<DialogActions>\r\n                    <Button \r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAddEmployeeOpen}\r\n                        sx={{ mr: 1 }}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n{/* \r\n                    <button\r\n                        className='btn btn-light'\r\n                        style={{ marginRight: '18px ',color:'#1976d2' }}\r\n                     \r\n                        onClick={onClosed}\r\n                    >\r\n                        Close\r\n                    </button> */}\r\n                </Box>\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <p>Loading...</p>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Employee Name</TableCell>\r\n                                        <TableCell>Position</TableCell>\r\n                                        <TableCell>Department</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {Array.isArray(employees) && employees.length > 0 ? (\r\n                                        employees.map(user => (\r\n                                            <TableRow key={user.EmployeeId || user.UserId}>\r\n                                                <TableCell>{user.Name || 'N/A'}</TableCell>\r\n                                                <TableCell>{user.Designation_Name || '-'}</TableCell>\r\n                                                <TableCell>{user.BranchName || '-'}</TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={3}>No data available</TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onClosed}>Close</Button>\r\n                </DialogActions>\r\n\r\n                </Dialog>\r\n\r\n            <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                // onClose={handleAddEmployeeClose}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                    <Autocomplete\r\n                        multiple\r\n                        options={dropdownEmployees}\r\n                        getOptionLabel={(option) => option.Name}\r\n                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                        onChange={(event, value) => {\r\n                            const uniqueValues = value.filter((val, index, self) =>\r\n                                index === self.findIndex((t) => (\r\n                                    t.UserId === val.UserId\r\n                                ))\r\n                            );\r\n                            setSelectedEmployees(uniqueValues);\r\n                        }}\r\n                        PopperComponent={CustomPopper}\r\n                        value={selectedEmployees}\r\n                        onClose={onclose}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} placeholder=\"Employees\" />\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                    <Button onClick={handleAddEmployees} variant='contained' color=\"primary\">Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EmployeeManagementDialog;\r\n","import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport '../../common.css';\r\nimport { CheckBoxOutlineBlank, CheckBox } from '@mui/icons-material';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Checkbox, TextField, Autocomplete } from '@mui/material';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { isValidObject } from '../../../Components/functions';\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst TaskMasterMgt = ({ row, children, openAction, reload, onCloseFun, loadingOn, loadingOff, onTaskAdded }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    \r\n    const initialValue = {\r\n        Task_Id: \"\",\r\n        Task_Name: \"\",\r\n        Task_Desc: \"\",\r\n        Task_Group_Id: \"\",\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id,\r\n        Entry_Date: \"\",\r\n        Update_By: '',\r\n        Update_Date: \"\",\r\n        Task_Parameters: [],\r\n    };\r\n\r\n    const [dialog, setDialog] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [taskGroup, setTaskGroup] = useState([]);\r\n    const [taskParameters, setTaskParameters] = useState([]);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n    const [editDialog, setEditDialog] = useState(false);\r\n    const [editInputValue, setEditInputValue] = useState(initialValue);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const taskResponse = await fetchLink({ address: `taskManagement/tasks/dropdown` });\r\n                if (taskResponse.success) setTaskData(taskResponse.data);\r\n\r\n                const taskGroupResponse = await fetchLink({ address: `masters/taskType/dropDown` });\r\n                if (taskGroupResponse.success) setTaskGroup(taskGroupResponse.data);\r\n\r\n                const taskParametersResponse = await fetchLink({ address: `taskManagement/parameters` });\r\n                if (taskParametersResponse.success) setTaskParameters(taskParametersResponse.data);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setDialog(openAction);\r\n    }, [openAction]);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(row)) {\r\n            setInputValue(prev => ({\r\n                ...prev,\r\n                ...row,\r\n                Task_Group_Id: row.Task_Group_Id || \"\",\r\n            }));\r\n            setIsEdit(true);\r\n        } else {\r\n            setInputValue(initialValue);\r\n            setIsEdit(false);\r\n        }\r\n    }, [row]);\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        if (onCloseFun) onCloseFun();\r\n    };\r\n\r\n    const closeEditDialog = () => {\r\n        setEditDialog(false); \r\n        setEditInputValue(initialValue); \r\n    };\r\n\r\n    const postAndPutTask = async () => {\r\n        const paramArr = inputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...inputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: isEdit ? 'PUT' : 'POST',\r\n                bodyData: PostObj,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                closeDialog();\r\n                if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded();\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    // const openEditDialog = () => {\r\n    //     setEditInputValue({\r\n    //         ...inputValue,\r\n    //         Task_Group_Id: inputValue.Type_Task_Id, \r\n    //     });\r\n\r\n    //     setEditDialog(true);\r\n    // };\r\n\r\n    const handleEditSubmit = async () => {\r\n        const paramArr = editInputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...editInputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: 'PUT',\r\n                bodyData: PostObj,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                closeEditDialog();\r\n                // if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded();\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span onClick={() => setDialog(true)} style={{ cursor: 'pointer' }}>{children}</span>\r\n\r\n            <Dialog open={dialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? 'Edit Task' : 'Add Task'}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    postAndPutTask();\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Name <RequiredStar /></label>\r\n                                <input\r\n                                    maxLength={150}\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Name: e.target.value })}\r\n                                    required\r\n                                    value={inputValue.Task_Name}\r\n                                    placeholder=\"ex: File Checking\"\r\n                                    className=\"cus-inpt\" />\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Group <RequiredStar /></label>\r\n                                <select\r\n                                    value={inputValue.Task_Group_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    required\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Group_Id: e.target.value })}>\r\n                                    <option value=\"\" disabled>- select -</option>\r\n                                    {taskGroup.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Type_Id}>\r\n                                            {o.Task_Type}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Base Task</label>\r\n                                <select\r\n                                    value={inputValue.Under_Task_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Under_Task_Id: e.target.value })}>\r\n                                    <option value={0}>Primary</option>\r\n                                    {taskData.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Id}>\r\n                                            {o.Task_Name}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-12\">\r\n                                <label>Task Description <RequiredStar /></label>\r\n                                <textarea\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValue.Task_Desc}\r\n                                    rows=\"3\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Desc: e.target.value })} />\r\n                            </div>\r\n                            <div className=\"col-md-12 p-2\">\r\n                                <Autocomplete\r\n                                    multiple\r\n                                    id=\"checkboxes-tags-demo\"\r\n                                    options={taskParameters}\r\n                                    disableCloseOnSelect\r\n                                    getOptionLabel={(option) => `${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                    value={inputValue.Task_Parameters || []}\r\n                                    onChange={(event, newValue) => setInputValue({ ...inputValue, Task_Parameters: newValue })}\r\n                                    renderOption={(props, option, { selected }) => (\r\n                                        <li {...props}>\r\n                                            <Checkbox\r\n                                                icon={icon}\r\n                                                checkedIcon={checkedIcon}\r\n                                                style={{ marginRight: 8 }}\r\n                                                checked={selected}\r\n                                            />\r\n                                            {`${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                        </li>\r\n                                    )}\r\n                                    className=\"pt-2\"\r\n                                    isOptionEqualToValue={(opt, val) => Number(opt.Paramet_Id) === Number(val.Paramet_Id)}\r\n                                    renderInput={(params) => (\r\n                                        <TextField {...params} label=\"Task Parameters\" placeholder=\"Choose Task Parameters\" />\r\n                                    )}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValue.Task_Parameters.map((param, index) => (\r\n                                <div key={index} className=\"col-md-4 p-2\">\r\n                                    <label className=\"mb-2\">{param.Paramet_Name}</label>\r\n                                    <input\r\n                                        type={param.Paramet_Data_Type || 'text'}\r\n                                        className=\"cus-inpt\"\r\n                                        onChange={(e) => {\r\n                                            const updatedParams = [...inputValue.Task_Parameters];\r\n                                            updatedParams[index] = {\r\n                                                ...updatedParams[index],\r\n                                                Default_Value: e.target.value,\r\n                                            };\r\n                                            setInputValue({ ...inputValue, Task_Parameters: updatedParams });\r\n                                        }}\r\n                                        value={param.Default_Value}\r\n                                        placeholder=\"Default Value\"\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <button\r\n                            className=\"btn btn-light rounded-5 px-3\"\r\n                            type=\"button\"\r\n                            onClick={closeDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-primary rounded-5 px-3\"\r\n                            type='submit'>\r\n                            Submit\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            {/* Edit Task Dialog */}\r\n            <Dialog open={editDialog} onClose={closeEditDialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Edit Task</DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    handleEditSubmit();\r\n                }}>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            label=\"Task Name\"\r\n                            value={editInputValue.Task_Name}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Name: e.target.value })}\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            label=\"Task Group\"\r\n                            select\r\n                            value={editInputValue.Task_Group_Id}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Group_Id: e.target.value })}\r\n                            fullWidth\r\n                        >\r\n                            <option value=\"\" disabled>- select -</option>\r\n                            {taskGroup.map((o, i) => (\r\n                                <option key={i} value={o.Task_Type_Id}>\r\n                                    {o.Task_Type}\r\n                                </option>\r\n                            ))}\r\n                        </TextField>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button className=\"btn btn-light rounded-5 px-3\" type=\"button\" onClick={closeEditDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button className=\"btn btn-primary rounded-5 px-3\" type='submit'>\r\n                            Save\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskMasterMgt;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\r\n\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst TaskAssign = ({ open, onClose, projectId, taskId, reload, editData }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n \r\n    const [usersDropdown, setUsersDropdown] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [schType, setSchType] = useState([]);\r\n    const [selectedSch, setSelectedSch] = useState([])\r\n    const intitalVlaue={\r\n        AN_No: '',\r\n        Project_Id: projectId,\r\n        Sch_Id: taskId,\r\n        Assigned_Emp_Id: parseData?.UserId,\r\n        Emp_Id: '',\r\n        Task_Assign_dt: new Date().toISOString().split('T')[0],\r\n        Sch_Period: '',\r\n        Sch_Time: '',\r\n        EN_Time: '',\r\n        Est_Start_Dt: '',\r\n        Est_End_Dt: '',\r\n        Ord_By: 1,\r\n        Timer_Based: false,\r\n        Sch_Type: '',\r\n        Invovled_Stat: true,\r\n        EmpGet: '- Select -',\r\n        Is_Repitative: false,\r\n        RepeatDays: { Mon: false, Tue: false, Wed: false, Thu: false, Fri: false, Sat: false, Sun: false }\r\n    }\r\n\r\n    const [assignEmpInpt, setAssignEmpInpt] = useState(intitalVlaue);\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const userResponse = await fetchLink({ address: `masters/Employeedetails/getusersproject?Project_Id=${projectId}` });\r\n                const schTypeResponse = await fetchLink({ address: `taskManagement/project/schedule/newscheduleType` });\r\n\r\n\r\n                if (userResponse.success) setUsersDropdown(userResponse.data || []);\r\n                if (schTypeResponse.success) {\r\n                    // Filter out schType values 0, 4, 5, and 6\r\n                  \r\n                    setSchType(schTypeResponse.data || []);\r\n       }\r\n                \r\n            } catch (error) {\r\n                toast.error(\"Failed to fetch data.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        if (open) fetchData();\r\n    }, [projectId, open, reload]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchSelectedData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                if (editData) {\r\n                    const selectedSchType = await fetchLink({ address: `masters/employeedetails/selectedTaskDetails?projectId=${projectId}&Sch_Id=${taskId.Sch_Id}&Task_Id=${taskId.Task_Id}` });\r\n\r\n                    const selectedSchId = selectedSchType.data[0]?.Sch_Type_Id;\r\n                    const selectedSchName = selectedSchType.data[0]?.Sch_Name;\r\n\r\n                    if (selectedSchId && selectedSchName) {\r\n                        setSelectedSch({ value: selectedSchId, label: selectedSchName });\r\n                    } else {\r\n                        setSelectedSch({ value: '', label: '' });\r\n                    }\r\n\r\n\r\n                } else {\r\n                    const selectedSchType = await fetchLink({ address: `masters/employeedetails/selectedTaskDetails?projectId=${projectId}&Sch_Id=${taskId.TaskSchId}&Task_Id=${taskId.Task_Id}` });\r\n\r\n\r\n                    const selectedSchId = selectedSchType.data[0]?.Sch_Type_Id;\r\n                    const selectedSchName = selectedSchType.data[0]?.Sch_Name;\r\n\r\n                    if (selectedSchId && selectedSchName) {\r\n                        setSelectedSch({ value: selectedSchId, label: selectedSchName });\r\n                    } else {\r\n                        setSelectedSch({ value: '', label: '' });\r\n                    }\r\n\r\n                }\r\n            } catch (error) {\r\n\r\n                toast.error(\"Failed to fetch data.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n\r\n        };\r\n\r\n        if (open) fetchSelectedData();\r\n    }, [open, editData, reload]);\r\n\r\n    useEffect(() => {\r\n        if (editData) {\r\n\r\n            setAssignEmpInpt(prev => ({\r\n                ...prev,\r\n                AN_No: editData.AN_No,\r\n                Emp_Id: editData.Emp_Id,\r\n                Sch_Time: editData.Sch_Time,\r\n                EN_Time: editData.EN_Time,\r\n                Est_Start_Dt: editData.Est_Start_Dt.split('T')[0],\r\n                Est_End_Dt: editData.Est_End_Dt.split('T')[0],\r\n                Ord_By: editData.Ord_By,\r\n                Timer_Based: editData.Timer_Based,\r\n                Invovled_Stat: editData.Invovled_Stat,\r\n                Sch_Type_Id: editData.Sch_Type,\r\n                Sch_Type: editData.Sch_Type_Name,\r\n                EmpGet: editData.EmployeeName,\r\n                Is_Repitative: editData.Is_Repitative,\r\n                RepeatDays: {\r\n                    Mon: !!editData.IS_Rep_Monday,\r\n                    Tue: !!editData.IS_Rep_Tuesday,\r\n                    Wed: !!editData.IS_Rep_Wednesday,\r\n                    Thu: !!editData.IS_Rep_Thursday,\r\n                    Fri: !!editData.Is_Rep_Friday,\r\n                    Sat: !!editData.Is_Rep_Saturday,\r\n                    Sun: !!editData.Is_Rep_Sunday,\r\n                },\r\n            }));\r\n        }\r\n    }, [editData]);\r\n\r\n\r\n\r\n    const calculateSchPeriod = () => {\r\n        const [hours1, minutes1] = assignEmpInpt.Sch_Time.split(':').map(Number);\r\n        const [hours2, minutes2] = assignEmpInpt.EN_Time.split(':').map(Number);\r\n\r\n        const date1 = new Date(0, 0, 0, hours1, minutes1);\r\n        const date2 = new Date(0, 0, 0, hours2, minutes2);\r\n\r\n        if (date2 > date1) {\r\n            let difference = Math.abs(date2 - date1);\r\n            const hours = Math.floor(difference / (1000 * 60 * 60));\r\n            const minutes = Math.floor(difference / (1000 * 60));\r\n            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\r\n        }\r\n        return '';\r\n    };\r\n\r\n\r\n    const mapRepeatDaysToISRepFields = () => {\r\n        return {\r\n            IS_Rep_Monday: assignEmpInpt.RepeatDays.Mon ? 1 : null,\r\n            IS_Rep_Tuesday: assignEmpInpt.RepeatDays.Tue ? 1 : null,\r\n            IS_Rep_Wednesday: assignEmpInpt.RepeatDays.Wed ? 1 : null,\r\n            IS_Rep_Thursday: assignEmpInpt.RepeatDays.Thu ? 1 : null,\r\n            Is_Rep_Friday: assignEmpInpt.RepeatDays.Fri ? 1 : null,\r\n            Is_Rep_Saturday: assignEmpInpt.RepeatDays.Sat ? 1 : null,\r\n            Is_Rep_Sunday: assignEmpInpt.RepeatDays.Sun ? 1 : null,\r\n        };\r\n    };\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const schPeriod = calculateSchPeriod();\r\n\r\n        if (assignEmpInpt.Est_End_Dt < assignEmpInpt.Est_Start_Dt) {\r\n            toast.error(\"End date must be greater than start date.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n\r\n            const address = editData ? 'masters/employeedetails/updateTask' : 'masters/employeedetails/assignTask';\r\n            const repeatDaysMapped = mapRepeatDaysToISRepFields();\r\n            const response = await fetchLink({\r\n                address,\r\n                method: editData ? 'PUT' : 'POST',\r\n                bodyData: {\r\n                    ...assignEmpInpt,\r\n                    Project_Id: projectId,\r\n                    Sch_Id: editData ? taskId.Sch_Id : taskId.TaskSchId,\r\n                    Task_Levl_Id: taskId.Task_Levl_Id,\r\n                    Task_Id: Number(taskId.Task_Id),\r\n                    Assigned_Emp_Id: assignEmpInpt.Assigned_Emp_Id,\r\n                    Emp_Id: assignEmpInpt.Emp_Id,\r\n                    Sch_Period: schPeriod,\r\n                    Sch_Time: assignEmpInpt.Sch_Time,\r\n                    EN_Time: assignEmpInpt.EN_Time,\r\n                    Est_Start_Dt: assignEmpInpt.Est_Start_Dt,\r\n                    Est_End_Dt: assignEmpInpt.Est_End_Dt,\r\n                    Ord_By: assignEmpInpt.Ord_By,\r\n                    Sch_Type: selectedSch.value,\r\n                    Timer_Based: assignEmpInpt.Timer_Based ? 1 : 0,\r\n                    Invovled_Stat: assignEmpInpt.Invovled_Stat ? 1 : 0,\r\n                    Is_Repitative: assignEmpInpt.Is_Repitative ? 1 : 0,\r\n                    RepeatDays: assignEmpInpt.Is_Repitative ? assignEmpInpt.RepeatDays : '',\r\n                    ...repeatDaysMapped,\r\n                }\r\n\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(`Task ${editData ? 'updated' : 'assigned'} successfully!`);\r\n                setAssignEmpInpt({});\r\n\r\n                onClose();\r\n                reload()\r\n\r\n            } else {\r\n\r\n                toast.error(\"Please fill the values correctly\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Error during task assignment/update: \" + error.message);\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <Dialog open={open} maxWidth=\"sm\">\r\n                <DialogTitle>{editData ? 'Edit Task' : 'Employee Assign'}</DialogTitle>\r\n                <form onSubmit={handleSubmit}>\r\n                    <DialogContent className=\"table-responsive\">\r\n                        <table className=\"table\" style={{ tableLayout: 'fixed' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Employee\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <Select\r\n                                            value={{ value: assignEmpInpt.Emp_Id, label: assignEmpInpt.EmpGet }}\r\n                                            onChange={(e) => setAssignEmpInpt({ ...assignEmpInpt, Emp_Id: e.value, EmpGet: e.label })}\r\n                                            options={[{ value: '', label: '- Select -' }, ...usersDropdown.map(obj => ({ value: obj.UserId, label: obj.Name }))]}\r\n                                            styles={customSelectStyles}\r\n                                            required\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Select User\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Sch_Type\r\n                                    </td>\r\n                                    \r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <Select\r\n                                            value={selectedSch ? { value: selectedSch.value, label: `${selectedSch.label}` } : null}\r\n                                            styles={{ padding: '0.5em' }}\r\n                                            isDisabled\r\n                                            placeholder=\"Select Sch_Type\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n\r\n                                {/* Time and Date Inputs */}\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Start Time\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Sch_Time}\r\n                                            required\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Sch_Time: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        End Time\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.EN_Time}\r\n                                            required\r\n                                            min={assignEmpInpt.Sch_Time}\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, EN_Time: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Est. Start Date\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Est_Start_Dt}\r\n                                            required\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_Start_Dt: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Est. End Date\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Est_End_Dt}\r\n                                            required\r\n                                            min={assignEmpInpt.Est_Start_Dt}\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_End_Dt: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* Timer Based & Involved Status */}\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15 text-start\" style={{ paddingRight: '1em' }}>\r\n                                        <div style={{ display: 'inline-flex', marginRight: '1em' }}>\r\n                                            <input\r\n                                                className=\"form-check-input shadow-none\"\r\n                                                type=\"checkbox\"\r\n                                                id=\"timerbased\"\r\n                                                checked={Boolean(Number(assignEmpInpt?.Timer_Based))}\r\n                                                onChange={(e) =>\r\n                                                    setAssignEmpInpt({ ...assignEmpInpt, Timer_Based: e.target.checked })\r\n                                                }\r\n                                                style={{ marginRight: '0.5em' }}\r\n                                            />\r\n                                            <label className=\"form-check-label p-1 ps-2\" htmlFor=\"timerbased\">\r\n                                                Timer Based Task?\r\n                                            </label>\r\n                                        </div>\r\n\r\n                                        {editData && (\r\n                                            <div style={{ display: 'inline-flex', marginRight: '1em' }}>\r\n                                                <input\r\n                                                    className=\"form-check-input shadow-none\"\r\n                                                    type=\"checkbox\"\r\n                                                    checked={Boolean(Number(assignEmpInpt?.Invovled_Stat))}\r\n                                                    onChange={() =>\r\n                                                        setAssignEmpInpt({ ...assignEmpInpt, Invovled_Stat: !assignEmpInpt.Invovled_Stat })\r\n                                                    }\r\n                                                    style={{ marginRight: '0.5em' }}\r\n                                                />\r\n                                                <label className=\"form-check-label p-1 ps-2\">Involved Status</label>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingRight: '1em' }}>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                            <div style={{ display: 'flex', alignItems: 'center', marginRight: '1em' }}>\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={assignEmpInpt.Is_Repitative === 1}\r\n                                                    onChange={(e) => {\r\n                                                        setAssignEmpInpt((prevState) => ({\r\n                                                            ...prevState,\r\n                                                            Is_Repitative: e.target.checked ? 1 : 0,\r\n                                                        }));\r\n                                                    }}\r\n                                                    style={{ marginRight: '1em' }}\r\n                                                />\r\n                                                <label style={{ marginBottom: '0' }}>Is Repetitive?</label>\r\n                                            </div>\r\n                                            {assignEmpInpt.Is_Repitative === 1 && (\r\n                                                <div style={{ display: 'inline-flex', gap: '0.5em' }}>\r\n                                                    {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\r\n                                                        <label\r\n                                                            key={day}\r\n                                                            style={{\r\n                                                                display: 'flex',\r\n                                                                alignItems: 'center',\r\n                                                                marginRight: '1em',\r\n                                                                width: '30px',\r\n                                                            }}\r\n                                                        >\r\n                                                            <input\r\n                                                                type=\"checkbox\"\r\n                                                                checked={assignEmpInpt.RepeatDays[day]}\r\n                                                                onChange={() =>\r\n                                                                    setAssignEmpInpt({\r\n                                                                        ...assignEmpInpt,\r\n                                                                        RepeatDays: {\r\n                                                                            ...assignEmpInpt.RepeatDays,\r\n                                                                            [day]: !assignEmpInpt.RepeatDays[day],\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                                style={{ marginRight: '0.5em' }}\r\n                                                            />\r\n                                                            {day}\r\n                                                        </label>\r\n                                                    ))}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            onClick={() => {\r\n                                onClose();\r\n                                setAssignEmpInpt(intitalVlaue);\r\n                            }}\r\n                            variant=\"outlined\"\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"contained\">\r\n                            Save Changes\r\n                        </Button>\r\n\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskAssign;\r\n","import React, { useState, useEffect,useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    Table,\r\n    TableBody,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    IconButton,\r\n    CircularProgress,\r\n    Button\r\n} from '@mui/material';\r\nimport { CalendarMonth, QueryBuilder, Edit } from \"@mui/icons-material\";\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\nimport { MyContext } from '../../../Components/context/contextProvider';\r\nfunction TaskIndividual({ open, onClose, taskDetails, closeDialogTask }) {\r\n    const [selectedTask, setSelectedTask] = useState(null);\r\n    const [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            setSelectedTask(null);\r\n            setLoading(true); \r\n\r\n    \r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 500);\r\n        }\r\n    }, [open]);\r\n\r\n    const handleEditClick = (task) => {\r\n        setSelectedTask(task);\r\n        setAssignDialogOpen(true);\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        if (!dateString) return 'N/A';\r\n\r\n        const date = new Date(dateString);\r\n        if (isNaN(date.getTime())) {\r\n            return 'Invalid Date';\r\n        }\r\n\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const year = date.getFullYear();\r\n\r\n        return `${day}-${month}-${year}`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"lg\">\r\n                <DialogTitle>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <span>Details</span>\r\n                        <Button variant=\"contained\" color=\"primary\"  onClick={onClose}>Close</Button>\r\n                    </div>\r\n                </DialogTitle>\r\n\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '300px', width: '500px' }}>\r\n                            <CircularProgress /> \r\n                        </div>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"fa-14 text-center\">Employee</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Assigned By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Date</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Time</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Total Hours</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Timer Based</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Involved Status</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Order By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>\r\n                                    {taskDetails.length === 0 ? (\r\n                                       \r\n                                        <TableRow>\r\n                                            <TableCell colSpan={9} className=\"fa-14 text-center\" style={{ textAlign: 'center' }}>\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ) : (\r\n                                     \r\n                                        taskDetails.map((detail, index) => (\r\n                                            <TableRow key={index}>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.EmployeeName || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.AssignedUser || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <CalendarMonth className=\"fa-18 me-2\" />\r\n                                                        {formatDate(detail.Est_Start_Dt)} - {formatDate(detail.Est_End_Dt)}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <QueryBuilder className=\"fa-18 me-2\" />\r\n                                                        {detail.Sch_Time || 'N/A'} - {detail.EN_Time || 'N/A'}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Sch_Period || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Timer_Based) ? 'bg-success' : 'bg-warning'}`}>\r\n                                                        {Number(detail.Timer_Based) ? \"Yes\" : \"No\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Invovled_Stat) ? 'bg-success' : 'bg-danger'}`}>\r\n                                                        {Number(detail.Invovled_Stat) ? \"IN\" : \"OUT\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Ord_By || 'N/A'}</TableCell>\r\n                                                {Number(contextObj?.Edit_Rights) === 1 && (\r\n                                                <TableCell className=\"fa-13 text-center\">\r\n                                                    \r\n                                                    <IconButton size=\"small\" onClick={() => handleEditClick(detail)}>\r\n                                                        <Edit className=\"fa-18\" />\r\n                                                        Edit\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                                )}\r\n                                            </TableRow>\r\n                                        ))\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n            {assignDialogOpen &&\r\n                <TaskAssign\r\n                    open={assignDialogOpen}\r\n                    projectId={selectedTask?.Project_Id}\r\n                    taskId={selectedTask}\r\n                    editData={selectedTask}\r\n                    onClose={() => {\r\n                        setAssignDialogOpen(false);\r\n                        onClose();\r\n                    }}\r\n                />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskIndividual;\r\n","import React, { useState, useCallback, useEffect, useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Tab,\r\n    Table,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TableBody,\r\n    IconButton,\r\n    Chip,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Typography,\r\n    Box\r\n} from '@mui/material';\r\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\r\nimport ViewHeadlineSharpIcon from '@mui/icons-material/ViewHeadlineSharp';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Edit } from \"@mui/icons-material\";\r\n\r\nimport TaskMasterMgt from '../Components/newaddEditTask';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\n\r\nimport TaskIndividual from './taskIndividual';\r\nimport { TabContext, TabList, TabPanel } from '@mui/lab';\r\nimport { MyContext } from \"../../../Components/context/contextProvider\";\r\nfunction ListingTask({ dialogOpen, setDialogOpen, projectid, reload, onReload, selectedProject }) {\r\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n    const [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n    const [taskAssignOpen, setTaskAssignOpen] = useState(false);\r\n    const [selectedTask, setSelectedTask] = useState(null);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [taskDetails, setTaskDetails] = useState([]);\r\n    const [taskDetailDialog, setTaskDetailsDialog] = useState(false);\r\n    const [taskScheduleInput, setTaskScheduleInput] = useState({});\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n    const userData = JSON.parse(localStorage.getItem('user'));\r\n    const entryBy = userData?.UserId;\r\n    const companyId = userData?.Company_id;\r\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n    const [expandedAccordion, setExpandedAccordion] = useState(null);\r\n    const [expandedAccordionSubTask, setExpandedAccordionSubTask] = useState(null);\r\n    // const [scheduleTypes, setScheduleTypes] = useState([]);\r\n    // const [selectedTab, setSelectedTab] = useState(0);\r\n    const [expandedAccordionTask, setExpandedAccordionTask] = useState(null);\r\n\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    const [isEdit, setIsedit] = useState(false)\r\n    const [updateDialogOpen, setUpdateDialogOpen] = useState(false)\r\n\r\n    const [expandedItem, setExpandedItem] = useState({ schTypeId: null, taskId: null });\r\n\r\n\r\n\r\n    const [selectedTab, setSelectedTab] = useState('overall');\r\n    const [scheduleTypes, setScheduleTypes] = useState([]);\r\n\r\n\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n\r\n    const handleAccordionChange = (taskId) => {\r\n        setExpandedAccordion((prev) => (prev === taskId ? null : taskId));\r\n    };\r\n\r\n    const handleAccordionChangeTask = (taskId) => {\r\n        setExpandedAccordionTask((prev) => (prev === taskId ? null : taskId));\r\n    };\r\n\r\n    const handleSelectedTask = async (task) => {\r\n        setSelectedTask(task);\r\n        setTaskAssignOpen(true);\r\n    }\r\n\r\n    const Schtype = async () => {\r\n        fetchLink({ address: `taskManagement/project/schedule/newscheduleType` }).then((data) => {\r\n            if (data.success) {\r\n                setScheduleTypes(data.data);\r\n\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        });\r\n    }\r\n    const handleAccordionChangeSubTask = (taskId) => {\r\n        setExpandedAccordionSubTask(expandedAccordionSubTask === taskId ? null : taskId);\r\n    };\r\n\r\n    const fetchTasks = useCallback(async () => {\r\n        try {\r\n            const data = await fetchLink({ address: `taskManagement/tasks/dropdown?Company_id=${companyId}` });\r\n            if (data.success) {\r\n                setTasks(data.data);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }, [companyId]);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project/schedule/ListingDetails?Project_Id=${projectid}`\r\n            });\r\n            if (data.success) {\r\n                setTaskData(data.data);\r\n            } else {\r\n                console.error('Failed to fetch task details:', data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error('Error fetching task details:', e);\r\n        }\r\n    }, [projectid]);\r\n\r\n    useEffect(() => {\r\n        fetchTasks();\r\n        fetchData();\r\n        Schtype();\r\n    }, [reload, projectid, onReload, fetchTasks, fetchData]);\r\n\r\n\r\n\r\n    const taskOptions = tasks.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }));\r\n    const handleviewTaskDetail = async (task) => {\r\n        setTaskDetailsDialog(true);\r\n\r\n        if (!task.Task_Id || !projectid) {\r\n            toast.error('Task ID and Project ID are required');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/employeedetails/assignedTaskDetails?Task_Id=${task.Task_Id}&ProjectId=${projectid}&LevelId=${task.Task_Levl_Id}`\r\n            });\r\n\r\n            if (data.success) {\r\n                setTaskDetails(data.data);\r\n            } else {\r\n                console.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error('Error fetching task details:', e);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleAssignTask = async () => {\r\n        if (!taskScheduleInput.Task_Id || !taskScheduleInput.Sch_Type_Id) {\r\n            toast.error(\"Please select a task and schedule type before saving.\");\r\n            return;\r\n        }\r\n\r\n        const requestData = {\r\n            entryBy: entryBy,\r\n            Project_Id: projectid,\r\n            Sch_Type_Id: taskScheduleInput.Sch_Type_Id,\r\n            Sch_Est_Start_Date: taskScheduleInput.Task_Est_Start_Date,\r\n            Sch_Est_End_Date: taskScheduleInput.Task_Est_End_Date,\r\n            tasks: [taskScheduleInput]\r\n        };\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: 'taskManagement/project/schedule/createNewTaskWithSchedule',\r\n                method: 'POST',\r\n                bodyData: requestData,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                setAssignDialogOpen(false);\r\n                setTaskScheduleInput({})\r\n                fetchData();\r\n                onReload();\r\n            }\r\n            else if (response.status === 'warning') {\r\n                toast.warn(response.message || \"Task already exists for this project.\");\r\n            }\r\n            else {\r\n\r\n                toast.warn(response.message || \"Task already exists for this project.\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(error);\r\n        }\r\n    };\r\n\r\n    const handleEditTask = (task) => {\r\n        setSelectedTask(task);\r\n        setEditDialogOpen(true);\r\n    };\r\n\r\n\r\n    const updatesTaskDetails = async (task) => {\r\n\r\n        const requestData = {\r\n            Sch_Project_Id: task.Sch_Project_Id,\r\n            Sch_Id: task.TaskSchId,\r\n            schtypeid: taskScheduleInput.Sch_Type_Id,\r\n            Task_Id: task.Task_Id\r\n\r\n\r\n        };\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: 'taskManagement/project/schedule/updateScheduleTaskUpdate',\r\n                method: 'PUT',\r\n                bodyData: requestData,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n\r\n                setUpdateDialogOpen(false)\r\n                setIsedit(false)\r\n                onReload();\r\n            }\r\n            else if (response.status === 'warning') {\r\n                toast.warn(response.message || \"Task already exists for this project.\");\r\n            }\r\n            else {\r\n\r\n                toast.warn(response.message || \"Task already exists for this project.\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const handleTaskEdit = (task) => {\r\n        setIsedit(true);\r\n        setTaskScheduleInput(task);\r\n        setUpdateDialogOpen(true);\r\n    };\r\n\r\n    const handleTaskChange = async (selectedOption) => {\r\n        setTaskScheduleInput(prev => ({\r\n            ...prev,\r\n            Task_Id: selectedOption.value,\r\n            TasksGet: selectedOption.label\r\n        }));\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks/tasklistsid?Task_Id=${selectedOption.value}`\r\n            });\r\n            if (response.success) {\r\n                const taskDetails = response.data;\r\n                setTaskScheduleInput(prev => ({\r\n                    ...prev,\r\n                    Task_Levl_Id: taskDetails.Task_Levl_Id,\r\n                    Task_Name: taskDetails.Task_Name,\r\n                    Task_Desc: taskDetails.Task_Desc,\r\n                    Task_Group_Id: taskDetails.Task_Group_Id,\r\n\r\n                    Sch_Type_Id: taskDetails.Sch_Type_Id,\r\n                    Task_Sch_Duaration: taskDetails.Task_Sch_Duaration || '',\r\n                    Task_Start_Time: taskDetails.Task_Start_Time || new Date().toISOString(),\r\n                    Task_End_Time: taskDetails.Task_End_Time || new Date().toISOString(),\r\n                    Task_Est_Start_Date: taskDetails.Task_Est_Start_Date || new Date().toISOString(),\r\n                    Task_Est_End_Date: taskDetails.Task_Est_End_Date || new Date().toISOString(),\r\n                }));\r\n            } else {\r\n                toast.error(\"Failed to fetch task details\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(error);\r\n        }\r\n    };\r\n\r\n    const setCloseTask = async () => {\r\n        setDialogOpen(false);\r\n        setTaskScheduleInput({});\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const handleSchTypeChange = (e) => {\r\n        const selectedOption = scheduleTypes.find(option => option.Sch_Type_Id === parseInt(e.target.value));\r\n        if (selectedOption) {\r\n            setTaskScheduleInput({\r\n                ...taskScheduleInput,\r\n                Sch_Type_Id: selectedOption.Sch_Type_Id,\r\n                Sch_Type: selectedOption.Sch_Type,\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n\r\n            {updateDialogOpen && (\r\n                <Dialog\r\n                    open={updateDialogOpen}\r\n                    fullWidth\r\n                    maxWidth=\"sm\"\r\n                    PaperProps={{ style: { borderRadius: '8px' } }}\r\n                    onClose={() => setUpdateDialogOpen(false)}\r\n                >\r\n                    <DialogTitle>{isEdit ? \"Edit Task\" : \"Assign Task\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <div style={{ padding: '1px', display: 'flex' }}>\r\n                            <div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n                                <label style={{ marginRight: '8px' }}>Sch_Type</label>\r\n                                <select\r\n                                    value={taskScheduleInput.Sch_Type_Id || ''}\r\n                                    onChange={handleSchTypeChange}\r\n                                    className=\"cus-inpt\"\r\n                                    required\r\n                                    style={{ marginLeft: '10px' }}\r\n                                >\r\n                                    <option value=\"\" disabled>- Sch_Type -</option>\r\n                                    {scheduleTypes.map((option, index) => (\r\n                                        <option key={index} value={option.Sch_Type_Id}>\r\n                                            {option.Sch_Type}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => setUpdateDialogOpen(false)}>Cancel</Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => updatesTaskDetails(taskScheduleInput)}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            )}\r\n\r\n\r\n            <Dialog open={dialogOpen} fullWidth maxWidth=\"lg\" PaperProps={{ style: { height: '75vh' } }}>\r\n                <DialogTitle>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <span>{selectedProject?.Project_Name}</span>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => setAssignDialogOpen(true)}>Assign Task</Button>\r\n                    </div>\r\n                </DialogTitle>\r\n\r\n                <Box sx={{ width: '100%', typography: 'body1' }}>\r\n                    {taskData.map((schedule, index) => {\r\n                        const scheduleTypes = JSON.parse(schedule.SchTypes); // Array of individual SchTypes\r\n                        const overallSchTypes = JSON.parse(schedule.OverallSchTypes)\r\n\r\n                        return (\r\n                            <TabContext value={selectedTab} key={index}>\r\n                                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                                    <TabList onChange={handleTabChange} aria-label=\"Schedule Types\">\r\n                                        <Tab label=\"Overall\" value=\"overall\" id=\"tab-overall\" aria-controls=\"tabpanel-overall\" />\r\n                                        {Array.isArray(scheduleTypes) && scheduleTypes.length > 0 ? (\r\n                                            scheduleTypes.map((sch, index) => (\r\n                                                <Tab\r\n                                                    key={`${sch.SchTypeId || 'index'}-${index}`}\r\n                                                    label={sch.SchType || 'No SchType'}\r\n                                                    value={(sch.SchTypeId || index).toString()}\r\n                                                    id={`tab-${sch.SchTypeId || index}`}\r\n                                                    aria-controls={`tabpanel-${sch.SchTypeId || index}`}\r\n                                                />\r\n                                            ))\r\n                                        ) : (\r\n                                            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ padding: 2 }}>\r\n                                                No Details Available for {scheduleTypes}\r\n                                            </Typography>\r\n                                        )}\r\n                                    </TabList>\r\n                                </Box>\r\n\r\n                                {selectedTab === 'overall' && (\r\n                                    <TabPanel value=\"overall\" id=\"tabpanel-overall\" aria-labelledby=\"tab-overall\">\r\n                                        <Box sx={{ marginBottom: 2, padding: 2, borderRadius: '8px' }}>\r\n                                            {Array.isArray(overallSchTypes) && overallSchTypes.length > 0 ? (\r\n                                                overallSchTypes.map((overallSchType, index) => (\r\n                                                    <Box key={index} sx={{ marginBottom: 3 }}>\r\n                                                        <Typography variant=\"body2\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                                            <Box>\r\n                                                                {/* Display Total Tasks */}\r\n                                                                Total Tasks:\r\n                                                                <strong>{overallSchType?.TaskCounts[0]?.TotalTasks || 0}</strong>\r\n\r\n                                                            </Box>\r\n                                                            <Box textAlign=\"right\">\r\n                                                                {/* Display Completed Tasks */}\r\n                                                                Completed Tasks:\r\n                                                                <strong>{overallSchType?.TaskCounts[0]?.CompletedTasks || 0}</strong>\r\n                                                            </Box>\r\n                                                        </Typography>\r\n\r\n\r\n                                                        {Array.isArray(overallSchType.SchTypes) && overallSchType.SchTypes.length > 0 ? (\r\n                                                            overallSchType.SchTypes.map((schType) => (\r\n                                                                <Accordion\r\n                                                                    key={schType.SchTypeId}\r\n                                                                    expanded={expandedAccordion === schType.SchTypeId}\r\n                                                                    onChange={() => handleAccordionChange(schType.SchTypeId)}\r\n                                                                    sx={{\r\n                                                                        backgroundColor: '#f0f4ff',\r\n                                                                        boxShadow: 'black',\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                                                        <Typography fontWeight=\"bold\">{schType.SchType}</Typography>\r\n                                                                        <Box sx={{ textAlign: 'right', flexGrow: 1 }}>\r\n                                                                            <Typography variant=\"h6\">\r\n                                                                                <Typography fontWeight=\"bold\">Completed Task / Total Task</Typography>\r\n                                                                                {schType.TaskCountsInSchType.map((taskCount, index) => (\r\n                                                                                    <Typography sx={{ textAlign: 'right', flexGrow: 1 }} key={index}>\r\n                                                                                        {taskCount.CompletedTasks} / {taskCount.TotalTasks}\r\n                                                                                    </Typography>\r\n                                                                                ))}\r\n                                                                            </Typography>\r\n                                                                        </Box>\r\n                                                                    </AccordionSummary>\r\n                                                                    <AccordionDetails>\r\n                                                                        {Array.isArray(schType.TaskTypeGroups) && schType.TaskTypeGroups.length > 0 ? (\r\n                                                                            schType.TaskTypeGroups.map((taskType) => (\r\n                                                                                <Accordion\r\n                                                                                    key={taskType.Task_Type_Id}\r\n                                                                                    expanded={expandedAccordionTask === taskType.Task_Type_Id}\r\n                                                                                    onChange={() => handleAccordionChangeTask(taskType.Task_Type_Id)}\r\n                                                                                    sx={{\r\n                                                                                        backgroundColor: '#e8f4f8',\r\n                                                                                        marginBottom: 2,\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                                                                        <Typography fontWeight=\"bold\">\r\n                                                                                            {taskType.Task_Type || 'Default Task Type'}\r\n                                                                                        </Typography>\r\n                                                                                    </AccordionSummary>\r\n                                                                                    <AccordionDetails>\r\n                                                                                        {Array.isArray(taskType.Tasks) && taskType.Tasks.length > 0 ? (\r\n                                                                                            taskType.Tasks.map((taskItem) => (\r\n                                                                                                <Accordion\r\n                                                                                                    key={taskItem.Task_Id}\r\n                                                                                                    expanded={expandedAccordionSubTask === taskItem.Task_Id}\r\n                                                                                                    onChange={() => handleAccordionChangeSubTask(taskItem.Task_Id)}\r\n                                                                                                    sx={{\r\n                                                                                                        \r\n                                                                                                        marginBottom: 2,\r\n                                                                                                        boxShadow: '10px black'\r\n                                                                                                    }}\r\n                                                                                                >\r\n                                                                                                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                                                                                        <Typography fontWeight=\"bold\">\r\n                                                                                                            {taskItem?.Task_Name || 'DEFAULT TASK'}\r\n                                                                                                        </Typography>\r\n                                                                                                    </AccordionSummary>\r\n                                                                                                    <AccordionDetails>\r\n                                                                                                        {/* Render Task details in a table */}\r\n                                                                                                        <TableContainer style={{ maxHeight: '50vh' }}>\r\n                                                                                                            <Table stickyHeader>\r\n                                                                                                                <TableHead style={{ backgroundColor: '#2C3E50' }}>\r\n                                                                                                                    <TableRow style={{ backgroundColor: '#2C3E50' }}>\r\n                                                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task</TableCell>\r\n                                                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task Type</TableCell>\r\n                                                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Employees</TableCell>\r\n\r\n                                                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Details</TableCell>\r\n                                                                                                                    </TableRow>\r\n                                                                                                                </TableHead>\r\n\r\n                                                                                                                <TableRow key={taskItem.Task_Id} sx={{backgroundColor:'#BBE6F6'}}>\r\n                                                                                                                    <TableCell>{taskItem.Task_Name}</TableCell>\r\n                                                                                                                    <TableCell>\r\n                                                                                                                        {schType.SchType}\r\n\r\n                                                                                                                    </TableCell>\r\n\r\n                                                                                                                    <TableCell>\r\n\r\n                                                                                                                        {Array.isArray(taskItem.AssignedEmployees) && taskItem.AssignedEmployees.length > 0 ? (\r\n                                                                                                                            taskItem.AssignedEmployees.map((employee, empIndex) => (\r\n                                                                                                                                <Chip\r\n                                                                                                                                    key={empIndex}\r\n                                                                                                                                    label={employee.Name}\r\n                                                                                                                                    variant=\"outlined\"\r\n                                                                                                                                    size=\"small\"\r\n                                                                                                                                    sx={{ margin: '2px', color: 'green' }}\r\n                                                                                                                                />\r\n                                                                                                                            ))\r\n                                                                                                                        ) : (\r\n                                                                                                                            <span>No Employees Assigned</span>\r\n                                                                                                                        )}\r\n                                                                                                                    </TableCell>\r\n\r\n\r\n\r\n\r\n\r\n                                                                                                                    <TableCell>\r\n                                                                                                                        <IconButton onClick={() => handleviewTaskDetail(taskItem)}>\r\n                                                                                                                            <ViewHeadlineSharpIcon />\r\n                                                                                                                        </IconButton>\r\n                                                                                                                    </TableCell>\r\n                                                                                                                </TableRow>\r\n\r\n                                                                                                            </Table>\r\n                                                                                                        </TableContainer>\r\n                                                                                                    </AccordionDetails>\r\n                                                                                                </Accordion>\r\n                                                                                            ))\r\n                                                                                        ) : (\r\n                                                                                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                                                                                No tasks available for this task type.\r\n                                                                                            </Typography>\r\n                                                                                        )}\r\n                                                                                    </AccordionDetails>\r\n                                                                                </Accordion>\r\n                                                                            ))\r\n                                                                        ) : (\r\n                                                                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                                                                No task type groups found for this schedule type.\r\n                                                                            </Typography>\r\n                                                                        )}\r\n                                                                    </AccordionDetails>\r\n                                                                </Accordion>\r\n                                                            ))\r\n                                                        ) : (\r\n                                                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                                                No schedule types available.\r\n                                                            </Typography>\r\n                                                        )}\r\n                                                    </Box>\r\n                                                ))\r\n                                            ) : (\r\n                                                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                                    No overall tasks available.\r\n                                                </Typography>\r\n                                            )}\r\n                                        </Box>\r\n                                    </TabPanel>\r\n                                )}\r\n\r\n\r\n                                {Array.isArray(scheduleTypes) && scheduleTypes.map((sch, index) => (\r\n                                    <TabPanel\r\n                                        key={`${sch.SchTypeId || 'index'}-${index}`}\r\n                                        value={(sch.SchTypeId || index).toString()}\r\n                                        id={`tabpanel-${sch.SchTypeId || index}`}\r\n                                        aria-labelledby={`tab-${sch.SchTypeId || index}`}\r\n                                    >\r\n                                        <Box sx={{ marginBottom: 2, padding: 2, backgroundColor: '#f9f9f9', borderRadius: '8px' }}>\r\n                                            {Array.isArray(sch.TaskCountsInSchType) && sch.TaskCountsInSchType.length > 0 ? (\r\n                                                sch.TaskCountsInSchType.map((count, index) => (\r\n                                                    <Typography key={index} variant=\"body1\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                                        <Box>\r\n                                                            Schedule Type: <strong>{sch.SchType}</strong>\r\n                                                        </Box>\r\n                                                        <Box textAlign=\"right\">\r\n                                                            Total Tasks: <strong>{count.TotalTasks}</strong> / Completed Tasks: <strong>{count.CompletedTasks}</strong>\r\n                                                        </Box>\r\n                                                    </Typography>\r\n                                                ))\r\n                                            ) : (\r\n                                                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                                    No tasks counted for this schedule type.\r\n                                                </Typography>\r\n                                            )}\r\n                                        </Box>\r\n\r\n                                        {Array.isArray(sch.TaskTypeGroups) && sch.TaskTypeGroups.length > 0 ? (\r\n                                            sch.TaskTypeGroups.map((taskType) => (\r\n                                                <Accordion\r\n                                                    key={taskType.Task_Type_Id}\r\n                                                    expanded={expandedAccordion === taskType.Task_Type_Id}\r\n                                                    onChange={() => handleAccordionChange(taskType.Task_Type_Id)}\r\n                                                    sx={{\r\n                                                        backgroundColor: '#f0f4ff',\r\n                                                        boxShadow: 'black',\r\n                                                    }}\r\n                                                >\r\n                                                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                                        <Typography fontWeight=\"bold\">\r\n                                                            {taskType.Task_Type || 'Default Task Type'}\r\n                                                        </Typography>\r\n                                                        <Box sx={{ textAlign: 'right', flexGrow: 1 }}>\r\n                                                            <Typography variant=\"h6\">\r\n                                                                <Typography fontWeight=\"bold\">\r\n                                                                    Completed Task / Total Task\r\n                                                                </Typography>\r\n                                                                {taskType.TaskMetrics.map((tasks, index) => (\r\n                                                                    <Typography sx={{ textAlign: 'right', flexGrow: 1 }} key={index}>\r\n                                                                        {tasks.CompletedTasks} / {tasks?.TotalTasks}\r\n                                                                    </Typography>\r\n                                                                ))}\r\n                                                            </Typography>\r\n                                                        </Box>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        {Array.isArray(taskType.Tasks) && taskType.Tasks.length > 0 ? (\r\n                                                            taskType.Tasks.map((taskItem) => (\r\n                                                                <Accordion\r\n                                                                    key={taskItem.Task_Id}\r\n                                                                    expanded={expandedAccordionTask === taskItem.Task_Id}\r\n                                                                    onChange={() => handleAccordionChangeTask(taskItem.Task_Id)}\r\n                                                                    sx={{\r\n                                                                        // backgroundColor: '#e8f4f8',\r\n                                                                        marginBottom: 2,\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                                                        <Box sx={{ textAlign: 'left', flexGrow: 1 }}>\r\n                                                                            <Typography fontWeight=\"bold\">\r\n                                                                                {taskItem?.Task_Name || 'DEFAULT TASK'}\r\n                                                                            </Typography>\r\n                                                                        </Box>\r\n                                                                    </AccordionSummary>\r\n                                                                    <AccordionDetails>\r\n                                                                        <TableContainer style={{ maxHeight: '50vh' }}>\r\n                                                                            <Table stickyHeader>\r\n                                                                                <TableHead style={{ backgroundColor: '#2C3E50' }}>\r\n                                                                                    <TableRow style={{ backgroundColor: '#2C3E50' }}>\r\n                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task</TableCell>\r\n                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task Type</TableCell>\r\n                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Employees</TableCell>\r\n                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Employee Assign</TableCell>\r\n                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Actions</TableCell>\r\n                                                                                        <TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Details</TableCell>\r\n                                                                                    </TableRow>\r\n                                                                                </TableHead>\r\n\r\n                                                                                <TableRow key={taskItem.Task_Id}  sx={{backgroundColor:'#BBE6F6'}}>\r\n                                                                                    <TableCell>{taskItem.Task_Name}</TableCell>\r\n                                                                                    <TableCell>\r\n                                                                                        {sch.SchType}\r\n                                                                                        <IconButton onClick={() => handleTaskEdit(taskItem)}>\r\n                                                                                            <Edit />\r\n                                                                                        </IconButton>\r\n                                                                                    </TableCell>\r\n\r\n                                                                                    <TableCell>\r\n\r\n                                                                                        {Array.isArray(taskItem.AssignedEmployees) && taskItem.AssignedEmployees.length > 0 ? (\r\n                                                                                            taskItem.AssignedEmployees.map((employee, empIndex) => (\r\n                                                                                                <Chip\r\n                                                                                                    key={empIndex}\r\n                                                                                                    label={employee.Name}\r\n                                                                                                    variant=\"outlined\"\r\n                                                                                                    size=\"small\"\r\n                                                                                                    sx={{ margin: '2px', color: 'green' }}\r\n                                                                                                />\r\n                                                                                            ))\r\n                                                                                        ) : (\r\n                                                                                            <span>No Employees Assigned</span>\r\n                                                                                        )}\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell>\r\n                                                                                        <IconButton onClick={() => handleSelectedTask(taskItem)}>\r\n                                                                                            <LibraryAddIcon />\r\n                                                                                        </IconButton>\r\n                                                                                    </TableCell>\r\n\r\n                                                                                    {Number(contextObj?.Edit_Rights) === 1 && (\r\n                                                                                        <TableCell>\r\n                                                                                            <IconButton onClick={() => handleEditTask(taskItem)}>\r\n                                                                                                <Edit />\r\n                                                                                            </IconButton>\r\n                                                                                        </TableCell>\r\n                                                                                    )}\r\n\r\n\r\n                                                                                    <TableCell>\r\n                                                                                        <IconButton onClick={() => handleviewTaskDetail(taskItem)}>\r\n                                                                                            <ViewHeadlineSharpIcon />\r\n                                                                                        </IconButton>\r\n                                                                                    </TableCell>\r\n                                                                                </TableRow>\r\n\r\n                                                                            </Table>\r\n                                                                        </TableContainer>\r\n                                                                    </AccordionDetails>\r\n\r\n                                                                </Accordion>\r\n                                                            ))\r\n                                                        ) : (\r\n                                                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                                                No tasks available for this task type.\r\n                                                            </Typography>\r\n                                                        )}\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                            ))\r\n                                        ) : (\r\n                                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                                No task type groups found for this schedule type.\r\n                                            </Typography>\r\n                                        )}\r\n                                    </TabPanel>\r\n                                ))}\r\n                            </TabContext>\r\n                        )\r\n\r\n                    })}\r\n                </Box>\r\n\r\n\r\n\r\n                <DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={setCloseTask}>Close</Button>\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n\r\n            <Dialog open={assignDialogOpen} fullWidth maxWidth=\"sm\" PaperProps={{ style: { borderRadius: '8px' } }}>\r\n                <DialogTitle>Assign Task</DialogTitle>\r\n                <DialogContent>\r\n                    <div style={{ padding: '1px', display: 'flex' }}>\r\n                        <div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n                            <label htmlFor=\"task-select\" style={{ marginRight: '8px' }}>Select Task</label>\r\n                            <select\r\n                                id=\"task-select\"\r\n                                value={taskScheduleInput.Task_Id || ''}\r\n                                className=\"cus-inpt\"\r\n                                required\r\n                                onChange={e => handleTaskChange({ value: e.target.value })}\r\n                                style={{ flex: 1, marginRight: '8px' }}\r\n                            >\r\n                                <option value=\"\" disabled>- select -</option>\r\n                                {taskOptions.map((option, index) => (\r\n                                    <option key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                            <IconButton onClick={() => setIsDialogOpen(true)}>\r\n                                <Button variant=\"contained\" color=\"primary\">Create New</Button>\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ padding: '1px', display: 'flex' }}>\r\n                        <div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n                            <label style={{ marginRight: '8px' }}>Sch_Type</label>\r\n                            <select\r\n                                value={taskScheduleInput.Sch_Type_Id || ''}\r\n                                onChange={handleSchTypeChange}\r\n                                className=\"cus-inpt\"\r\n                                required\r\n                                style={{ marginLeft: '10px' }}\r\n                            >\r\n                                <option value=\"\" disabled>- Sch_Type -</option>\r\n                                {scheduleTypes.map((option, index) => (\r\n                                    <option key={index} value={option.Sch_Type_Id}>\r\n                                        {option.Sch_Type}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setAssignDialogOpen(false)}>Cancel</Button>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleAssignTask}>Save</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <TaskAssign\r\n                open={taskAssignOpen}\r\n                onClose={() => setTaskAssignOpen(false)}\r\n                task={selectedTask}\r\n                projectId={projectid}\r\n                entryBy={entryBy}\r\n                taskId={selectedTask}\r\n                reload={onReload}\r\n            />\r\n\r\n            <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\r\n                <DialogTitle>Delete Task</DialogTitle>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">Cancel</Button>\r\n                    {/* <Button onClick={deleteTaskFun} color=\"secondary\">Delete</Button> */}\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <TaskMasterMgt\r\n                openAction={isDialogOpen}\r\n                onCloseFun={() => setIsDialogOpen(false)}\r\n                onTaskAdded={fetchTasks}\r\n                Reload={reload}\r\n            />\r\n            <TaskMasterMgt\r\n                row={selectedTask}\r\n                openAction={editDialogOpen}\r\n                onCloseFun={() => setEditDialogOpen(false)}\r\n                reload={fetchData}\r\n            />\r\n            <TaskIndividual\r\n                open={taskDetailDialog}\r\n                onClose={() => setTaskDetailsDialog(false)}\r\n                taskDetails={taskDetails}\r\n            />\r\n\r\n        </>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default ListingTask;\r\n\r\n\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { Edit, Delete, Launch, People, Search as SearchIcon } from '@mui/icons-material';\r\nimport { toast } from 'react-toastify';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport ProjectForm from \"../ProjectList/addEditProject\";\r\nimport EmployeeManagementDialog from \"../employeeManagement/employeeManagement\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport ListingTask from \"../Tasks/taskDetails/listingTask\";\r\n\r\nconst ActiveProjects = () => {\r\n    const [reload, setReload] = useState(false);\r\n    const [projects, setProjects] = useState([]);\r\n    const [projectAlldata, setProjectAlldata] = useState([]);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [selectedProject, setSelectedProject] = useState(null);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [projectId, setProjectId] = useState(0);\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [projectToDelete, setProjectToDelete] = useState(null);\r\n    const [employeeDialogOpen, setEmployeeDialogOpen] = useState(false);\r\n    const [listingTaskDialogOpen, setListingTaskDialogOpen] = useState(false);\r\n    const [filterInput, setFilterInput] = useState('');\r\n\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    useEffect(() => {\r\n        fetchProjects();\r\n        fetchProjectData();\r\n    }, [parseData?.Company_id, reload]);\r\n\r\n    const handleReloadProjects = () => setReload(prev => !prev);\r\n\r\n    const fetchProjects = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project/newProjectAbstract?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjects(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjects([]);\r\n        }\r\n    };\r\n\r\n    const fetchProjectData = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjectAlldata(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjectAlldata([]);\r\n        }\r\n    };\r\n\r\n    const deleteFun = () => {\r\n        if (projectToDelete) {\r\n            fetchLink({\r\n                address: `taskManagement/project`,\r\n                method: 'DELETE',\r\n                bodyData: { Project_Id: projectToDelete?.Project_Id },\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReload(!reload);\r\n                    toast.success(data.message);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }).catch(e => console.error('Fetch Error:', e));\r\n        }\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const calcPercentage = (task, completed) => (Number(task) === 0 ? 0 : ((Number(completed) / Number(task)) * 100).toFixed(0));\r\n\r\n    const columns = [\r\n        { name: 'Project', selector: row => row.Project_Name, sortable: true, width: '350px' },\r\n        { name: 'Head', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Project_Head_Name, sortable: true },\r\n        { name: 'Status', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Status, sortable: true },\r\n        { name: 'End Date', selector: row => row.Est_End_Dt ? new Date(row.Est_End_Dt).toLocaleDateString('en-IN') : \"N/A\", sortable: true },\r\n        { name: 'Progress', selector: row => `${calcPercentage(row.TasksScheduled, row.CompletedTasks)}%`, sortable: true },\r\n        {\r\n            name: 'Tasks', cell: row => (\r\n                <>\r\n                    <IconButton onClick={() => handleOpenListingTaskDialog(row)}>\r\n                        <Launch />\r\n                    </IconButton>\r\n                    {row.CompletedTasks} / {row.TasksScheduled}\r\n                </>\r\n            )\r\n        },\r\n        { name: 'Assigned', selector: row => row.TotalTaskAssignments },\r\n        {\r\n            name: 'Employees', cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEmployeeDialog(row.Project_Id)}>\r\n                            <People />\r\n                        </IconButton>\r\n                    )}\r\n                    {row.EmployeesInvolved}\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            name: 'Actions', cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Edit_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEditDialog(row)}><Edit /></IconButton>\r\n                    )}\r\n                </>\r\n            )\r\n        },\r\n    ];\r\n\r\n    const filteredProjects = projects.filter(project => {\r\n        const projectHead = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Project_Head_Name || \"\";\r\n        const status = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Status || \"\";\r\n        return (\r\n            project.Project_Name.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            projectHead.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            status.toLowerCase().includes(filterInput.toLowerCase())\r\n        );\r\n    });\r\n\r\n    const handleOpenCreateDialog = () => {\r\n        setSelectedProject(null);\r\n        setIsEdit(false);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenEditDialog = project => {\r\n        setSelectedProject(project);\r\n        setIsEdit(true);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenDeleteDialog = project => {\r\n        setProjectToDelete(project);\r\n        setDeleteDialog(true);\r\n    };\r\n\r\n    const handleOpenListingTaskDialog = project => {\r\n        setSelectedProject(project);\r\n        setProjectId(project.Project_Id);\r\n        setListingTaskDialogOpen(true);\r\n    };\r\n\r\n    const handleCloseDialogs = () => {\r\n        setDialogOpen(false);\r\n        setListingTaskDialogOpen(false);\r\n        setSelectedProject(null);\r\n        setProjectToDelete(null);\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const handleOpenEmployeeDialog = projectId => {\r\n        setProjectId(projectId);\r\n        setEmployeeDialogOpen(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fw-bold d-flex align-items-center justify-content-between mt-0 \">\r\n                <span style={{ marginLeft: '20px' }}>Projects</span>\r\n                <div className=\"mb-1\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                        <SearchIcon style={{ position: 'absolute', left: 15, color: '#aaa' }} />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            onChange={e => setFilterInput(e.target.value)}\r\n                            style={{\r\n                                paddingLeft: 35,\r\n                                marginRight: 10,\r\n                                margin: 10,\r\n                                borderRadius: 4,\r\n                                border: '1px solid black'\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <button onClick={handleOpenCreateDialog} className=\"btn btn-primary fa-13 shadow\">\r\n                            Create Project\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card-body p-0 table-container\">\r\n                <DataTable\r\n                    columns={columns}\r\n                    data={filteredProjects}\r\n                    pagination\r\n                    highlightOnHover\r\n                    fixedHeader\r\n                    paginationPerPage={15}\r\n                    responsive\r\n                    persistTableHead\r\n                    customStyles={{\r\n                        headCells: {\r\n                            style: {\r\n                                fontSize: '16px',\r\n                                fontWeight: 'bold',\r\n                                padding: '10px',\r\n                                backgroundColor: '#2c3e50',\r\n                                color: '#ecf0f1',\r\n                                position: 'sticky',\r\n                                top: 0,\r\n                                zIndex: 2,\r\n                            },\r\n                        },\r\n                        cells: {\r\n                            style: {\r\n                                padding: '8px',\r\n                                fontSize: '14px',\r\n                                backgroundColor: '#f9f9f9',\r\n                                color: '#2c3e50',\r\n                            },\r\n                        },\r\n                        rows: {\r\n                            style: {\r\n                                borderBottom: '1px solid #ddd',\r\n                            },\r\n                        },\r\n                    }}\r\n                    style={{\r\n                        overflowY: 'auto',\r\n                        maxHeight: 'calc(100vh - 200px)',\r\n                    }}\r\n                />\r\n\r\n\r\n\r\n                <Dialog\r\n                    open={deleteDialog}\r\n                    onClose={handleCloseDialogs}\r\n                    aria-labelledby=\"delete-dialog-title\"\r\n                    aria-describedby=\"delete-dialog-description\">\r\n                    <DialogTitle className=\"bg-danger text-white mb-2 px-3 py-2\" style={{ fontSize: '18px' }}>\r\n                        Confirm Deletion\r\n                    </DialogTitle>\r\n                    <DialogContent className=\"p-4\" style={{ fontSize: '16px' }}>\r\n                        Are you sure you want to delete the project\r\n                        <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button\r\n                            onClick={() => setDeleteDialog(false)}\r\n                            className=\"btn btn-secondary fa-13 shadow\"\r\n                            style={{\r\n                                background: '#95a5a6',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            onClick={deleteFun}\r\n                            className=\"btn btn-danger fa-13 shadow\"\r\n                            style={{\r\n                                background: '#e74c3c',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n\r\n            </div>\r\n\r\n            <ListingTask\r\n                onClose={handleCloseDialogs}\r\n                dialogOpen={listingTaskDialogOpen}\r\n                setDialogOpen={setListingTaskDialogOpen}\r\n                isEdit={false}\r\n                parseData={parseData}\r\n                projectid={projectId}\r\n                onReload={handleReloadProjects}\r\n                selectedProject={selectedProject}\r\n            />\r\n\r\n            <ProjectForm\r\n                open={dialogOpen}\r\n                onClose={handleCloseDialogs}\r\n                inputValue={selectedProject}\r\n                isEdit={isEdit}\r\n                setReload={handleReloadProjects}\r\n                projectData={projectId}\r\n            />\r\n\r\n            <EmployeeManagementDialog\r\n                open={employeeDialogOpen}\r\n                onClose={() => setEmployeeDialogOpen(false)}\r\n                projectId={projectId}\r\n                onReload={handleReloadProjects}\r\n            />\r\n\r\n            <Dialog\r\n                open={deleteDialog}\r\n                onClose={handleCloseDialogs}\r\n                aria-labelledby=\"delete-dialog-title\"\r\n                aria-describedby=\"delete-dialog-description\">\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Confirmation</DialogTitle>\r\n                <DialogContent className=\"p-4\">\r\n                    Do you want to delete the project\r\n                    <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button onClick={() => setDeleteDialog(false)} className=\"btn btn-secondary fa-13 shadow\">\r\n                        Cancel\r\n                    </button>\r\n                    <button onClick={deleteFun} className=\"btn btn-danger fa-13 shadow\">\r\n                        Delete\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ActiveProjects;\r\n"],"names":["RequiredStar","_jsx","style","color","fontWeight","fontSize","children","customTableStyles","table","width","backgroundColor","rows","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_ref","open","onClose","inputValue","isEdit","setReload","localData","localStorage","getItem","parseData","JSON","parse","projectHead","setProjectHead","useState","proStatus","setProStatus","formData","setFormData","Project_Id","Project_Name","Project_Desc","Project_Head","Est_Start_Dt","ISOString","Est_End_Dt","Project_Status","Entry_By","UserId","Company_id","useEffect","fetchLink","concat","then","data","success","catch","e","console","error","log","Proejct_Head","handleChange","target","value","validateFields","requiredFields","field","toast","replace","inputFields","label","elem","type","required","options","map","obj","Name","Status_Id","Status","_Fragment","_jsxs","Dialog","DialogTitle","className","DialogContent","onSubmit","preventDefault","method","bodyData","prev","message","createFun","payload","index","onChange","option","idx","DialogActions","onClick","projectId","onReload","initialValue","Designation_Name","BranchName","employees","setEmployees","loading","setLoading","addEmployeeDialogOpen","setAddEmployeeDialogOpen","dropdownEmployees","setDropdownEmployees","selectedEmployees","setSelectedEmployees","contextObj","useContext","MyContext","fetchEmployeeDetails","fetchDropdownEmployees","fetchAssignedEmployees","async","onClosed","maxWidth","fullWidth","Box","display","justifyContent","alignItems","marginTop","marginInlineStart","Button","handleAddEmployeeOpen","sx","mr","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Array","isArray","length","user","EmployeeId","colSpan","position","bottom","Autocomplete","multiple","getOptionLabel","isOptionEqualToValue","event","uniqueValues","filter","val","self","findIndex","t","PopperComponent","props","Popper","placement","onclose","renderInput","params","TextField","placeholder","handleAddEmployeeClose","Number","Add_Rights","UserIds","emp","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","row","openAction","reload","onCloseFun","loadingOn","loadingOff","onTaskAdded","Task_Id","Task_Name","Task_Desc","Task_Group_Id","Entry_Date","Update_By","Update_Date","Task_Parameters","dialog","setDialog","setIsEdit","taskData","setTaskData","taskGroup","setTaskGroup","taskParameters","setTaskParameters","setInputValue","editDialog","setEditDialog","editInputValue","setEditInputValue","taskResponse","taskGroupResponse","taskParametersResponse","fetchData","isValidObject","closeDialog","closeEditDialog","cursor","paramArr","param","Param_Id","Paramet_Id","PostObj","response","postAndPutTask","maxLength","disabled","o","i","Task_Type_Id","Task_Type","Under_Task_Id","disableCloseOnSelect","Paramet_Name","Paramet_Data_Type","newValue","renderOption","_ref2","selected","Checkbox","marginRight","checked","opt","updatedParams","Default_Value","handleEditSubmit","select","taskId","editData","usersDropdown","setUsersDropdown","schType","setSchType","selectedSch","setSelectedSch","intitalVlaue","AN_No","Sch_Id","Assigned_Emp_Id","Emp_Id","Task_Assign_dt","Date","toISOString","split","Sch_Period","Sch_Time","EN_Time","Ord_By","Timer_Based","Sch_Type","Invovled_Stat","EmpGet","Is_Repitative","RepeatDays","Mon","Tue","Wed","Thu","Fri","Sat","Sun","assignEmpInpt","setAssignEmpInpt","userResponse","schTypeResponse","_selectedSchType$data","_selectedSchType$data2","selectedSchType","selectedSchId","Sch_Type_Id","selectedSchName","Sch_Name","_selectedSchType$data3","_selectedSchType$data4","TaskSchId","fetchSelectedData","Sch_Type_Name","EmployeeName","IS_Rep_Monday","IS_Rep_Tuesday","IS_Rep_Wednesday","IS_Rep_Thursday","Is_Rep_Friday","Is_Rep_Saturday","Is_Rep_Sunday","schPeriod","calculateSchPeriod","hours1","minutes1","hours2","minutes2","date1","date2","difference","Math","abs","hours","floor","minutes","String","padStart","repeatDaysMapped","Task_Levl_Id","tableLayout","verticalAlign","paddingRight","paddingLeft","Select","styles","isSearchable","padding","isDisabled","min","Boolean","htmlFor","flexWrap","prevState","marginBottom","gap","day","taskDetails","closeDialogTask","selectedTask","setSelectedTask","assignDialogOpen","setAssignDialogOpen","setTimeout","formatDate","dateString","date","isNaN","getTime","getDate","month","getMonth","year","getFullYear","CircularProgress","textAlign","detail","AssignedUser","CalendarMonth","QueryBuilder","Edit_Rights","IconButton","size","Edit","TaskAssign","dialogOpen","setDialogOpen","projectid","selectedProject","isDialogOpen","setIsDialogOpen","taskAssignOpen","setTaskAssignOpen","tasks","setTasks","setTaskDetails","taskDetailDialog","setTaskDetailsDialog","taskScheduleInput","setTaskScheduleInput","deleteDialogOpen","setDeleteDialogOpen","userData","entryBy","companyId","editDialogOpen","setEditDialogOpen","expandedAccordion","setExpandedAccordion","expandedAccordionSubTask","setExpandedAccordionSubTask","expandedAccordionTask","setExpandedAccordionTask","setIsedit","updateDialogOpen","setUpdateDialogOpen","expandedItem","setExpandedItem","schTypeId","selectedTab","setSelectedTab","scheduleTypes","setScheduleTypes","handleTabChange","handleAccordionChange","handleAccordionChangeTask","fetchTasks","useCallback","Schtype","taskOptions","handleviewTaskDetail","task","handleSchTypeChange","selectedOption","find","parseInt","PaperProps","borderRadius","flex","marginLeft","requestData","Sch_Project_Id","schtypeid","status","warn","updatesTaskDetails","typography","schedule","SchTypes","overallSchTypes","OverallSchTypes","TabContext","borderBottom","borderColor","TabList","Tab","sch","SchType","SchTypeId","toString","Typography","TabPanel","overallSchType","_overallSchType$TaskC","_overallSchType$TaskC2","TaskCounts","TotalTasks","CompletedTasks","Accordion","expanded","boxShadow","AccordionSummary","expandIcon","ExpandMoreIcon","flexGrow","TaskCountsInSchType","taskCount","AccordionDetails","TaskTypeGroups","taskType","Tasks","taskItem","handleAccordionChangeSubTask","maxHeight","stickyHeader","AssignedEmployees","employee","empIndex","Chip","margin","ViewHeadlineSharpIcon","count","TaskMetrics","handleTaskEdit","handleSelectedTask","LibraryAddIcon","TasksGet","Task_Sch_Duaration","Task_Start_Time","Task_End_Time","Task_Est_Start_Date","Task_Est_End_Date","handleTaskChange","Sch_Est_Start_Date","Sch_Est_End_Date","TaskMasterMgt","Reload","TaskIndividual","ActiveProjects","projects","setProjects","projectAlldata","setProjectAlldata","setSelectedProject","setProjectId","deleteDialog","setDeleteDialog","projectToDelete","setProjectToDelete","employeeDialogOpen","setEmployeeDialogOpen","listingTaskDialogOpen","setListingTaskDialogOpen","filterInput","setFilterInput","fetchProjects","fetchProjectData","handleReloadProjects","deleteFun","columns","selector","sortable","_projectAlldata$find","p","Project_Head_Name","_projectAlldata$find2","toLocaleDateString","TasksScheduled","completed","toFixed","calcPercentage","cell","handleOpenListingTaskDialog","Launch","TotalTaskAssignments","handleOpenEmployeeDialog","People","EmployeesInvolved","handleOpenEditDialog","filteredProjects","project","_projectAlldata$find3","_projectAlldata$find4","toLowerCase","includes","handleCloseDialogs","SearchIcon","left","border","handleOpenCreateDialog","DataTable","pagination","highlightOnHover","fixedHeader","paginationPerPage","responsive","persistTableHead","customStyles","top","cells","overflowY","ListingTask","ProjectForm","projectData","EmployeeManagementDialog"],"sourceRoot":""}