{"version":3,"file":"static/js/5232.23508ad2.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/dynamicMuiTable.jsx","Pages/Analytics/reportTemplates.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = ''\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                            )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                        column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                    )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {title && <h6 className='fw-bold text-muted'>{title}</h6>}\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableMaxHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.element,\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined\r\n};\r\n\r\n\r\nexport default FilterableTable;","import React from 'react';\r\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\r\nimport { isEqualNumber, LocalDate, NumberFormat } from './functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Box } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, SettingsOutlined } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport { fetchLink } from './fetchComponent';\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return NumberFormat(val)\r\n        case 'date':\r\n            return LocalDate(val);\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst getFun = (dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return {\r\n                filterVariant: 'range',\r\n                filterFn: 'between',\r\n            }\r\n        case 'date':\r\n            return {\r\n                filterVariant: 'text',\r\n            };\r\n        case 'string':\r\n            // const distinctValues = [];\r\n            // dataArray?.forEach(item => (item[key] && (distinctValues.findIndex(o => o?.value === item[key]?.toLocaleLowerCase()) === -1))\r\n            //     ? distinctValues.push({ label: String(item[key]), value: String(item[key]).toLocaleLowerCase() })\r\n            //     : null\r\n            // )\r\n            return {\r\n                filterVariant: 'text',\r\n            }\r\n\r\n        default:\r\n            return {}\r\n    }\r\n}\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DynamicMuiTable = ({ reportId, company, queryFilters, buttons, groupingState }) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [dataArray, setDataArray] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [aggregationValues, setAggregationValues] = useState({});\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        aggregations: false\r\n    });\r\n    console.log(groupingState)\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/template?ReportId=${reportId}`\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                if (data.data[0]) {\r\n\r\n                    const o = data.data[0];\r\n                    const strucre = {\r\n                        Report_Type_Id: o?.Report_Type_Id,\r\n                        reportName: o?.Report_Name,\r\n                        tables: o?.tablesList?.map(table => ({\r\n                            Table_Id: table?.Table_Id,\r\n                            Table_Name: table?.Table_Name,\r\n                            AliasName: table?.AliasName,\r\n                            Table_Accronym: table?.Table_Accronym,\r\n                            isChecked: true,\r\n                            columns: table?.columnsList?.map(column => ({\r\n                                Column_Data_Type: column?.Column_Data_Type,\r\n                                Column_Name: column?.Column_Name,\r\n                                IS_Default: column?.IS_Default,\r\n                                IS_Join_Key: column?.IS_Join_Key,\r\n                                Order_By: column?.Order_By,\r\n                                Table_Id: column?.Table_Id,\r\n                                isVisible: true,\r\n                                accessColumnName: `${table?.Table_Accronym}_${column?.Column_Name}`\r\n                            }))\r\n                        }))\r\n                    }\r\n                    const allColumns = strucre.tables?.reduce((colArr, table) => {\r\n                        return colArr.concat(table.columns);\r\n                    }, []);\r\n                    setColumns(allColumns);\r\n                }\r\n            }\r\n        }).catch(e => console.log(e))\r\n\r\n    }, [reportId])\r\n\r\n    useEffect(() => {\r\n        if (reportId) {\r\n            fetchLink({\r\n                address: `reports/template/executeQuery`,\r\n                method: 'POST',\r\n                headers: {\r\n                    'Db': company,\r\n                },\r\n                bodyData: {\r\n                    filterReq: queryFilters,\r\n                    ReportID: reportId\r\n                }\r\n            }).then(data => {\r\n                if (data?.success) {\r\n                    setDataArray(data?.data);\r\n                }\r\n            }).catch(e => console.log(e))\r\n        }\r\n    }, [company, reportId])\r\n\r\n    useEffect(() => {\r\n        const displayColumns = [...columns].sort((a, b) => (a.Order_By && b.Order_By) ? a.Order_By - b.Order_By : b.Order_By - a.Order_By)\r\n\r\n        const muiColumns = displayColumns.filter(column =>\r\n            !Boolean(Number(column?.IS_Default)) && !Boolean(Number(column?.IS_Join_Key))\r\n        ).map(column => ({\r\n            header: column?.Column_Name?.replace(/_/g, ' '),\r\n            accessorKey: column?.accessColumnName,\r\n            sortable: true,\r\n            size: 150,\r\n            // ...aggregations(column?.Column_Data_Type, column?.Column_Name),\r\n            aggregationFn: aggregationValues[column?.Column_Name] ? aggregationValues[column?.Column_Name] : '',\r\n            AggregatedCell: ({ cell }) => (\r\n                <div className='blue-text text-center float-end w-100'>\r\n                    {cell.getValue() ? NumberFormat(cell.getValue()) : ''}\r\n                </div>\r\n            ),\r\n            Cell: ({ cell }) => (\r\n                <p className={`m-0 text-center fa-14 w-100`}>\r\n                    {formatString(cell.getValue(), column?.Column_Data_Type)}\r\n                </p>\r\n            ),\r\n            ...getFun(column?.Column_Data_Type),\r\n        }))\r\n\r\n        setDispColmn(muiColumns)\r\n    }, [columns, aggregationValues])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleExportRows = (rows) => {\r\n        const rowData = rows.map((row) => row.original);\r\n        const csv = generateCsv(csvConfig)(rowData);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleExportData = () => {\r\n        const csv = generateCsv(csvConfig)(dataArray);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const table = useMaterialReactTable({\r\n        columns: dispColmn,\r\n        data: showData || [],\r\n        enableColumnResizing: true,\r\n        enableGrouping: true,\r\n        enableStickyHeader: true,\r\n        enableStickyFooter: true,\r\n        enableColumnOrdering: true,\r\n        enableRowNumbers: false,\r\n        initialState: {\r\n            density: 'compact',\r\n            // grouping: groupingState?.filter(o => typeof o === 'string')\r\n            // .filter(o => {\r\n            //     const ind = dispColmn.findIndex(indVal => indVal?.accessorKey === o);\r\n            //     return ind !== -1; \r\n            // })\r\n            // ,\r\n            pagination: { pageIndex: 0, pageSize: 100 },\r\n        },\r\n        muiToolbarAlertBannerChipProps: { color: 'primary' },\r\n        muiTableContainerProps: { sx: { maxHeight: '68dvh', minHeight: '46vh' } },\r\n        muiTableProps: {\r\n            sx: {\r\n                caption: {\r\n                    captionSide: 'top',\r\n                },\r\n            },\r\n        },\r\n        muiTableHeadCellProps: {\r\n            sx: {\r\n                fontWeight: 'normal',\r\n            },\r\n            className: ' border text-center'\r\n        },\r\n        muiTableBodyCellProps: {\r\n            className: ' border-end text-center'\r\n        },\r\n        renderTopToolbarCustomActions: ({ table }) => (\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={handleExportData}\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    All Data\r\n                </Button>\r\n                <Button\r\n                    disabled={table.getPrePaginationRowModel().rows.length === 0}\r\n                    onClick={() =>\r\n                        handleExportRows(table.getPrePaginationRowModel().rows)\r\n                    }\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    Filtered Rows\r\n                </Button>\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, aggregations: true }))}\r\n                    startIcon={<SettingsOutlined />}\r\n                >\r\n                    Aggregation\r\n                </Button>\r\n                {/*  */}\r\n                {/* {buttons({grouping: table.getState().grouping})} */}\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className=\"d-md-none d-inline\"\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n        ),\r\n    })\r\n\r\n    const memoizedTableConfig = useMemo(() => table, [table, aggregationValues, showData, groupingState]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of columns) {\r\n            if (filters[column.accessColumnName]) {\r\n                if (filters[column.accessColumnName].type === 'range') {\r\n                    const { min, max } = filters[column.accessColumnName];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.accessColumnName];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.accessColumnName].type === 'date') {\r\n                    const { start, end } = filters[column.accessColumnName].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.accessColumnName]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.accessColumnName])) {\r\n                    filtered = filters[column.accessColumnName]?.length > 0 ? filtered.filter(item => filters[column.accessColumnName].includes(item[column.accessColumnName].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { accessColumnName, Column_Name, Column_Data_Type } = column;\r\n        if (Column_Data_Type === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'range', ...filters[accessColumnName], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'range', ...filters[accessColumnName], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'date', value: { ...filters[accessColumnName]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'date', value: { ...filters[accessColumnName]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[accessColumnName]?.toLowerCase()?.trim()))].sort();\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${accessColumnName}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[accessColumnName] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(accessColumnName, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Column_Name?.replace(/_/g, ' ')}\r\n                            placeholder={`Select ${Column_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row \">\r\n\r\n                <div className=\"col-xxl-10 col-lg-9 col-md-8\">\r\n                    <div className=\"p-2\">\r\n                        <MaterialReactTable table={memoizedTableConfig} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        Filters\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {columns.map((column, ke) => (isEqualNumber(column?.IS_Default, 0) && isEqualNumber(column?.IS_Join_Key, 0)) && (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        Filters\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </h5>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {columns.map((column, ke) => (isEqualNumber(column?.IS_Default, 0) && isEqualNumber(column?.IS_Join_Key, 0)) && (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.aggregations}\r\n                onClose={() => setDialogs(pre => ({ ...pre, aggregations: false }))}\r\n                fullWidth maxWidth='lg'\r\n            >\r\n                <DialogTitle>Aggregations</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\" style={{ minHeight: '30dvh' }}>\r\n                        {[...columns].filter(column => (\r\n                            isEqualNumber(column?.IS_Default, 0)\r\n                            && isEqualNumber(column?.IS_Join_Key, 0)\r\n                            && (column.Column_Data_Type === 'number'\r\n                                || column.Column_Data_Type === 'string')\r\n                        )).map((o, i) => (\r\n                            <div className=\"col-xxl-3 col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <label>{o?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                <select\r\n                                    className='cus-inpt'\r\n                                    value={aggregationValues[o?.Column_Name] ?? ''}\r\n                                    onChange={e => setAggregationValues(pre => ({ ...pre, [o.Column_Name]: e.target.value }))}\r\n                                >\r\n                                    {\r\n                                        [\r\n                                            { label: 'Select Aggregation', value: '' },\r\n                                            { label: 'count', value: 'count' },\r\n                                            { label: 'extent', value: 'extent' },\r\n                                            { label: 'max', value: 'max' },\r\n                                            { label: 'min', value: 'min' },\r\n                                            { label: 'mean', value: 'mean' },\r\n                                            { label: 'median', value: 'median' },\r\n                                            { label: 'uniqueCount', value: 'uniqueCount' },\r\n                                            { label: 'sum', value: 'sum' },\r\n                                            { label: 'unique', value: 'unique' },\r\n                                        ].map((o, i) => (\r\n                                            <option value={o.value} key={i}>{o.label}</option>\r\n                                        ))\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, aggregations: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DynamicMuiTable;","import React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n    Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tab, Tabs, Box, Typography,\r\n    ListItemIcon, ListItemText, MenuItem, MenuList, Popover, \r\n} from '@mui/material';\r\nimport { ArrowBackIosNewOutlined, Edit, Visibility, List, Delete, FilterAlt, Launch, Close } from '@mui/icons-material';\r\nimport { isEqualNumber, UTCDateWithTime } from '../../Components/functions';\r\nimport { MyContext } from '../../Components/context/contextProvider';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport DynamicMuiTable from '../../Components/dynamicMuiTable';\r\nimport { toast } from 'react-toastify';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport FilterableTable from '../../Components/filterableTable2'\r\n\r\n\r\n\r\nconst TabPanel = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`tabpanel-${index}`}\r\n            aria-labelledby={`tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ReportTemplates = () => {\r\n    const storage = JSON.parse(localStorage.getItem('user'))\r\n    const [templates, setTemplates] = useState([]);\r\n    const variableState = {\r\n        search: '',\r\n        openFilterDialog: false,\r\n        filterTablesAndColumns: {},\r\n        deleteConfirmationDialog: false,\r\n        preFilterDialog: false,\r\n    }\r\n    const [localVariable, setLocalVariable] = useState(variableState);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [filters, setFilters] = useState({})\r\n    const nav = useNavigate();\r\n    const [reload, setReload] = useState(false)\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/template`,\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                setTemplates(data?.data);\r\n            }\r\n        }).catch(e => console.log(e))\r\n    }, [reload])\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Column_Name, Column_Data_Type } = column;\r\n        if (Column_Data_Type === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"cus-inpt me-1\"\r\n                        value={filters[Column_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'range',\r\n                            ...filters[Column_Name],\r\n                            min: e.target.value ? parseFloat(e.target.value) : undefined\r\n                        })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"cus-inpt ms-1\"\r\n                        value={filters[Column_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'range',\r\n                            ...filters[Column_Name],\r\n                            max: e.target.value ? parseFloat(e.target.value) : undefined\r\n                        })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between flex-wrap'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"cus-inpt w-auto flex-grow-1 me-1 my-1\"\r\n                        value={filters[Column_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'date',\r\n                            value: { ...filters[Column_Name]?.value, start: e.target.value || undefined }\r\n                        })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"cus-inpt w-auto flex-grow-1 ms-1 my-1\"\r\n                        value={filters[Column_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'date',\r\n                            value: { ...filters[Column_Name]?.value, end: e.target.value || undefined }\r\n                        })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'string') {\r\n            return (\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder='Search...'\r\n                    className='cus-inpt'\r\n                    value={filters[Column_Name]?.value ?? ''}\r\n                    onChange={e => handleFilterChange(Column_Name, {\r\n                        type: 'textCompare',\r\n                        value: String(e.target.value).toLowerCase() || ''\r\n                    })}\r\n                />\r\n            )\r\n        }\r\n    };\r\n\r\n    const Actions = ({ o }) => {\r\n        const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n        const dataToForward = {\r\n            Report_Type_Id: o?.Report_Type_Id,\r\n            reportName: o?.Report_Name,\r\n            ReportState: o?.ReportState,\r\n            tables: o?.tablesList?.map(table => ({\r\n                Table_Id: table?.Table_Id,\r\n                Table_Name: table?.Table_Name,\r\n                AliasName: table?.AliasName,\r\n                Table_Accronym: table?.Table_Accronym,\r\n                isChecked: true,\r\n                columns: table?.columnsList?.map(column => ({\r\n                    Column_Data_Type: column?.Column_Data_Type,\r\n                    Column_Name: column?.Column_Name,\r\n                    IS_Default: column?.IS_Default,\r\n                    IS_Join_Key: column?.IS_Join_Key,\r\n                    Order_By: column?.Order_By,\r\n                    Table_Id: column?.Table_Id,\r\n                    isVisible: true\r\n                }))\r\n            }))\r\n        }\r\n\r\n        const popOverOpen = Boolean(anchorEl);\r\n        const id = popOverOpen ? o?.Report_Name : undefined;\r\n\r\n        const handleClick = (event) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <IconButton aria-describedby={id} onClick={handleClick}>\r\n                    <List />\r\n                </IconButton>\r\n\r\n                <Popover\r\n                    id={id}\r\n                    open={popOverOpen}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                >\r\n                    <MenuList>\r\n\r\n                        <MenuItem\r\n                            onClick={\r\n                                () => {\r\n                                    setLocalVariable(pre => ({\r\n                                        ...pre,\r\n                                        filterTablesAndColumns: dataToForward,\r\n                                        openFilterDialog: true,\r\n                                    }));\r\n                                    setSelectedTab(0);\r\n                                    setFilters({})\r\n                                }\r\n                            }\r\n                        >\r\n                            <ListItemIcon><Visibility fontSize=\"small\" /></ListItemIcon>\r\n                            <ListItemText>OPEN</ListItemText>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem\r\n                            onClick={\r\n                                !storage?.Company_id\r\n                                    ? () => toast.warn('Select Company!')\r\n                                    : () => {\r\n                                        setLocalVariable(pre => ({\r\n                                            ...pre,\r\n                                            filterTablesAndColumns: dataToForward,\r\n                                            preFilterDialog: true,\r\n                                        }));\r\n                                        setFilters({});\r\n                                        setSelectedTab(0);\r\n                                    }\r\n                            }\r\n                        >\r\n                            <ListItemIcon><FilterAlt fontSize=\"small\" /></ListItemIcon>\r\n                            <ListItemText>FILTERS</ListItemText>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem\r\n                            onClick={() => nav('create', { state: { ReportState: dataToForward } })}\r\n                        >\r\n                            <ListItemIcon><Edit fontSize=\"small\" /></ListItemIcon>\r\n                            <ListItemText>EDIT</ListItemText>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem\r\n                            onClick={() => setLocalVariable(pre => ({ ...pre, deleteConfirmationDialog: true, filterTablesAndColumns: dataToForward }))}\r\n                        >\r\n                            <ListItemIcon><Delete fontSize=\"small\" color='error' /></ListItemIcon>\r\n                            <ListItemText>DELETE</ListItemText>\r\n                        </MenuItem>\r\n\r\n                    </MenuList>\r\n                </Popover>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const RowComp = ({ o }) => {\r\n        return (\r\n            <>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                {['SNo', 'Table', 'Column', 'Data-Type', 'Order'].map(o => (\r\n                                    <th className=\"border fa-14 text-center\" key={o} style={{ backgroundColor: '#EDF0F7' }}>{o}</th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {o?.tablesList?.map((table, tableInd) => (\r\n                                <React.Fragment key={tableInd}>\r\n                                    {table?.columnsList?.map((column, columnInd) => (\r\n                                        <tr key={columnInd}>\r\n                                            {columnInd === 0 && (\r\n                                                <>\r\n                                                    <td className=\"border fa-13 text-center vctr\" rowSpan={table?.columnsList?.length}>{tableInd + 1}</td>\r\n                                                    <td className=\"border fa-13 text-center blue-text vctr\" rowSpan={table?.columnsList?.length}>\r\n                                                        {table?.AliasName}\r\n                                                    </td>\r\n                                                </>\r\n                                            )}\r\n                                            <td\r\n                                                className={`\r\n                                                                border fa-13 vctr\r\n                                                                ${Boolean(Number(column?.IS_Default)) ? ' blue-text ' : ''}\r\n                                                                ${Boolean(Number(column?.IS_Join_Key)) ? ' fw-bold ' : ''}\r\n                                                                `}\r\n                                            >\r\n                                                {column?.Column_Name}\r\n                                            </td>\r\n                                            <td className=\"border fa-13 vctr\">{column?.Column_Data_Type}</td>\r\n                                            <td className=\"border fa-13 vctr\">{column?.Order_By}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </React.Fragment>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setLocalVariable(pre => ({ ...pre, openFilterDialog: false, filterTablesAndColumns: {} }))\r\n    }\r\n\r\n    const closeDeleteConfirmationDialog = () => {\r\n        setLocalVariable(pre => ({ ...pre, deleteConfirmationDialog: false, filterTablesAndColumns: {} }))\r\n    }\r\n\r\n    const closeFilterDialog = () => {\r\n        setLocalVariable(pre => ({ ...pre, preFilterDialog: false }));\r\n        setFilters({})\r\n    }\r\n\r\n    const deleteTemplate = () => {\r\n        setLocalVariable(pre => ({ ...pre, deleteConfirmationDialog: false }))\r\n        fetchLink({\r\n            address: `reports/template`,\r\n            method: 'DELETE',\r\n            bodyData: {\r\n                Report_Type_Id: localVariable?.filterTablesAndColumns?.Report_Type_Id\r\n            }\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                toast.success(data.message)\r\n                setReload(pre => !pre)\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.log(e))\r\n            .finally(() => setLocalVariable(pre => ({ ...pre, filterTablesAndColumns: {} })))\r\n    }\r\n\r\n    const saveReportGroupingState = (reportid, grouping) => {\r\n        fetchLink({\r\n            address: `reports/template/templateState`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                Report_Type_Id: reportid,\r\n                ReportState: grouping\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Card>\r\n\r\n                <div className=\"p-2 border-bottom fa-16 fw-bold d-flex justify-content-between align-items-center\">\r\n                    <span className=\"text-primary text-uppercase ps-3\">Report Templates</span>\r\n                    {isEqualNumber(contextObj?.Add_Rights, 1) && (\r\n                        <Button variant='outlined' onClick={() => nav('create')}>Add Report</Button>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"d-flex justify-content-end p-3\">\r\n                    <input\r\n                        type=\"search\"\r\n                        className='cus-inpt w-auto'\r\n                        placeholder='Search Report Name'\r\n                        value={localVariable?.search ?? ''}\r\n                        onChange={e => setLocalVariable(pre => ({ ...pre, search: String(e.target.value).toLowerCase() }))}\r\n                    />\r\n                </div>\r\n\r\n                <CardContent className='p-0'>\r\n                    <FilterableTable\r\n                        dataArray={\r\n                            !localVariable?.search ? templates : (\r\n                                [...templates].filter(fil =>\r\n                                    String(fil?.Report_Name).toLowerCase().includes(localVariable.search)\r\n                                )\r\n                            )\r\n                        }\r\n                        columns={[\r\n                            { Field_Name: 'Report_Name', ColumnHeader: 'Report Name', Fied_Data: 'string', isVisible: 1 },\r\n                            { ColumnHeader: 'Tables', isVisible: 1, isCustomCell: true, Cell: ({ row }) => row?.tablesList?.length },\r\n                            { ColumnHeader: 'Columns', isVisible: 1, isCustomCell: true, Cell: ({ row }) => row?.tablesList?.reduce((sum, item) => sum += Number(item?.columnsList?.length), 0) },\r\n                            { Field_Name: 'CreatedByGet', ColumnHeader: 'Created By', Fied_Data: 'string', isVisible: 1, },\r\n                            { ColumnHeader: 'Columns', isVisible: 1, isCustomCell: true, Cell: ({ row }) => row?.CreatedAt ? UTCDateWithTime(row?.CreatedAt) : ' - ' },\r\n                            { ColumnHeader: 'Action', isVisible: 1, isCustomCell: true, Cell: ({ row }) => <Actions o={row} /> },\r\n                        ]}\r\n                        EnableSerialNumber\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => <RowComp o={row} />}\r\n                        tableMaxHeight={650}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={localVariable?.openFilterDialog}\r\n                onClose={closeDialog}\r\n                fullScreen\r\n            >\r\n                <DialogTitle className='d-flex justify-content-between align-items-center fa-16'>\r\n                    <span>\r\n                        Report - <span className=\"blue-text\">{localVariable?.filterTablesAndColumns?.reportName}</span>\r\n                    </span>\r\n                    <span>\r\n                        <IconButton onClick={closeDialog} color='error' className=' shadow-lg'>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {(localVariable?.filterTablesAndColumns?.Report_Type_Id && storage?.Company_id) && (\r\n                        <DynamicMuiTable\r\n                            reportId={localVariable?.filterTablesAndColumns?.Report_Type_Id}\r\n                            company={storage?.Company_id}\r\n                            queryFilters={filters}\r\n                            // buttons={({ grouping }) => (\r\n                            //     <Button\r\n                            //         onClick={() => saveReportGroupingState(localVariable?.filterTablesAndColumns?.Report_Type_Id, grouping)}\r\n                            //         disabled={grouping.length === 0}\r\n                            //         startIcon={<Save />}\r\n                            //     >\r\n                            //         Save State\r\n                            //     </Button>\r\n                            // )}\r\n                            // groupingState={\r\n                            //     localVariable?.filterTablesAndColumns?.ReportState \r\n                            //         ? JSON.parse(localVariable?.filterTablesAndColumns?.ReportState)\r\n                            //         : []\r\n                            // }\r\n                        />\r\n                    )}\r\n                    {/* {console.log(localVariable)} */}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={closeDialog}\r\n                        startIcon={<ArrowBackIosNewOutlined />}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={localVariable?.deleteConfirmationDialog}\r\n                onClose={closeDeleteConfirmationDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Confirmation</DialogTitle>\r\n                <DialogContent>\r\n                    Do you want to delete the Template <span className='blue-text'>{localVariable?.filterTablesAndColumns?.reportName}</span> permanently\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={closeDeleteConfirmationDialog}\r\n                    >\r\n                        cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={deleteTemplate}\r\n                        startIcon={<Delete />}\r\n                        variant='outlined'\r\n                        color='error'\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={localVariable?.preFilterDialog}\r\n                onClose={closeFilterDialog}\r\n                fullWidth maxWidth='md'\r\n            >\r\n                <DialogTitle className='d-flex justify-content-between'>\r\n                    <span>\r\n                        Filters For <span className=\"blue-text\">{localVariable?.filterTablesAndColumns?.reportName}</span> - Report\r\n                    </span>\r\n                    <span>\r\n                        <IconButton onClick={closeFilterDialog} color='error' className='shadow-lg '>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Tabs value={selectedTab} onChange={handleTabChange}>\r\n                        {localVariable?.filterTablesAndColumns?.tables?.map((table, i) => (\r\n                            <Tab label={table?.AliasName} key={i} />\r\n                        ))}\r\n                    </Tabs>\r\n                    {localVariable?.filterTablesAndColumns?.tables?.map((table, i) => (\r\n                        <TabPanel value={selectedTab} index={i} key={i}>\r\n                            <div className=\"row\">\r\n                                {table?.columns?.map((column, ii) => (\r\n                                    !Boolean(Number(column?.IS_Default)) &&\r\n                                    !Boolean(Number(column?.IS_Join_Key)) &&\r\n                                    (\r\n                                        <div className=\"p-2 col-md-6 \" key={ii}>\r\n                                            <label className='mb-2 fw-bold text-muted'>{column?.Column_Name}</label>\r\n                                            {renderFilter(column)}\r\n                                        </div>\r\n                                    )\r\n                                ))}\r\n                            </div>\r\n                        </TabPanel>\r\n                    ))}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={closeFilterDialog}\r\n                    >\r\n                        cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => setLocalVariable(pre => ({ ...pre, openFilterDialog: true, preFilterDialog: false }))}\r\n                        startIcon={<Launch />}\r\n                        variant='contained'\r\n                    >\r\n                        Open report\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportTemplates"],"names":["FilterableTable","_ref","dataArray","columns","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","columnAlign","type","class","columnVerticalAlign","sortedData","data","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","row","index","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","map","column","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Defult_Display","isVisible","Boolean","isCustomCell","Cell","align","find","String","toLowerCase","verticalAlign","Field_Name","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","key","value","console","log","Fied_Data","colSpan","Number","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","ColumnHeader","replace","concat","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","getFun","filterVariant","filterFn","csvConfig","mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","reportId","company","queryFilters","buttons","groupingState","dispColmn","setDispColmn","setDataArray","setColumns","filters","setFilters","filteredData","setFilteredData","showData","keys","aggregationValues","setAggregationValues","dialogs","setDialogs","aggregations","useEffect","fetchLink","address","then","success","_o$tablesList","_strucre$tables","o","strucre","Report_Type_Id","reportName","Report_Name","tables","tablesList","table","_table$columnsList","Table_Id","Table_Name","AliasName","Table_Accronym","isChecked","columnsList","Column_Data_Type","Column_Name","IS_Default","IS_Join_Key","Order_By","accessColumnName","allColumns","reduce","colArr","catch","e","method","headers","bodyData","filterReq","ReportID","muiColumns","filter","_column$Column_Name","header","accessorKey","sortable","aggregationFn","AggregatedCell","cell","getValue","applyFilters","handleExportData","csv","generateCsv","download","useMaterialReactTable","enableColumnResizing","enableGrouping","enableStickyHeader","enableStickyFooter","enableColumnOrdering","enableRowNumbers","initialState","density","pagination","pageIndex","pageSize","muiToolbarAlertBannerChipProps","color","muiTableContainerProps","minHeight","muiTableProps","caption","captionSide","muiTableHeadCellProps","fontWeight","muiTableBodyCellProps","renderTopToolbarCustomActions","_ref4","Box","display","gap","padding","flexWrap","Button","startIcon","FileDownload","disabled","getPrePaginationRowModel","rows","rowData","original","handleExportRows","SettingsOutlined","FilterAlt","memoizedTableConfig","useMemo","handleFilterChange","prevFilters","filtered","min","max","item","start","end","dateValue","Date","isArray","_filters$column$acces","includes","trim","renderFilter","_filters$accessColumn","_filters$accessColumn2","_filters$accessColumn3","_filters$accessColumn4","_filters$accessColumn5","_filters$accessColumn6","_filters$accessColumn7","_filters$accessColumn9","_filters$accessColumn10","_filters$accessColumn11","placeholder","onChange","parseFloat","_filters$accessColumn8","_filters$accessColumn12","distinctValues","_item$accessColumnNam","_item$accessColumnNam2","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","_ref5","selected","Checkbox","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","_Fragment","MaterialReactTable","Tooltip","FilterAltOff","overflow","_column$Column_Name2","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","_column$Column_Name3","DialogActions","i","_o$Column_Name","_aggregationValues$o$","TabPanel","other","role","hidden","p","Typography","ReportTemplates","_localVariable$search","_localVariable$filter2","_localVariable$filter3","_localVariable$filter4","_localVariable$filter5","_localVariable$filter6","_localVariable$filter7","_localVariable$filter8","_localVariable$filter9","_localVariable$filter10","storage","JSON","parse","localStorage","getItem","templates","setTemplates","localVariable","setLocalVariable","search","openFilterDialog","filterTablesAndColumns","deleteConfirmationDialog","preFilterDialog","contextObj","useContext","MyContext","nav","useNavigate","reload","setReload","selectedTab","setSelectedTab","_filters$Column_Name$","_filters$Column_Name","_filters$Column_Name$2","_filters$Column_Name2","_filters$Column_Name$3","_filters$Column_Name3","_filters$Column_Name4","_filters$Column_Name$4","_filters$Column_Name6","_filters$Column_Name7","_filters$Column_Name$5","_filters$Column_Name9","_filters$Column_Name5","_filters$Column_Name8","Actions","anchorEl","setAnchorEl","dataToForward","ReportState","popOverOpen","currentTarget","List","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","MenuItem","ListItemIcon","Visibility","ListItemText","Company_id","toast","warn","state","Edit","Delete","_o$tablesList2","tableInd","_table$columnsList2","React","_table$columnsList3","_table$columnsList4","rowSpan","closeDialog","closeDeleteConfirmationDialog","closeFilterDialog","Card","Add_Rights","variant","CardContent","fil","_row$tablesList","_row$tablesList2","sum","_item$columnsList","CreatedAt","UTCDateWithTime","_ref6","_ref7","fullScreen","Close","DynamicMuiTable","ArrowBackIosNewOutlined","deleteTemplate","_localVariable$filter","message","error","finally","Tabs","handleTabChange","Tab","_table$columns","ii","Launch"],"sourceRoot":""}