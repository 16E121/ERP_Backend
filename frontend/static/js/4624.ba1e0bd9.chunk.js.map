{"version":3,"file":"static/js/4624.ba1e0bd9.chunk.js","mappings":"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","sources":["Components/requiredStar.jsx","Components/tablecolumn.js","Components/ProjectList/addEditProject.jsx","Components/employeeManagement/employeeManagement.jsx","Pages/Tasks/Components/newaddEditTask.jsx","Components/taskAssign/addEditTaskAssign.jsx","Components/taskDetails/taskIndividual.jsx","Components/taskDetails/listingTask.jsx","Pages/Masters/ProjectList.jsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/LibraryAdd.js","../node_modules/@mui/icons-material/Search.js","../node_modules/@mui/icons-material/ViewHeadlineSharp.js","../node_modules/@mui/icons-material/esm/CalendarMonth.js","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/Launch.js","../node_modules/@mui/icons-material/esm/People.js","../node_modules/@mui/icons-material/esm/QueryBuilder.js","../node_modules/@mui/icons-material/utils/createSvgIcon.js","../node_modules/@mui/material/Box/boxClasses.js","../node_modules/@mui/material/Box/Box.js","../node_modules/@mui/material/utils/createChainedFunction.js","../node_modules/@mui/material/utils/deprecatedPropType.js","../node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.js","../node_modules/@mui/material/utils/requirePropFactory.js","../node_modules/@mui/utils/requirePropFactory/requirePropFactory.js","../node_modules/@mui/material/utils/setRef.js","../node_modules/@mui/material/utils/unsupportedProp.js","../node_modules/@mui/utils/unsupportedProp/unsupportedProp.js","../node_modules/@mui/material/utils/index.js","../node_modules/@mui/system/esm/createBox.js"],"sourcesContent":["const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\nimport SMT_LOGO from './smt.png';\n\nexport const customTableStyles = {\n    table: {\n        style: {\n            width: 'auto',\n            backgroundColor: 'transparent',\n            // borderRadius: '5px',\n        }\n    },\n    rows: {\n        style: {\n            backgroundColor: 'transparent',\n        },\n    },\n    headCells: {\n        style: {\n            backgroundColor: '#6b9080f8',\n            color: 'white',\n            fontSize: '14px',\n            // borderRadius: '5px',\n        },\n    },\n};\n\nexport const customSelectStyles = {\n    control: (provided, state) => ({\n        ...provided,\n        height: '45px',\n        background: 'rgba(255, 255, 255, 0.322)'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n\nexport const customSelectStyles2 = {\n    control: (provided, state) => ({\n        ...provided,\n        background: 'transparent',\n        border: 'none',\n        color: 'rgba(255, 255, 255, 0.322)',\n        // minWidth: '160px'\n    }),\n    menu: (provided, state) => ({\n        ...provided,\n        color: 'black',\n        zIndex: 9999,\n    }),\n};\n\nexport const MainMenu = [\n    {\n        id: 1,\n        headname: 'Menu ID',\n        variant: 'head',\n        align: 'left',\n        width: 100\n    },\n    {\n        id: 2,\n        headname: 'MenuName',\n    },\n    {\n        id: 3,\n        headname: 'Read Rights'\n    },\n    {\n        id: 4,\n        headname: 'Add Rights'\n    },\n    {\n        id: 5,\n        headname: 'Edit Rights'\n    },\n    {\n        id: 6,\n        headname: 'Delete Rights'\n    },\n    {\n        id: 7,\n        headname: 'Print Rights'\n    },\n    {\n        id: 8,\n        headname: 'Action'\n    }\n];\n\nexport const companyDetails = [\n    {\n        dataBase: 1,\n        name: 'SHANKAR TRADERS',\n        business: 'Wholesale Merchant in Dhall',\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33AADFS6973R1ZD',\n        phone: '984-313-1353, 984-335-5166',\n        fssai: '12418012000818',\n        bankAccount: '0021 5032 0885 122',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 2,\n        name: 'SMT AGRO PRODUCTS',\n        business: '',\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\n        logo: SMT_LOGO,\n        gstin: '33ACMFS3420Q1ZQ',\n        phone: '0452-4371625',\n        fssai: '12418012000818',\n        bankAccount: '0025 3031 0875 947',\n        ifsc: 'TMBL0000002'\n    },\n    {\n        dataBase: 3,\n        name: 'BHAVANI TRADERS',\n        business: '',\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\n        logo: SMT_LOGO,\n        gstin: '33AAEFB6728J1ZG',\n        phone: '958-559-7641, 958-559-7614',\n        fssai: '12418012000670',\n        bankAccount: '0021 5005 0800 309',\n        ifsc: 'TMBL0000002'\n    },\n]","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { fetchLink } from \"../fetchComponent\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport RequiredStar from '../requiredStar';\r\nimport { ISOString } from '../functions';\r\n\r\nconst ProjectForm = ({ open, onClose, inputValue, isEdit, setReload }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n\r\n    const [projectHead, setProjectHead] = useState([]);\r\n    const [proStatus, setProStatus] = useState([]);\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        Project_Id: '',\r\n        Project_Name: '',\r\n        Project_Desc: '',\r\n        Project_Head: '',\r\n        Est_Start_Dt: ISOString(),\r\n        Est_End_Dt: ISOString(),\r\n        Project_Status: '',\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            setProjectHead(data.success ? data.data : []);\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, [parseData?.Company_id]);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `taskManagement/statusList`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProStatus(data.data);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (open) {\r\n            console.log('inputValue',inputValue)\r\n\r\n            if (isEdit && inputValue) {\r\n                console.log(inputValue)\r\n                setFormData({\r\n                    ...inputValue,\r\n                    Project_Head:inputValue.Proejct_Head|| '',\r\n                    Est_Start_Dt: inputValue.Est_Start_Dt ? ISOString(inputValue.Est_Start_Dt) : '',\r\n                    Est_End_Dt: inputValue.Est_End_Dt ? ISOString(inputValue.Est_End_Dt) : '',\r\n                });\r\n            } else if (!isEdit) {\r\n\r\n                setFormData({\r\n                    Project_Id: '',\r\n                    Project_Name: '',\r\n                    Project_Desc: '',\r\n                    Project_Head: '',\r\n                    Est_Start_Dt: ISOString(),\r\n                    Est_End_Dt: ISOString(),\r\n                    Project_Status: '',\r\n                    Entry_By: parseData?.UserId,\r\n                    Company_id: parseData?.Company_id\r\n                });\r\n            }\r\n        }\r\n    }, [inputValue, open, isEdit]);\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const validateFields = () => {\r\n        const requiredFields = [\r\n            'Project_Name',\r\n            'Project_Head',\r\n            'Est_Start_Dt',\r\n            'Est_End_Dt',\r\n            'Project_Status',\r\n        ];\r\n\r\n        for (const field of requiredFields) {\r\n            if (!formData[field]) {\r\n                toast.error(`${field.replace(/_/g, ' ')} is required`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    const createFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        const payload = {\r\n            ...formData,\r\n            Company_id: parseData.Company_id\r\n        };\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'POST',\r\n            bodyData: payload,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => {\r\n            console.error('Fetch Error:', e);\r\n            toast.error(\"An error occurred while creating the project.\");\r\n        });\r\n    };\r\n\r\n    const editFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'PUT',\r\n            bodyData: formData,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        isEdit ? editFun() : createFun();\r\n    };\r\n\r\n    const inputFields = [\r\n        {\r\n            label: 'Project Name',\r\n            elem: 'input',\r\n            type: 'text',\r\n            required: true,\r\n            name: 'Project_Name',\r\n            value: formData.Project_Name || '',\r\n        },\r\n        {\r\n            label: \"Project Head\",\r\n            elem: \"select\",\r\n            options: projectHead.map(obj => ({ value: obj?.UserId, label: obj?.Name })),\r\n            required: true,\r\n            name: 'Project_Head',\r\n            value: formData.Project_Head || '',\r\n        },\r\n        {\r\n            label: 'Estimated Start Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_Start_Dt',\r\n            value: formData.Est_Start_Dt || '',\r\n        },\r\n        {\r\n            label: 'Estimated End Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_End_Dt',\r\n            value: formData.Est_End_Dt || '',\r\n        },\r\n        {\r\n            label: 'Project Status',\r\n            elem: 'select',\r\n            options: proStatus.map(obj => ({ value: obj.Status_Id, label: obj.Status })),\r\n            required: true,\r\n            name: 'Project_Status',\r\n            value: formData.Project_Status || '',\r\n        },\r\n        {\r\n            label: 'Description',\r\n            elem: 'textarea',\r\n            name: 'Project_Desc',\r\n            value: formData.Project_Desc || ' ',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} onClose={onClose}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? \"Edit Project\" : 'Create Project'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"row\">\r\n                            {inputFields.map((field, index) => (\r\n                                <div key={index} className=\"col-lg-4 mb-3\">\r\n                                    <label>{field.label} {field.required && <RequiredStar />}</label>\r\n                                    {field.elem === 'textarea' ? (\r\n                                        <textarea\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    ) : field.elem === 'select' ? (\r\n                                        <select\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            <option value=''>Select</option>\r\n                                            {field.options && field.options.map((option, idx) => (\r\n                                                <option key={idx} value={option.value}>{option.label}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    ) : (\r\n                                        <input\r\n                                            type={field.type}\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <DialogActions>\r\n                            <button\r\n                                className=\"btn btn-light rounded-5 px-3\"\r\n                                type=\"button\"\r\n                                onClick={onClose}>\r\n                                Cancel\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-primary rounded-5 px-3\"\r\n                                type='submit'>\r\n                                {isEdit ? \"Update\" : \"Submit\"}\r\n                            </button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectForm;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Autocomplete,\r\n    TextField,\r\n} from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Box } from '@mui/material';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport Popper from '@mui/material/Popper';\r\n\r\nconst EmployeeManagementDialog = ({ open, onClose, projectId, onReload }) => {\r\n\r\n    const initialValue = {\r\n        Name: '',\r\n        Designation_Name: '',\r\n        BranchName: ''\r\n    }\r\n\r\n    const [employees, setEmployees] = useState(initialValue);\r\n    const [loading, setLoading] = useState(true);\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open && projectId) {\r\n            fetchEmployeeDetails();\r\n            fetchDropdownEmployees();\r\n            fetchAssignedEmployees();\r\n        }\r\n    }, [open, projectId]);\r\n\r\n    const CustomPopper = (props) => {\r\n        return <Popper {...props} placement=\"top\" />;\r\n    };\r\n\r\n    const fetchEmployeeDetails = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employee details\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchAssignedEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setSelectedEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch assigned employees\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddEmployeeOpen = () => {\r\n        setAddEmployeeDialogOpen(true);\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n        onClosed()\r\n        setEmployees(initialValue)\r\n    };\r\n\r\n    const handleAddEmployees = async () => {\r\n        if (Number(contextObj?.Add_Rights) === 1) {\r\n            try {\r\n                const response = await fetchLink({\r\n                    address: 'masters/Employeedetails/employeeAdd',\r\n                    method: 'POST',\r\n                    bodyData: {\r\n                        Project_Id: projectId,\r\n                        UserIds: selectedEmployees.map(emp => emp.UserId),\r\n                    },\r\n                });\r\n\r\n                if (response.success) {\r\n                    toast.success(\"Employees added successfully\");\r\n                    setAddEmployeeDialogOpen(false);\r\n                    await fetchEmployeeDetails();\r\n                    await fetchAssignedEmployees();\r\n                    onReload();\r\n                } else {\r\n                    toast.error(\"Failed to add employees\");\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n                toast.error(\"Error adding employees\");\r\n            }\r\n        }\r\n    };\r\n    const onClosed = () => {\r\n\r\n        onClose()\r\n        setEmployees(initialValue);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" marginTop={2} marginInlineStart={2}>\r\n                    <span>Employee Details</span>\r\n                    <button\r\n                        className='btn btn-light'\r\n                        style={{ marginRight: '18px ' }}\r\n                        onClick={onClosed}\r\n                    >\r\n                        Close\r\n                    </button>\r\n                </Box>\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <p>Loading...</p>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Employee Name</TableCell>\r\n                                        <TableCell>Position</TableCell>\r\n                                        <TableCell>Department</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {Array.isArray(employees) && employees.length > 0 ? (\r\n                                        employees.map(user => (\r\n                                            <TableRow key={user.EmployeeId || user.UserId}>\r\n                                                <TableCell>{user.Name || 'N/A'}</TableCell>\r\n                                                <TableCell>{user.Designation_Name || '-'}</TableCell>\r\n                                                <TableCell>{user.BranchName || '-'}</TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={3}>No data available</TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button className='btn btn-primary'\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAddEmployeeOpen}\r\n                        sx={{ mr: 1 }}\r\n                    >\r\n                        Add\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                // onClose={handleAddEmployeeClose}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                    <Autocomplete\r\n                        multiple\r\n                        options={dropdownEmployees}\r\n                        getOptionLabel={(option) => option.Name}\r\n                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                        onChange={(event, value) => {\r\n                            const uniqueValues = value.filter((val, index, self) =>\r\n                                index === self.findIndex((t) => (\r\n                                    t.UserId === val.UserId\r\n                                ))\r\n                            );\r\n                            setSelectedEmployees(uniqueValues);\r\n                        }}\r\n                        PopperComponent={CustomPopper}\r\n                        value={selectedEmployees}\r\n                        onClose={onclose}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} placeholder=\"Employees\" />\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                    <Button onClick={handleAddEmployees} color=\"primary\">Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EmployeeManagementDialog;\r\n","import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport '../../common.css';\r\nimport { CheckBoxOutlineBlank, CheckBox } from '@mui/icons-material';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Checkbox, TextField, Autocomplete } from '@mui/material';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { isValidObject } from '../../../Components/functions';\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst TaskMasterMgt = ({ row, children, openAction, reload, onCloseFun, loadingOn, loadingOff, onTaskAdded }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    \r\n    const initialValue = {\r\n        Task_Id: \"\",\r\n        Task_Name: \"\",\r\n        Task_Desc: \"\",\r\n        Task_Group_Id: \"\",\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id,\r\n        Entry_Date: \"\",\r\n        Update_By: '',\r\n        Update_Date: \"\",\r\n        Task_Parameters: [],\r\n    };\r\n\r\n    const [dialog, setDialog] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [taskGroup, setTaskGroup] = useState([]);\r\n    const [taskParameters, setTaskParameters] = useState([]);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n    const [editDialog, setEditDialog] = useState(false);\r\n    const [editInputValue, setEditInputValue] = useState(initialValue);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const taskResponse = await fetchLink({ address: `taskManagement/tasks/dropdown` });\r\n                if (taskResponse.success) setTaskData(taskResponse.data);\r\n\r\n                const taskGroupResponse = await fetchLink({ address: `masters/taskType/dropDown` });\r\n                if (taskGroupResponse.success) setTaskGroup(taskGroupResponse.data);\r\n\r\n                const taskParametersResponse = await fetchLink({ address: `taskManagement/parameters` });\r\n                if (taskParametersResponse.success) setTaskParameters(taskParametersResponse.data);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setDialog(openAction);\r\n    }, [openAction]);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(row)) {\r\n            setInputValue(prev => ({\r\n                ...prev,\r\n                ...row,\r\n                Task_Group_Id: row.Task_Group_Id || \"\",\r\n            }));\r\n            setIsEdit(true);\r\n        } else {\r\n            setInputValue(initialValue);\r\n            setIsEdit(false);\r\n        }\r\n    }, [row]);\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        if (onCloseFun) onCloseFun();\r\n    };\r\n\r\n    const closeEditDialog = () => {\r\n        setEditDialog(false); \r\n        setEditInputValue(initialValue); \r\n    };\r\n\r\n    const postAndPutTask = async () => {\r\n        const paramArr = inputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...inputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: isEdit ? 'PUT' : 'POST',\r\n                bodyData: PostObj,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                closeDialog();\r\n                if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded();\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    const openEditDialog = () => {\r\n        setEditInputValue({\r\n            ...inputValue,\r\n            Task_Group_Id: inputValue.Type_Task_Id, \r\n        });\r\n\r\n        setEditDialog(true);\r\n    };\r\n\r\n    const handleEditSubmit = async () => {\r\n        const paramArr = editInputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...editInputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: 'PUT',\r\n                bodyData: PostObj,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                closeEditDialog();\r\n                // if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded();\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span onClick={() => setDialog(true)} style={{ cursor: 'pointer' }}>{children}</span>\r\n\r\n            <Dialog open={dialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? 'Edit Task' : 'Add Task'}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    postAndPutTask();\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Name <RequiredStar /></label>\r\n                                <input\r\n                                    maxLength={150}\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Name: e.target.value })}\r\n                                    required\r\n                                    value={inputValue.Task_Name}\r\n                                    placeholder=\"ex: File Checking\"\r\n                                    className=\"cus-inpt\" />\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Group <RequiredStar /></label>\r\n                                <select\r\n                                    value={inputValue.Task_Group_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    required\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Group_Id: e.target.value })}>\r\n                                    <option value=\"\" disabled>- select -</option>\r\n                                    {taskGroup.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Type_Id}>\r\n                                            {o.Task_Type}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Base Task</label>\r\n                                <select\r\n                                    value={inputValue.Under_Task_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Under_Task_Id: e.target.value })}>\r\n                                    <option value={0}>Primary</option>\r\n                                    {taskData.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Id}>\r\n                                            {o.Task_Name}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-12\">\r\n                                <label>Task Description <RequiredStar /></label>\r\n                                <textarea\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValue.Task_Desc}\r\n                                    rows=\"3\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Desc: e.target.value })} />\r\n                            </div>\r\n                            <div className=\"col-md-12 p-2\">\r\n                                <Autocomplete\r\n                                    multiple\r\n                                    id=\"checkboxes-tags-demo\"\r\n                                    options={taskParameters}\r\n                                    disableCloseOnSelect\r\n                                    getOptionLabel={(option) => `${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                    value={inputValue.Task_Parameters || []}\r\n                                    onChange={(event, newValue) => setInputValue({ ...inputValue, Task_Parameters: newValue })}\r\n                                    renderOption={(props, option, { selected }) => (\r\n                                        <li {...props}>\r\n                                            <Checkbox\r\n                                                icon={icon}\r\n                                                checkedIcon={checkedIcon}\r\n                                                style={{ marginRight: 8 }}\r\n                                                checked={selected}\r\n                                            />\r\n                                            {`${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                        </li>\r\n                                    )}\r\n                                    className=\"pt-2\"\r\n                                    isOptionEqualToValue={(opt, val) => Number(opt.Paramet_Id) === Number(val.Paramet_Id)}\r\n                                    renderInput={(params) => (\r\n                                        <TextField {...params} label=\"Task Parameters\" placeholder=\"Choose Task Parameters\" />\r\n                                    )}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValue.Task_Parameters.map((param, index) => (\r\n                                <div key={index} className=\"col-md-4 p-2\">\r\n                                    <label className=\"mb-2\">{param.Paramet_Name}</label>\r\n                                    <input\r\n                                        type={param.Paramet_Data_Type || 'text'}\r\n                                        className=\"cus-inpt\"\r\n                                        onChange={(e) => {\r\n                                            const updatedParams = [...inputValue.Task_Parameters];\r\n                                            updatedParams[index] = {\r\n                                                ...updatedParams[index],\r\n                                                Default_Value: e.target.value,\r\n                                            };\r\n                                            setInputValue({ ...inputValue, Task_Parameters: updatedParams });\r\n                                        }}\r\n                                        value={param.Default_Value}\r\n                                        placeholder=\"Default Value\"\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <button\r\n                            className=\"btn btn-light rounded-5 px-3\"\r\n                            type=\"button\"\r\n                            onClick={closeDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-primary rounded-5 px-3\"\r\n                            type='submit'>\r\n                            Submit\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            {/* Edit Task Dialog */}\r\n            <Dialog open={editDialog} onClose={closeEditDialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Edit Task</DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    handleEditSubmit();\r\n                }}>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            label=\"Task Name\"\r\n                            value={editInputValue.Task_Name}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Name: e.target.value })}\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            label=\"Task Group\"\r\n                            select\r\n                            value={editInputValue.Task_Group_Id}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Group_Id: e.target.value })}\r\n                            fullWidth\r\n                        >\r\n                            <option value=\"\" disabled>- select -</option>\r\n                            {taskGroup.map((o, i) => (\r\n                                <option key={i} value={o.Task_Type_Id}>\r\n                                    {o.Task_Type}\r\n                                </option>\r\n                            ))}\r\n                        </TextField>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button className=\"btn btn-light rounded-5 px-3\" type=\"button\" onClick={closeEditDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button className=\"btn btn-primary rounded-5 px-3\" type='submit'>\r\n                            Save\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskMasterMgt;\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\r\nimport { MyContext } from '../context/contextProvider';\r\nimport { fetchLink } from '../fetchComponent';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\nimport context from 'react-bootstrap/esm/AccordionContext';\r\n\r\nconst TaskAssign = ({ open, onClose, projectId, taskId, reload, editData }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const { contextObj } = useContext(MyContext);\r\n  \r\n    const [usersDropdown, setUsersDropdown] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const assignEmpInitialValue = {\r\n        AN_No: '',\r\n        Project_Id: projectId,\r\n        Sch_Id: taskId,\r\n        Assigned_Emp_Id: parseData?.UserId,\r\n        Emp_Id: '',\r\n        Task_Assign_dt: new Date().toISOString().split('T')[0],\r\n        Sch_Period: '',\r\n        Sch_Time: '',\r\n        EN_Time: '',\r\n        Est_Start_Dt: '',\r\n        Est_End_Dt: '',\r\n        Ord_By: 1,\r\n        Timer_Based: true,\r\n        Invovled_Stat: true,\r\n        EmpGet: '- Select -'\r\n    };\r\n\r\n\r\n    const [assignEmpInpt, setAssignEmpInpt] = useState(assignEmpInitialValue);\r\n\r\n    useEffect(() => {\r\n        const fetchUsersDropdown = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const data = await fetchLink({\r\n                    address: `masters/Employeedetails/getusersproject?Project_Id=${projectId}`\r\n                });\r\n                if (data.success) {\r\n                    setUsersDropdown(data.data || []);\r\n                } else {\r\n                    toast.error(\"Failed to fetch employee dropdown.\");\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                toast.error(\"Error fetching employee dropdown.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n      \r\n           \r\n      \r\n        fetchUsersDropdown();\r\n    }, [projectId, reload]);\r\n\r\n    useEffect(() => {\r\n \r\n        if (editData) {\r\n            setAssignEmpInpt({\r\n                ...assignEmpInitialValue,\r\n                AN_No: editData.AN_No,\r\n                Emp_Id: editData.Emp_Id,\r\n                Sch_Time: editData.Sch_Time,\r\n                EN_Time: editData.EN_Time,\r\n                Est_Start_Dt: editData.Est_Start_Dt.split('T')[0],\r\n                Est_End_Dt: editData.Est_End_Dt.split('T')[0],\r\n                Ord_By: editData.Ord_By,\r\n                Timer_Based: editData.Timer_Based,\r\n                Invovled_Stat: editData.Invovled_Stat,\r\n             EmpGet:editData.EmployeeName\r\n            });\r\n       \r\n        } else {\r\n            setAssignEmpInpt(assignEmpInitialValue);\r\n        }\r\n    }, [editData, usersDropdown]);\r\n\r\n    const calculateSchPeriod = () => {\r\n        const [hours1, minutes1] = assignEmpInpt.Sch_Time.split(':').map(Number);\r\n        const [hours2, minutes2] = assignEmpInpt.EN_Time.split(':').map(Number);\r\n\r\n        const date1 = new Date(0, 0, 0, hours1, minutes1);\r\n        const date2 = new Date(0, 0, 0, hours2, minutes2);\r\n\r\n        if (date2 > date1) {\r\n            let difference = Math.abs(date2 - date1);\r\n            const hours = Math.floor(difference / (1000 * 60 * 60));\r\n            difference %= (1000 * 60 * 60);\r\n            const minutes = Math.floor(difference / (1000 * 60));\r\n            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const schPeriod = calculateSchPeriod();\r\n\r\n        if (assignEmpInpt.Est_End_Dt < assignEmpInpt.Est_Start_Dt) {\r\n            toast.error(\"End date must be greater than start date.\");\r\n            return;\r\n        }\r\n\r\n        setAssignEmpInpt(prev => ({ ...prev, Sch_Period: schPeriod }));\r\n\r\n        try {\r\n            const address = editData ? 'masters/employeedetails/updateTask' : 'masters/employeedetails/assignTask';\r\n            const bodyData = {\r\n                Project_Id: projectId,\r\n                Sch_Id: taskId.Sch_Id,\r\n                Task_Levl_Id: taskId.Task_Levl_Id,\r\n                Task_Id: Number(taskId.Task_Id),\r\n                Assigned_Emp_Id: assignEmpInpt.Assigned_Emp_Id,\r\n                Emp_Id: assignEmpInpt.Emp_Id,\r\n                Sch_Period: schPeriod,\r\n                Sch_Time: assignEmpInpt.Sch_Time,\r\n                EN_Time: assignEmpInpt.EN_Time,\r\n                Est_Start_Dt: assignEmpInpt.Est_Start_Dt,\r\n                Est_End_Dt: assignEmpInpt.Est_End_Dt,\r\n                Ord_By: assignEmpInpt.Ord_By,\r\n                Timer_Based: assignEmpInpt.Timer_Based ? 1 : 0,\r\n                Invovled_Stat: assignEmpInpt.Invovled_Stat ? 1 : 0,\r\n                AN_No: editData ? assignEmpInpt.AN_No : undefined,\r\n            };\r\n\r\n            const response = await fetchLink({\r\n                address,\r\n                method: editData ? 'PUT' : 'POST',\r\n                bodyData,\r\n            });\r\n            if (response.success) {\r\n                toast.success(`Task ${editData ? 'updated' : 'assigned'} successfully!`);\r\n                setAssignEmpInpt(assignEmpInitialValue);\r\n                onClose();\r\n                reload()\r\n            } else {\r\n                toast.error(\"Failed to assign/update task: \" + response.message);\r\n\r\n            }\r\n        } catch (error) {\r\n        \r\n            toast.error(\"Error during task assignment/update: \" + error.message);\r\n        }\r\n    };\r\n\r\n    const onClosed = () => {\r\n        setAssignEmpInpt(assignEmpInitialValue);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} maxWidth=\"sm\">\r\n            <DialogTitle>{editData ? 'Edit Task' : 'Assign Task'}</DialogTitle>\r\n            <form onSubmit={handleSubmit}>\r\n                <DialogContent className=\"table-responsive\">\r\n                    <table className=\"table\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle' }}>Employee</td>\r\n                                <td className=\"border-bottom-0 fa-15\">\r\n                                    <Select\r\n                                        value={{ value: assignEmpInpt.Emp_Id, label: assignEmpInpt.EmpGet }}\r\n                                        onChange={(e) => setAssignEmpInpt({ ...assignEmpInpt, Emp_Id: e.value, EmpGet: e.label })}\r\n                                        options={[{ value: '', label: '- Select -' }, ...usersDropdown.map(obj => ({ value: obj.UserId, label: obj.Name }))]}\r\n                                        styles={customSelectStyles}\r\n                                        required\r\n                                        isSearchable={true}\r\n                                        placeholder=\"Select User\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle' }}>Start Time</td>\r\n                                <td className=\"border-bottom-0 fa-15\">\r\n                                    <input\r\n                                        type='time'\r\n                                        className=\"cus-inpt\"\r\n                                        value={assignEmpInpt.Sch_Time}\r\n                                        required\r\n                                        onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Sch_Time: e.target.value })}\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle' }}>End Time</td>\r\n                                <td className=\"border-bottom-0 fa-15\">\r\n                                    <input\r\n                                        type='time'\r\n                                        className=\"cus-inpt\"\r\n                                        value={assignEmpInpt.EN_Time}\r\n                                        required\r\n                                        min={assignEmpInpt.Sch_Time}\r\n                                        onChange={e => setAssignEmpInpt({ ...assignEmpInpt, EN_Time: e.target.value })}\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle' }}>Est. Start Date</td>\r\n                                <td className=\"border-bottom-0 fa-15\">\r\n                                    <input\r\n                                        type='date'\r\n                                        className=\"cus-inpt\"\r\n                                        value={assignEmpInpt.Est_Start_Dt}\r\n                                        required\r\n                                        onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_Start_Dt: e.target.value })}\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle' }}>Est. End Date</td>\r\n                                <td className=\"border-bottom-0 fa-15\">\r\n                                    <input\r\n                                        type='date'\r\n                                        className=\"cus-inpt\"\r\n                                        value={assignEmpInpt.Est_End_Dt}\r\n                                        required\r\n                                        min={assignEmpInpt.Est_Start_Dt}\r\n                                        onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_End_Dt: e.target.value })}\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n\r\n\r\n                            <tr>\r\n                                <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle' }}>\r\n                                    {editData && (\r\n                                        <div>\r\n                                            <input\r\n                                                className=\"form-check-input shadow-none\"\r\n                                                style={{ padding: '0.7em' }}\r\n                                                type=\"checkbox\"\r\n                                                id=\"Invovled_Stat\"\r\n                                                checked={Boolean(Number(assignEmpInpt?.Invovled_Stat))}\r\n                                                onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Invovled_Stat: e.target.checked })} />\r\n                                            <label className=\"form-check-label p-1 ps-2\" htmlFor=\"involve\">is Involved?</label>\r\n                                        </div>\r\n                                    )}\r\n                                </td>\r\n                                <td className=\"border-bottom-0 fa-15 text-end\">\r\n                                    <div>\r\n                                        <input\r\n                                            className=\"form-check-input shadow-none\"\r\n                                            style={{ padding: '0.7em' }}\r\n                                            type=\"checkbox\"\r\n                                            id=\"timerbased\"\r\n                                            checked={Boolean(Number(assignEmpInpt?.Timer_Based))}\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Timer_Based: e.target.checked })} />\r\n                                        <label className=\"form-check-label p-1 ps-2\" htmlFor=\"timerbased\">Timer Based Task?</label>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </DialogContent>\r\n              {Number(contextObj?.Edit_Rights===1) && ( <DialogActions>\r\n                    <Button onClick={onClosed}>Cancel</Button>\r\n                    <Button type='submit' color=\"primary\">{editData ? 'Update' : 'Assign'}</Button>\r\n                </DialogActions>) }  \r\n            </form>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default TaskAssign;\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    Table,\r\n    TableBody,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    IconButton,\r\n    CircularProgress, // Import CircularProgress for loading spinner\r\n} from '@mui/material';\r\nimport { CalendarMonth, QueryBuilder, Edit } from \"@mui/icons-material\";\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\n\r\nfunction TaskIndividual({ open, onClose, taskDetails, closeDialogTask }) {\r\n    const [selectedTask, setSelectedTask] = useState(null);\r\n    const [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n    const [loading, setLoading] = useState(true); // Loading state to handle loading spinner\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            setSelectedTask(null);\r\n            setLoading(true); // Start loading when the dialog opens\r\n\r\n            // Simulate loading delay (you would replace this with actual data fetching logic)\r\n            setTimeout(() => {\r\n                setLoading(false); // Set loading to false once data is loaded\r\n            }, 500); // Example loading time of 2 seconds\r\n        }\r\n    }, [open]);\r\n\r\n    const handleEditClick = (task) => {\r\n        setSelectedTask(task);\r\n        setAssignDialogOpen(true);\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        if (!dateString) return 'N/A';\r\n\r\n        const date = new Date(dateString);\r\n        if (isNaN(date.getTime())) {\r\n            console.error('Invalid date value:', dateString);\r\n            return 'Invalid Date';\r\n        }\r\n\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const year = date.getFullYear();\r\n\r\n        return `${day}-${month}-${year}`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"lg\">\r\n                <DialogTitle>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <span>Details</span>\r\n                        <button className='btn btn-light' onClick={onClose}>Close</button>\r\n                    </div>\r\n                </DialogTitle>\r\n\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '300px', width: '500px' }}>\r\n                            <CircularProgress /> {/* Single circular spinner in the center */}\r\n                        </div>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"fa-14 text-center\">Employee</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Assigned By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Date</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Time</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Total Hours</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Timer Based</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Involved Status</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Order By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>\r\n                                    {taskDetails.length === 0 ? (\r\n                                        // Display a \"No data found\" message if there are no tasks\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={9} className=\"fa-14 text-center\" style={{ textAlign: 'center' }}>\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ) : (\r\n                                        // Map over taskDetails if available and display rows\r\n                                        taskDetails.map((detail, index) => (\r\n                                            <TableRow key={index}>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.EmployeeName || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.AssignedUser || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <CalendarMonth className=\"fa-18 me-2\" />\r\n                                                        {formatDate(detail.Est_Start_Dt)} - {formatDate(detail.Est_End_Dt)}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <QueryBuilder className=\"fa-18 me-2\" />\r\n                                                        {detail.Sch_Time || 'N/A'} - {detail.EN_Time || 'N/A'}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Sch_Period || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Timer_Based) ? 'bg-success' : 'bg-warning'}`}>\r\n                                                        {Number(detail.Timer_Based) ? \"Yes\" : \"No\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Invovled_Stat) ? 'bg-success' : 'bg-danger'}`}>\r\n                                                        {Number(detail.Invovled_Stat) ? \"IN\" : \"OUT\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Ord_By || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">\r\n                                                    <IconButton size=\"small\" onClick={() => handleEditClick(detail)}>\r\n                                                        <Edit className=\"fa-18\" />\r\n                                                        Edit\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n            {assignDialogOpen &&\r\n                <TaskAssign\r\n                    open={assignDialogOpen}\r\n                    projectId={selectedTask?.Project_Id}\r\n                    taskId={selectedTask}\r\n                    editData={selectedTask}\r\n                    onClose={() => {\r\n                        setAssignDialogOpen(false);\r\n                        onClose();\r\n                    }}\r\n                />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskIndividual;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    IconButton,\r\n    Chip\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport TaskMasterMgt from '../../Pages/Tasks/Components/newaddEditTask';\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\nimport { toast } from 'react-toastify';\r\nimport ViewHeadlineSharpIcon from '@mui/icons-material/ViewHeadlineSharp';\r\nimport { Edit, Delete } from \"@mui/icons-material\";\r\nimport TaskIndividual from './taskIndividual';\r\n\r\nfunction ListingTask({ dialogOpen, setDialogOpen, projectid, reload, onReload }) {\r\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n    const [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n    const [taskAssignOpen, setTaskAssignOpen] = useState(false);\r\n    const [selectedTask, setSelectedTask] = useState(null);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [taskDetails, setTaskDetails] = useState([]);\r\n    const [taskDetailDialog, setTaskDetailsDialog] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [taskToDelete, setTaskToDelete] = useState(null);\r\n\r\n    const initialValue = {\r\n        Task_Id: '',\r\n        Task_Levl_Id: '',\r\n        Type_Task_Id: '',\r\n        Task_Sch_Duaration: '',\r\n        Task_Group_Id: '',\r\n        Task_Start_Time: new Date().toISOString(),\r\n        Task_End_Time: new Date().toISOString(),\r\n        Task_Est_Start_Date: new Date().toISOString(),\r\n        Task_Est_End_Date: new Date().toISOString(),\r\n    };\r\n\r\n    const [taskScheduleInput, setTaskScheduleInput] = useState(initialValue);\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [availableEmployees, setAvailableEmployees] = useState([]);\r\n    const [editEmployeeId, setEditEmployeeId] = useState([]);\r\n    const [editEmployeeTaskId, setEditEmployeeTaskId] = useState(null);\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n    const userData = JSON.parse(localStorage.getItem('user'));\r\n    const entryBy = userData?.UserId;\r\n    const companyId = userData?.Company_id;\r\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n\r\n    const fetchTasks = async () => {\r\n        try {\r\n            const data = await fetchLink({ address: `taskManagement/tasks/dropdown?Company_id=${companyId}` });\r\n            if (data.success) {\r\n                setTasks(data.data);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    const fetchAvailableEmployees = async () => {\r\n        try {\r\n            const data = await fetchLink({ address: `masters/Employeedetails/getusersproject?Project_Id=${projectid}` });\r\n            if (data.success) {\r\n                setAvailableEmployees(data.data);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n    const handleDeleteTask = async (task) => {\r\n        setTaskToDelete(task.Task_Id);\r\n        setDeleteDialogOpen(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTasks();\r\n        fetchAvailableEmployees();\r\n    }, [reload, onReload]);\r\n\r\n    const taskOptions = tasks.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }));\r\n\r\n    const handleTaskChange = async (selectedOption) => {\r\n        setTaskScheduleInput(prev => ({\r\n            ...prev,\r\n            Task_Id: selectedOption.value,\r\n            TasksGet: selectedOption.label\r\n        }));\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks/tasklistsid?Task_Id=${selectedOption.value}`\r\n            });\r\n            if (response.success) {\r\n                const taskDetails = response.data;\r\n                setTaskScheduleInput(prev => ({\r\n                    ...prev,\r\n                    Task_Levl_Id: taskDetails.Task_Levl_Id,\r\n                    Task_Name: taskDetails.Task_Name,\r\n                    Task_Desc: taskDetails.Task_Desc,\r\n                    Task_Group_Id: taskDetails.Task_Group_Id,\r\n                    Task_Sch_Duaration: taskDetails.Task_Sch_Duaration || '',\r\n                    Task_Start_Time: taskDetails.Task_Start_Time || new Date().toISOString(),\r\n                    Task_End_Time: taskDetails.Task_End_Time || new Date().toISOString(),\r\n                    Task_Est_Start_Date: taskDetails.Task_Est_Start_Date || new Date().toISOString(),\r\n                    Task_Est_End_Date: taskDetails.Task_Est_End_Date || new Date().toISOString(),\r\n                }));\r\n            } else {\r\n                toast.error(\"Failed to fetch task details\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(error);\r\n        }\r\n    };\r\n\r\n    const handleAssignTask = async () => {\r\n        if (!taskScheduleInput.Task_Id) {\r\n            toast.error(\"Please select a task before saving.\");\r\n            return;\r\n        }\r\n\r\n        const requestData = {\r\n            entryBy: entryBy,\r\n            Project_Id: projectid,\r\n            Sch_Type_Id: 1,\r\n            Sch_Est_Start_Date: taskScheduleInput.Task_Est_Start_Date,\r\n            Sch_Est_End_Date: taskScheduleInput.Task_Est_End_Date,\r\n            tasks: [taskScheduleInput]\r\n        };\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: 'taskManagement/project/schedule/createNewTaskWithSchedule',\r\n                method: 'POST',\r\n                bodyData: requestData,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(\"Schedule Created Successfully\");\r\n                setAssignDialogOpen(false);\r\n                fetchData();\r\n                onReload();\r\n            } else {\r\n                toast.error(\"Failed to Create Schedule\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(error);\r\n        }\r\n    };\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project/schedule/ListingDetails?Project_Id=${projectid}`\r\n            });\r\n            if (data.success) {\r\n                setTaskData(data.data);\r\n            } else {\r\n                console.error('Failed to fetch task details:', data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error('Error fetching task details:', e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [reload, projectid, onReload]);\r\n\r\n    const handleSelectedTask = async (task) => {\r\n        setSelectedTask(task);\r\n        setTaskAssignOpen(true);\r\n    }\r\n\r\n    const setCloseTask = async () => {\r\n        setDialogOpen(false);\r\n        setTaskScheduleInput(initialValue);\r\n    }\r\n\r\n    const handleviewTaskDetail = async (task) => {\r\n        setTaskDetailsDialog(true);\r\n        console.log(\"projectid\",projectid)\r\n        if (!task.Task_Id || !projectid) {\r\n            toast.error('Task ID and Project ID are required');\r\n            return;\r\n        }\r\n    \r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/employeedetails/assignedTaskDetails?Task_Id=${task.Task_Id}&ProjectId=${projectid}&LevelId=${task.Task_Levl_Id}`\r\n            });\r\n       \r\n            if (data.success) {\r\n                setTaskDetails(data.data);\r\n            } else {\r\n                console.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error('Error fetching task details:', e);\r\n        }\r\n    }\r\n\r\n    const handleEditTask = (task) => {\r\n        setSelectedTask(task);\r\n        setEditDialogOpen(true);\r\n    };\r\n\r\n    const deleteTaskFun = async () => {\r\n        if (!taskToDelete) return;\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `masters/employeedetails/deleteTask?Task_Id=${taskToDelete}`,\r\n                method: 'DELETE',\r\n            });\r\n\r\n\r\n            if (response.success) {\r\n                toast.success(\"Task Deleted Successfully\");\r\n                setDeleteDialogOpen(false);\r\n                fetchData();\r\n                onReload();\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"An error occurred while deleting the task.\");\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleEmployeeEditClick = (employeeId, taskId) => {\r\n        setEditEmployeeId(employeeId);\r\n        setEditEmployeeTaskId(taskId);\r\n    };\r\n\r\n    const handleEmployeeChange = async (newEmployeeId) => {\r\n        if (!editEmployeeTaskId) return;\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: 'masters/employeedetails/assignTask',\r\n                method: 'PUT',\r\n                bodyData: {\r\n\r\n                    Emp_Id: newEmployeeId\r\n                },\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(\"Employee updated successfully\");\r\n                fetchData();\r\n                // setEditEmployeeId(null); \r\n                // setEditEmployeeTaskId(null); \r\n            } else {\r\n                toast.error(\"Failed to update employee assignment: \" + response.message);\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Error occurred while updating employee assignment: \" + error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <Dialog\r\n                open={dialogOpen}\r\n                fullWidth\r\n                maxWidth=\"md\"\r\n                PaperProps={{ style: { height: '75vh' } }}\r\n            >\r\n                <DialogTitle>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <span>Task List</span>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => setAssignDialogOpen(true)}>Assign Task</Button>\r\n                    </div>\r\n                </DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <TableContainer style={{ maxHeight: '50vh' }}>\r\n                        <Table stickyHeader>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Task </TableCell>\r\n                                    <TableCell>Task Type</TableCell>\r\n                                    <TableCell>Status</TableCell>\r\n                                    <TableCell>Estimated Start Date</TableCell>\r\n                                    <TableCell>Estimated End Date</TableCell>\r\n                                    <TableCell>Employees</TableCell>\r\n                                    <TableCell>Assign</TableCell>\r\n                                    <TableCell>Actions</TableCell>\r\n                                    <TableCell>Details</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {taskData.length > 0 ? (\r\n                                    taskData.map(task => (\r\n                                        <TableRow key={task.Task_Id}>\r\n                                            <TableCell>{task.Task_Name || 'N/A'}</TableCell>\r\n                                            <TableCell>{task.Task_Type || '-'}</TableCell>\r\n                                            <TableCell>{task.Status}</TableCell>\r\n                                            <TableCell>\r\n                                                {task.Task_Est_Start_Date\r\n                                                    ? new Date(task.Task_Est_Start_Date).toISOString().slice(0, 10).split('-').reverse().join('-')\r\n                                                    : 'N/A'}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {task.Task_Est_End_Date\r\n                                                    ? new Date(task.Task_Est_End_Date).toISOString().slice(0, 10).split('-').reverse().join('-')\r\n                                                    : 'N/A'}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {Array.isArray(JSON.parse(task.AssignedEmployees)) && JSON.parse(task.AssignedEmployees).length > 0 ? (\r\n                                                    JSON.parse(task.AssignedEmployees).map((employee) => (\r\n                                                        <div key={employee.User_Id} style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                            <Chip\r\n                                                                label={employee.Name}\r\n                                                                variant=\"outlined\"\r\n                                                                size=\"small\"\r\n                                                                sx={{ margin: '2px', color: 'green' }}\r\n                                                            // onClick={() => handleEmployeeEditClick(employee.User_Id, task.Task_Id)}\r\n                                                            />\r\n\r\n                                                        </div>\r\n                                                    ))\r\n                                                ) : (\r\n                                                    <span>No Employees Assigned</span>\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <IconButton onClick={() => handleSelectedTask(task)}>\r\n                                                    <LibraryAddIcon />\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <IconButton onClick={() => handleEditTask(task)}>\r\n                                                    <Edit />\r\n                                                </IconButton>\r\n                                                {/* <IconButton onClick={() => handleDeleteTask(task)}>\r\n                                                    <Delete />\r\n                                                </IconButton> */}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <IconButton onClick={() => handleviewTaskDetail(task)}>\r\n                                                    <ViewHeadlineSharpIcon />\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))\r\n                                ) : (\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={12} className=\"text-center\">No tasks found</TableCell>\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={setCloseTask}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={assignDialogOpen}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n                PaperProps={{ style: { borderRadius: '8px' } }}\r\n            >\r\n                <DialogTitle>Assign Task</DialogTitle>\r\n                <DialogContent>\r\n                    <div style={{ padding: '1px', display: 'flex' }}>\r\n                        <div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n                            <label htmlFor=\"task-select\" style={{ marginRight: '8px' }}>Select Task</label>\r\n                            <select\r\n                                id=\"task-select\"\r\n                                value={taskScheduleInput.Task_Id || ''}\r\n                                className=\"cus-inpt\"\r\n                                required\r\n                                onChange={e => handleTaskChange({ value: e.target.value })}\r\n                                style={{ flex: 1, marginRight: '8px' }}\r\n                            >\r\n                                <option value=\"\" disabled>- select -</option>\r\n                                {taskOptions.map((option, index) => (\r\n                                    <option key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                            <IconButton onClick={() => setIsDialogOpen(true)}>\r\n                                <AddIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <button className='btn btn-light' variant=\"outlined\" onClick={() => setAssignDialogOpen(false)}>Cancel</button>\r\n                    <button className='btn btn-primary' variant=\"contained\" color=\"primary\" onClick={handleAssignTask}>Save</button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <TaskAssign\r\n                open={taskAssignOpen}\r\n                onClose={() => setTaskAssignOpen(false)}\r\n                task={selectedTask}\r\n                projectId={projectid}\r\n                entryBy={entryBy}\r\n                taskId={selectedTask}\r\n                reload={onReload}\r\n            />\r\n\r\n            <TaskMasterMgt\r\n                openAction={isDialogOpen}\r\n                onCloseFun={() => setIsDialogOpen(false)}\r\n                onTaskAdded={fetchTasks}\r\n                Reload={reload}\r\n            />\r\n\r\n            <TaskMasterMgt\r\n                row={selectedTask}\r\n                openAction={editDialogOpen}\r\n                onCloseFun={() => setEditDialogOpen(false)}\r\n                reload={fetchData}\r\n            />\r\n\r\n            <TaskIndividual\r\n                open={taskDetailDialog}\r\n                onClose={() => setTaskDetailsDialog(false)}\r\n                taskDetails={taskDetails}\r\n            />\r\n\r\n\r\n            <Dialog\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle>Confirmation</DialogTitle>\r\n                <DialogContent>\r\n                    Do you want to delete this task?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\r\n                    <Button onClick={deleteTaskFun} color=\"error\">Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListingTask;","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { Edit, Delete, Launch, People } from '@mui/icons-material';\r\nimport { toast } from 'react-toastify';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport ProjectForm from \"../../Components/ProjectList/addEditProject\";\r\nimport EmployeeManagementDialog from \"../../Components/employeeManagement/employeeManagement\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport ListingTask from \"../../Components/taskDetails/listingTask\";\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { margin } from \"@mui/system\";\r\n\r\nconst ActiveProjects = () => {\r\n    const [reload, setReload] = useState(false);\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const [projects, setProjects] = useState([]);\r\n    const [projectAlldata, setProjectAlldata] = useState([]);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [selectedProject, setSelectedProject] = useState(null);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [projectId, setProjectId] = useState(0);\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [projectToDelete, setProjectToDelete] = useState(null);\r\n    const [employeeDialogOpen, setEmployeeDialogOpen] = useState(false);\r\n    const [listingTaskDialogOpen, setListingTaskDialogOpen] = useState(false);\r\n    const [filterInput, setFilterInput] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetchProjects();\r\n        fetchProjectData();\r\n    }, [parseData?.Company_id, reload]);\r\n\r\n    const handleReloadProjects = () => {\r\n        setReload(prev => !prev);\r\n    };\r\n\r\n    const fetchProjects = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project/newProjectAbstract?Company_id=${parseData?.Company_id}`\r\n            });\r\n            if (data.success && Array.isArray(data.data)) {\r\n                setProjects(data.data);\r\n            } else {\r\n                console.error(\"Unexpected data format:\", data);\r\n                setProjects([]);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjects([]);\r\n        }\r\n    };\r\n\r\n    const fetchProjectData = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project?Company_id=${parseData?.Company_id}`\r\n            });\r\n            if (data.success && Array.isArray(data.data)) {\r\n                setProjectAlldata(data.data);\r\n            } else {\r\n                console.error(\"Unexpected data format:\", data);\r\n                setProjectAlldata([]);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjectAlldata([]);\r\n        }\r\n    };\r\n\r\n    const deleteFun = () => {\r\n        if (projectToDelete) {\r\n            fetchLink({\r\n                address: `taskManagement/project`,\r\n                method: 'DELETE',\r\n                bodyData: { Project_Id: projectToDelete?.Project_Id },\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReload(!reload);\r\n                    toast.success(data.message);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }).catch(e => console.error('Fetch Error:', e));\r\n        }\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            name: 'Project',\r\n            selector: row => row.Project_Name,\r\n            sortable: true,\r\n            width: '200px',\r\n        },\r\n        {\r\n            name: 'Head',\r\n            selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Project_Head_Name,\r\n            sortable: true,\r\n            width: '140px'\r\n        },\r\n        {\r\n            name: 'Status',\r\n            selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Status,\r\n            sortable: true,\r\n            width: '120px'\r\n        },\r\n        {\r\n            name: 'End Date',\r\n            selector: row => row.Est_End_Dt ? new Date(row.Est_End_Dt).toLocaleDateString('en-IN') : \"N/A\",\r\n            sortable: true,\r\n            width: '120px'\r\n        },\r\n        {\r\n            name: 'Progress',\r\n            selector: row => `${calcPercentage(row.TasksScheduled, row.CompletedTasks)}%`,\r\n            sortable: true,\r\n            width: '120px'\r\n        },\r\n        {\r\n            name: 'Tasks',\r\n            cell: row => (\r\n                <>\r\n                    <IconButton onClick={() => handleOpenListingTaskDialog(row)}>\r\n                        <Launch />\r\n                    </IconButton>\r\n                    {row.CompletedTasks} / {row.TasksScheduled}\r\n                </>\r\n            ),\r\n            width: '120px'\r\n        },\r\n        {\r\n            name: 'Assigned',\r\n            selector: row => row.TotalTaskAssignments,\r\n            width: '140px'\r\n        },\r\n        {\r\n            name: 'Employees',\r\n            cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEmployeeDialog(row.Project_Id)}>\r\n                            <People />\r\n                        </IconButton>\r\n                    )}\r\n                    {row.EmployeesInvolved}\r\n                </>\r\n            ),\r\n            width: '120px'\r\n        },\r\n        {\r\n            name: 'Actions',\r\n            cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Edit_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEditDialog(row)}><Edit /></IconButton>\r\n                    )}\r\n                </>\r\n            ),\r\n            width: '120px'\r\n        },\r\n    ];\r\n\r\n    const filteredProjects = projects.filter(project => {\r\n        const projectHead = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Project_Head_Name || \"\";\r\n        const status = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Status || \"\";\r\n        return (\r\n            project.Project_Name.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            projectHead.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            status.toLowerCase().includes(filterInput.toLowerCase())\r\n        );\r\n    });\r\n\r\n    const handleOpenCreateDialog = () => {\r\n        setSelectedProject(null);\r\n        setIsEdit(false);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenEditDialog = (project) => {\r\n        setSelectedProject(project);\r\n        setIsEdit(true);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenDeleteDialog = (project) => {\r\n        setProjectToDelete(project);\r\n        setDeleteDialog(true);\r\n    };\r\n\r\n    const handleOpenListingTaskDialog = (project) => {\r\n        setSelectedProject(project);\r\n        setProjectId(project.Project_Id);\r\n        setListingTaskDialogOpen(true);\r\n    };\r\n\r\n    const handleCloseDialogs = () => {\r\n        setDialogOpen(false);\r\n        setListingTaskDialogOpen(false);\r\n        setSelectedProject(null);\r\n        setProjectToDelete(null);\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const handleProjectCreated = () => {\r\n        setReload(prev => !prev);\r\n        handleCloseDialogs();\r\n    };\r\n\r\n    const handleOpenEmployeeDialog = (projectId) => {\r\n        setProjectId(projectId);\r\n        setEmployeeDialogOpen(true);\r\n    };\r\n\r\n    const calcPercentage = (task, completed) => {\r\n        return Number(task) === 0 ? 0 : ((Number(completed) / Number(task)) * 100).toFixed(0);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fw-bold d-flex align-items-center justify-content-between mt-0 \">\r\n                <span style={{marginLeft:'20px'}}>Projects</span>\r\n                <div className=\"mb-1\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                        <SearchIcon style={{ position: 'absolute', left: 15, color: '#aaa' }} />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            onChange={e => setFilterInput(e.target.value)}\r\n                            style={{\r\n                                paddingLeft: 35,\r\n                                marginRight: 10,\r\n                                margin: 10,\r\n                                borderRadius: 4,\r\n                                border: '1px solid black'\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <button onClick={handleOpenCreateDialog} className=\"btn btn-primary fa-13 shadow\">\r\n                            Create Project\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card-body p-0\" style={{ marginTop: '0px', overflow: 'hidden', width: '100%', maxWidth: '1200px', margin: '0 auto' }}>\r\n\r\n                <DataTable\r\n                    columns={columns}\r\n                    data={filteredProjects}\r\n                    pagination\r\n                    highlightOnHover\r\n                    fixedHeader\r\n                    fixedHeaderScrollHeight=\"58vh\"\r\n                    persistTableHead\r\n                    noHeader={false}\r\n                    style={{ width: '50%' }} \r\n                    customStyles={{\r\n                        headCells: {\r\n                            style: {\r\n                                fontSize: '15px',\r\n                                fontWeight: 'bold',\r\n                                padding: '10px',\r\n                                backgroundColor: '#03a9f4',\r\n                            },\r\n                        },\r\n                        cells: {\r\n                            style: {\r\n                                padding: '3px',\r\n                                fontSize: '15px',\r\n                                \r\n                            },\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n\r\n            <ListingTask\r\n                onClose={handleCloseDialogs}\r\n                dialogOpen={listingTaskDialogOpen}\r\n                setDialogOpen={setListingTaskDialogOpen}\r\n                isEdit={false}\r\n                parseData={parseData}\r\n                projectid={projectId}\r\n                onReload={handleReloadProjects}\r\n            />\r\n\r\n            <ProjectForm\r\n                open={dialogOpen}\r\n                onClose={handleCloseDialogs}\r\n                inputValue={selectedProject}\r\n                isEdit={isEdit}\r\n                setReload={handleReloadProjects}\r\n                projectData={projectId}\r\n            />\r\n\r\n            <EmployeeManagementDialog\r\n                open={employeeDialogOpen}\r\n                onClose={() => setEmployeeDialogOpen(false)}\r\n                projectId={projectId}\r\n                onReload={handleReloadProjects}\r\n            />\r\n\r\n            <Dialog\r\n                open={deleteDialog}\r\n                onClose={handleCloseDialogs}\r\n                aria-labelledby=\"delete-dialog-title\"\r\n                aria-describedby=\"delete-dialog-description\">\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Confirmation</DialogTitle>\r\n                <DialogContent className=\"p-4\">\r\n                    Do you want to delete the project\r\n                    <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button className=\"btn btn-light rounded-5 px-3 me-1\" onClick={handleCloseDialogs}>Cancel</button>\r\n                    <button className=\"btn btn-primary rounded-5 px-3\" onClick={deleteFun}>Delete</button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ActiveProjects;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m-1 9h-4v4h-2v-4H9V9h4V5h2v4h4z\"\n}), 'LibraryAdd');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M4 15h16v-2H4zm0 4h16v-2H4zm0-8h16V9H4zm0-6v2h16V5z\"\n}), 'ViewHeadlineSharp');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 4h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m0 16H5V10h14zM9 14H7v-2h2zm4 0h-2v-2h2zm4 0h-2v-2h2zm-8 4H7v-2h2zm4 0h-2v-2h2zm4 0h-2v-2h2z\"\n}), 'CalendarMonth');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2m-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z\"\n}), 'CheckBox');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2\"\n}), 'CheckBoxOutlineBlank');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'Launch');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3m-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3m0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5m8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5\"\n}), 'People');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"\n}, \"1\")], 'QueryBuilder');","\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _utils.createSvgIcon;\n  }\n});\nvar _utils = require(\"@mui/material/utils\");","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '../className';\nimport { createTheme } from '../styles';\nimport THEME_ID from '../styles/identifier';\nimport boxClasses from './boxClasses';\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  themeId: THEME_ID,\n  defaultTheme,\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","import createChainedFunction from '@mui/utils/createChainedFunction';\nexport default createChainedFunction;","import deprecatedPropType from '@mui/utils/deprecatedPropType';\nexport default deprecatedPropType;","export default function deprecatedPropType(validator, reason) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n  return (props, propName, componentName, location, propFullName) => {\n    const componentNameSafe = componentName || '<<anonymous>>';\n    const propFullNameSafe = propFullName || propName;\n    if (typeof props[propName] !== 'undefined') {\n      return new Error(`The ${location} \\`${propFullNameSafe}\\` of ` + `\\`${componentNameSafe}\\` is deprecated. ${reason}`);\n    }\n    return null;\n  };\n}","import requirePropFactory from '@mui/utils/requirePropFactory';\nexport default requirePropFactory;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport default function requirePropFactory(componentNameInError, Component) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n\n  // eslint-disable-next-line react/forbid-foreign-prop-types\n  const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;\n  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {\n    const propFullNameSafe = propFullName || propName;\n    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];\n    if (defaultTypeChecker) {\n      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);\n      if (typeCheckerResult) {\n        return typeCheckerResult;\n      }\n    }\n    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {\n      return new Error(`The prop \\`${propFullNameSafe}\\` of ` + `\\`${componentNameInError}\\` can only be used together with the \\`${requiredProp}\\` prop.`);\n    }\n    return null;\n  };\n  return requireProp;\n}","import setRef from '@mui/utils/setRef';\nexport default setRef;","import unsupportedProp from '@mui/utils/unsupportedProp';\nexport default unsupportedProp;","export default function unsupportedProp(props, propName, componentName, location, propFullName) {\n  if (process.env.NODE_ENV === 'production') {\n    return null;\n  }\n  const propFullNameSafe = propFullName || propName;\n  if (typeof props[propName] !== 'undefined') {\n    return new Error(`The prop \\`${propFullNameSafe}\\` is not supported. Please remove it.`);\n  }\n  return null;\n}","'use client';\n\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/base/ClassNameGenerator';\nexport { default as capitalize } from './capitalize';\nexport { default as createChainedFunction } from './createChainedFunction';\nexport { default as createSvgIcon } from './createSvgIcon';\nexport { default as debounce } from './debounce';\nexport { default as deprecatedPropType } from './deprecatedPropType';\nexport { default as isMuiElement } from './isMuiElement';\nexport { default as ownerDocument } from './ownerDocument';\nexport { default as ownerWindow } from './ownerWindow';\nexport { default as requirePropFactory } from './requirePropFactory';\nexport { default as setRef } from './setRef';\nexport { default as unstable_useEnhancedEffect } from './useEnhancedEffect';\nexport { default as unstable_useId } from './useId';\nexport { default as unsupportedProp } from './unsupportedProp';\nexport { default as useControlled } from './useControlled';\nexport { default as useEventCallback } from './useEventCallback';\nexport { default as useForkRef } from './useForkRef';\nexport { default as useIsFocusVisible } from './useIsFocusVisible';\n// TODO: remove this export once ClassNameGenerator is stable\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_ClassNameGenerator = {\n  configure: generator => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', \"You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead\", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\\n'));\n    }\n    ClassNameGenerator.configure(generator);\n  }\n};","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport styled from '@mui/styled-engine';\nimport styleFunctionSx, { extendSxProp } from './styleFunctionSx';\nimport useTheme from './useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createBox(options = {}) {\n  const {\n    themeId,\n    defaultTheme,\n    defaultClassName = 'MuiBox-root',\n    generateClassName\n  } = options;\n  const BoxRoot = styled('div', {\n    shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'\n  })(styleFunctionSx);\n  const Box = /*#__PURE__*/React.forwardRef(function Box(inProps, ref) {\n    const theme = useTheme(defaultTheme);\n    const _extendSxProp = extendSxProp(inProps),\n      {\n        className,\n        component = 'div'\n      } = _extendSxProp,\n      other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded);\n    return /*#__PURE__*/_jsx(BoxRoot, _extends({\n      as: component,\n      ref: ref,\n      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),\n      theme: themeId ? theme[themeId] || theme : theme\n    }, other));\n  });\n  return Box;\n}"],"names":["RequiredStar","_jsx","style","color","fontWeight","fontSize","children","customTableStyles","table","width","backgroundColor","rows","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_ref","open","onClose","inputValue","isEdit","setReload","localData","localStorage","getItem","parseData","JSON","parse","projectHead","setProjectHead","useState","proStatus","setProStatus","formData","setFormData","Project_Id","Project_Name","Project_Desc","Project_Head","Est_Start_Dt","ISOString","Est_End_Dt","Project_Status","Entry_By","UserId","Company_id","useEffect","fetchLink","concat","then","data","success","catch","e","console","error","log","Proejct_Head","handleChange","target","value","validateFields","requiredFields","field","toast","replace","inputFields","label","elem","type","required","options","map","obj","Name","Status_Id","Status","_Fragment","_jsxs","Dialog","DialogTitle","className","DialogContent","onSubmit","preventDefault","method","bodyData","prev","message","createFun","payload","index","onChange","option","idx","DialogActions","onClick","projectId","onReload","initialValue","Designation_Name","BranchName","employees","setEmployees","loading","setLoading","addEmployeeDialogOpen","setAddEmployeeDialogOpen","dropdownEmployees","setDropdownEmployees","selectedEmployees","setSelectedEmployees","contextObj","useContext","MyContext","fetchEmployeeDetails","fetchDropdownEmployees","fetchAssignedEmployees","async","onClosed","maxWidth","fullWidth","Box","display","justifyContent","alignItems","marginTop","marginInlineStart","marginRight","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Array","isArray","length","user","EmployeeId","colSpan","handleAddEmployeeOpen","sx","mr","Autocomplete","multiple","getOptionLabel","isOptionEqualToValue","event","uniqueValues","filter","val","self","findIndex","t","PopperComponent","props","Popper","placement","onclose","renderInput","params","TextField","placeholder","Button","handleAddEmployeeClose","Number","Add_Rights","UserIds","emp","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","row","openAction","reload","onCloseFun","loadingOn","loadingOff","onTaskAdded","Task_Id","Task_Name","Task_Desc","Task_Group_Id","Entry_Date","Update_By","Update_Date","Task_Parameters","dialog","setDialog","setIsEdit","taskData","setTaskData","taskGroup","setTaskGroup","taskParameters","setTaskParameters","setInputValue","editDialog","setEditDialog","editInputValue","setEditInputValue","taskResponse","taskGroupResponse","taskParametersResponse","fetchData","isValidObject","closeDialog","closeEditDialog","cursor","paramArr","param","Param_Id","Paramet_Id","PostObj","response","postAndPutTask","maxLength","disabled","o","i","Task_Type_Id","Task_Type","Under_Task_Id","disableCloseOnSelect","Paramet_Name","Paramet_Data_Type","newValue","renderOption","_ref2","selected","Checkbox","checked","opt","updatedParams","Default_Value","handleEditSubmit","select","taskId","editData","usersDropdown","setUsersDropdown","assignEmpInitialValue","AN_No","Sch_Id","Assigned_Emp_Id","Emp_Id","Task_Assign_dt","Date","toISOString","split","Sch_Period","Sch_Time","EN_Time","Ord_By","Timer_Based","Invovled_Stat","EmpGet","assignEmpInpt","setAssignEmpInpt","fetchUsersDropdown","EmployeeName","schPeriod","calculateSchPeriod","hours1","minutes1","hours2","minutes2","date1","date2","difference","Math","abs","hours","floor","minutes","String","padStart","Task_Levl_Id","undefined","verticalAlign","Select","styles","isSearchable","min","padding","Boolean","htmlFor","Edit_Rights","taskDetails","closeDialogTask","selectedTask","setSelectedTask","assignDialogOpen","setAssignDialogOpen","setTimeout","formatDate","dateString","date","isNaN","getTime","day","getDate","month","getMonth","year","getFullYear","CircularProgress","textAlign","detail","AssignedUser","CalendarMonth","QueryBuilder","IconButton","size","Edit","TaskAssign","dialogOpen","setDialogOpen","projectid","isDialogOpen","setIsDialogOpen","taskAssignOpen","setTaskAssignOpen","tasks","setTasks","setTaskDetails","taskDetailDialog","setTaskDetailsDialog","taskToDelete","setTaskToDelete","Type_Task_Id","Task_Sch_Duaration","Task_Start_Time","Task_End_Time","Task_Est_Start_Date","Task_Est_End_Date","taskScheduleInput","setTaskScheduleInput","availableEmployees","setAvailableEmployees","editEmployeeId","setEditEmployeeId","editEmployeeTaskId","setEditEmployeeTaskId","deleteDialogOpen","setDeleteDialogOpen","userData","entryBy","companyId","editDialogOpen","setEditDialogOpen","fetchTasks","fetchAvailableEmployees","taskOptions","PaperProps","maxHeight","stickyHeader","task","slice","reverse","join","AssignedEmployees","employee","Chip","margin","User_Id","handleSelectedTask","LibraryAddIcon","handleEditTask","handleviewTaskDetail","ViewHeadlineSharpIcon","borderRadius","flex","selectedOption","TasksGet","handleTaskChange","AddIcon","requestData","Sch_Type_Id","Sch_Est_Start_Date","Sch_Est_End_Date","TaskMasterMgt","Reload","TaskIndividual","ActiveProjects","projects","setProjects","projectAlldata","setProjectAlldata","selectedProject","setSelectedProject","setProjectId","deleteDialog","setDeleteDialog","projectToDelete","setProjectToDelete","employeeDialogOpen","setEmployeeDialogOpen","listingTaskDialogOpen","setListingTaskDialogOpen","filterInput","setFilterInput","fetchProjects","fetchProjectData","handleReloadProjects","columns","selector","sortable","_projectAlldata$find","find","p","Project_Head_Name","_projectAlldata$find2","toLocaleDateString","calcPercentage","TasksScheduled","CompletedTasks","cell","handleOpenListingTaskDialog","Launch","TotalTaskAssignments","handleOpenEmployeeDialog","People","EmployeesInvolved","handleOpenEditDialog","filteredProjects","project","_projectAlldata$find3","_projectAlldata$find4","status","toLowerCase","includes","handleCloseDialogs","completed","toFixed","marginLeft","position","SearchIcon","left","paddingLeft","border","handleOpenCreateDialog","overflow","DataTable","pagination","highlightOnHover","fixedHeader","fixedHeaderScrollHeight","persistTableHead","noHeader","customStyles","cells","ListingTask","ProjectForm","projectData","EmployeeManagementDialog","deleteFun","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d","createSvgIcon","Object","defineProperty","enumerable","get","_utils","generateUtilityClasses","defaultTheme","createTheme","createBox","themeId","THEME_ID","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate","validator","reason","componentNameInError","Component","propName","componentName","location","propFullName","unstable_ClassNameGenerator","configure","generator","_excluded","arguments","BoxRoot","styled","shouldForwardProp","prop","styleFunctionSx","React","inProps","ref","theme","useTheme","_extendSxProp","extendSxProp","component","other","_objectWithoutPropertiesLoose","_extends","as","clsx"],"sourceRoot":""}