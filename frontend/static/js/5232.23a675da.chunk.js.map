{"version":3,"file":"static/js/5232.23a675da.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/dynamicMuiTable.jsx","Pages/Analytics/reportTemplates.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = ''\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: ''\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {title && <h6 className='fw-bold text-muted'>{title}</h6>}\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableMaxHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n\r\n                            {(isExpendable === true && expandableComp) && (\r\n                                <TableCell\r\n                                    className='fa-13 fw-bold border-end border-top text-center'\r\n                                    style={{ backgroundColor: '#EDF0F7' }}\r\n                                >#</TableCell>\r\n                            )}\r\n\r\n                            {EnableSerialNumber === true && (\r\n                                <TableCell\r\n                                    className='fa-13 fw-bold border-end border-top text-center'\r\n                                    style={{ backgroundColor: '#EDF0F7' }}\r\n                                >SNo</TableCell>\r\n                            )}\r\n\r\n                            {columns.map((column, ke) => {\r\n                                return (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)) && (\r\n                                    (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            )}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={\r\n                                                sortCriteria.some(criteria => criteria.columnId === column.Field_Name)\r\n                                                    ? sortCriteria.find(criteria => criteria.columnId === column.Field_Name).direction\r\n                                                    : false\r\n                                            }\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={sortCriteria.some(criteria => criteria.columnId === column.Field_Name)}\r\n                                                direction={\r\n                                                    sortCriteria.some(criteria => criteria.columnId === column.Field_Name)\r\n                                                        ? sortCriteria.find(criteria => criteria.columnId === column.Field_Name).direction\r\n                                                        : 'asc'\r\n                                                }\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader ? column.ColumnHeader : column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${column.ColumnHeader ? 'fa-13 fw-bold border-end border-top' : ' p-0 '}` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            )}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader ? column.ColumnHeader : column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                )\r\n                            })}\r\n\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? dataArray : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.element,\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined\r\n};\r\n\r\n\r\nexport default FilterableTable;","import React from 'react';\r\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\r\nimport { isEqualNumber, LocalDate, NumberFormat } from './functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Box } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, SettingsOutlined } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport { fetchLink } from './fetchComponent';\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return NumberFormat(val)\r\n        case 'date':\r\n            return LocalDate(val);\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst getFun = (dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return {\r\n                filterVariant: 'range',\r\n                filterFn: 'between',\r\n            }\r\n        case 'date':\r\n            return {\r\n                filterVariant: 'text',\r\n            };\r\n        case 'string':\r\n            // const distinctValues = [];\r\n            // dataArray?.forEach(item => (item[key] && (distinctValues.findIndex(o => o?.value === item[key]?.toLocaleLowerCase()) === -1))\r\n            //     ? distinctValues.push({ label: String(item[key]), value: String(item[key]).toLocaleLowerCase() })\r\n            //     : null\r\n            // )\r\n            return {\r\n                filterVariant: 'text',\r\n            }\r\n\r\n        default:\r\n            return {}\r\n    }\r\n}\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DynamicMuiTable = ({ reportId, company, queryFilters, buttons, groupingState }) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [dataArray, setDataArray] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [aggregationValues, setAggregationValues] = useState({});\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        aggregations: false\r\n    });\r\n    console.log(groupingState)\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/template?ReportId=${reportId}`\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                if (data.data[0]) {\r\n\r\n                    const o = data.data[0];\r\n                    const strucre = {\r\n                        Report_Type_Id: o?.Report_Type_Id,\r\n                        reportName: o?.Report_Name,\r\n                        tables: o?.tablesList?.map(table => ({\r\n                            Table_Id: table?.Table_Id,\r\n                            Table_Name: table?.Table_Name,\r\n                            AliasName: table?.AliasName,\r\n                            Table_Accronym: table?.Table_Accronym,\r\n                            isChecked: true,\r\n                            columns: table?.columnsList?.map(column => ({\r\n                                Column_Data_Type: column?.Column_Data_Type,\r\n                                Column_Name: column?.Column_Name,\r\n                                IS_Default: column?.IS_Default,\r\n                                IS_Join_Key: column?.IS_Join_Key,\r\n                                Order_By: column?.Order_By,\r\n                                Table_Id: column?.Table_Id,\r\n                                isVisible: true,\r\n                                accessColumnName: `${table?.Table_Accronym}_${column?.Column_Name}`\r\n                            }))\r\n                        }))\r\n                    }\r\n                    const allColumns = strucre.tables?.reduce((colArr, table) => {\r\n                        return colArr.concat(table.columns);\r\n                    }, []);\r\n                    setColumns(allColumns);\r\n                }\r\n            }\r\n        }).catch(e => console.log(e))\r\n\r\n    }, [reportId])\r\n\r\n    useEffect(() => {\r\n        if (reportId) {\r\n            fetchLink({\r\n                address: `reports/template/executeQuery`,\r\n                method: 'POST',\r\n                headers: {\r\n                    'Db': company,\r\n                },\r\n                bodyData: {\r\n                    filterReq: queryFilters,\r\n                    ReportID: reportId\r\n                }\r\n            }).then(data => {\r\n                if (data?.success) {\r\n                    setDataArray(data?.data);\r\n                }\r\n            }).catch(e => console.log(e))\r\n        }\r\n    }, [company, reportId])\r\n\r\n    useEffect(() => {\r\n        const displayColumns = [...columns].sort((a, b) => (a.Order_By && b.Order_By) ? a.Order_By - b.Order_By : b.Order_By - a.Order_By)\r\n\r\n        const muiColumns = displayColumns.filter(column =>\r\n            !Boolean(Number(column?.IS_Default)) && !Boolean(Number(column?.IS_Join_Key))\r\n        ).map(column => ({\r\n            header: column?.Column_Name?.replace(/_/g, ' '),\r\n            accessorKey: column?.accessColumnName,\r\n            sortable: true,\r\n            size: 150,\r\n            // ...aggregations(column?.Column_Data_Type, column?.Column_Name),\r\n            aggregationFn: aggregationValues[column?.Column_Name] ? aggregationValues[column?.Column_Name] : '',\r\n            AggregatedCell: ({ cell }) => (\r\n                <div className='blue-text text-center float-end w-100'>\r\n                    {cell.getValue() ? NumberFormat(cell.getValue()) : ''}\r\n                </div>\r\n            ),\r\n            Cell: ({ cell }) => (\r\n                <p className={`m-0 text-center fa-14 w-100`}>\r\n                    {formatString(cell.getValue(), column?.Column_Data_Type)}\r\n                </p>\r\n            ),\r\n            ...getFun(column?.Column_Data_Type),\r\n        }))\r\n\r\n        setDispColmn(muiColumns)\r\n    }, [columns, aggregationValues])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleExportRows = (rows) => {\r\n        const rowData = rows.map((row) => row.original);\r\n        const csv = generateCsv(csvConfig)(rowData);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleExportData = () => {\r\n        const csv = generateCsv(csvConfig)(dataArray);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const table = useMaterialReactTable({\r\n        columns: dispColmn,\r\n        data: showData || [],\r\n        enableColumnResizing: true,\r\n        enableGrouping: true,\r\n        enableStickyHeader: true,\r\n        enableStickyFooter: true,\r\n        enableColumnOrdering: true,\r\n        enableRowNumbers: false,\r\n        initialState: {\r\n            density: 'compact',\r\n            // grouping: groupingState?.filter(o => typeof o === 'string')\r\n            // .filter(o => {\r\n            //     const ind = dispColmn.findIndex(indVal => indVal?.accessorKey === o);\r\n            //     return ind !== -1; \r\n            // })\r\n            // ,\r\n            pagination: { pageIndex: 0, pageSize: 100 },\r\n        },\r\n        muiToolbarAlertBannerChipProps: { color: 'primary' },\r\n        muiTableContainerProps: { sx: { maxHeight: '68dvh', minHeight: '46vh' } },\r\n        muiTableProps: {\r\n            sx: {\r\n                caption: {\r\n                    captionSide: 'top',\r\n                },\r\n            },\r\n        },\r\n        muiTableHeadCellProps: {\r\n            sx: {\r\n                fontWeight: 'normal',\r\n            },\r\n            className: ' border text-center'\r\n        },\r\n        muiTableBodyCellProps: {\r\n            className: ' border-end text-center'\r\n        },\r\n        renderTopToolbarCustomActions: ({ table }) => (\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={handleExportData}\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    All Data\r\n                </Button>\r\n                <Button\r\n                    disabled={table.getPrePaginationRowModel().rows.length === 0}\r\n                    onClick={() =>\r\n                        handleExportRows(table.getPrePaginationRowModel().rows)\r\n                    }\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    Filtered Rows\r\n                </Button>\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, aggregations: true }))}\r\n                    startIcon={<SettingsOutlined />}\r\n                >\r\n                    Aggregation\r\n                </Button>\r\n                {/*  */}\r\n                {/* {buttons({grouping: table.getState().grouping})} */}\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className=\"d-md-none d-inline\"\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n        ),\r\n    })\r\n\r\n    const memoizedTableConfig = useMemo(() => table, [table, aggregationValues, showData, groupingState]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of columns) {\r\n            if (filters[column.accessColumnName]) {\r\n                if (filters[column.accessColumnName].type === 'range') {\r\n                    const { min, max } = filters[column.accessColumnName];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.accessColumnName];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.accessColumnName].type === 'date') {\r\n                    const { start, end } = filters[column.accessColumnName].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.accessColumnName]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.accessColumnName])) {\r\n                    filtered = filters[column.accessColumnName]?.length > 0 ? filtered.filter(item => filters[column.accessColumnName].includes(item[column.accessColumnName].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { accessColumnName, Column_Name, Column_Data_Type } = column;\r\n        if (Column_Data_Type === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'range', ...filters[accessColumnName], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'range', ...filters[accessColumnName], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'date', value: { ...filters[accessColumnName]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'date', value: { ...filters[accessColumnName]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[accessColumnName]?.toLowerCase()?.trim()))].sort();\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${accessColumnName}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[accessColumnName] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(accessColumnName, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Column_Name?.replace(/_/g, ' ')}\r\n                            placeholder={`Select ${Column_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row \">\r\n\r\n                <div className=\"col-xxl-10 col-lg-9 col-md-8\">\r\n                    <div className=\"p-2\">\r\n                        <MaterialReactTable table={memoizedTableConfig} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        Filters\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {columns.map((column, ke) => (isEqualNumber(column?.IS_Default, 0) && isEqualNumber(column?.IS_Join_Key, 0)) && (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        Filters\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </h5>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {columns.map((column, ke) => (isEqualNumber(column?.IS_Default, 0) && isEqualNumber(column?.IS_Join_Key, 0)) && (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.aggregations}\r\n                onClose={() => setDialogs(pre => ({ ...pre, aggregations: false }))}\r\n                fullWidth maxWidth='lg'\r\n            >\r\n                <DialogTitle>Aggregations</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\" style={{ minHeight: '30dvh' }}>\r\n                        {[...columns].filter(column => (\r\n                            isEqualNumber(column?.IS_Default, 0)\r\n                            && isEqualNumber(column?.IS_Join_Key, 0)\r\n                            && (column.Column_Data_Type === 'number'\r\n                                || column.Column_Data_Type === 'string')\r\n                        )).map((o, i) => (\r\n                            <div className=\"col-xxl-3 col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <label>{o?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                <select\r\n                                    className='cus-inpt'\r\n                                    value={aggregationValues[o?.Column_Name] ?? ''}\r\n                                    onChange={e => setAggregationValues(pre => ({ ...pre, [o.Column_Name]: e.target.value }))}\r\n                                >\r\n                                    {\r\n                                        [\r\n                                            { label: 'Select Aggregation', value: '' },\r\n                                            { label: 'count', value: 'count' },\r\n                                            { label: 'extent', value: 'extent' },\r\n                                            { label: 'max', value: 'max' },\r\n                                            { label: 'min', value: 'min' },\r\n                                            { label: 'mean', value: 'mean' },\r\n                                            { label: 'median', value: 'median' },\r\n                                            { label: 'uniqueCount', value: 'uniqueCount' },\r\n                                            { label: 'sum', value: 'sum' },\r\n                                            { label: 'unique', value: 'unique' },\r\n                                        ].map((o, i) => (\r\n                                            <option value={o.value} key={i}>{o.label}</option>\r\n                                        ))\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, aggregations: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DynamicMuiTable;","import React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n    Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tab, Tabs, Box, Typography,\r\n    ListItemIcon, ListItemText, MenuItem, MenuList, Popover, \r\n} from '@mui/material';\r\nimport { ArrowBackIosNewOutlined, Edit, Visibility, List, Delete, FilterAlt, Launch, Close } from '@mui/icons-material';\r\nimport { isEqualNumber, UTCDateWithTime } from '../../Components/functions';\r\nimport { MyContext } from '../../Components/context/contextProvider';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport DynamicMuiTable from '../../Components/dynamicMuiTable';\r\nimport { toast } from 'react-toastify';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport FilterableTable from '../../Components/filterableTable2'\r\n\r\n\r\n\r\nconst TabPanel = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`tabpanel-${index}`}\r\n            aria-labelledby={`tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ReportTemplates = () => {\r\n    const storage = JSON.parse(localStorage.getItem('user'))\r\n    const [templates, setTemplates] = useState([]);\r\n    const variableState = {\r\n        search: '',\r\n        openFilterDialog: false,\r\n        filterTablesAndColumns: {},\r\n        deleteConfirmationDialog: false,\r\n        preFilterDialog: false,\r\n    }\r\n    const [localVariable, setLocalVariable] = useState(variableState);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [filters, setFilters] = useState({})\r\n    const nav = useNavigate();\r\n    const [reload, setReload] = useState(false)\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/template`,\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                setTemplates(data?.data);\r\n            }\r\n        }).catch(e => console.log(e))\r\n    }, [reload])\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Column_Name, Column_Data_Type } = column;\r\n        if (Column_Data_Type === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"cus-inpt me-1\"\r\n                        value={filters[Column_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'range',\r\n                            ...filters[Column_Name],\r\n                            min: e.target.value ? parseFloat(e.target.value) : undefined\r\n                        })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"cus-inpt ms-1\"\r\n                        value={filters[Column_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'range',\r\n                            ...filters[Column_Name],\r\n                            max: e.target.value ? parseFloat(e.target.value) : undefined\r\n                        })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between flex-wrap'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"cus-inpt w-auto flex-grow-1 me-1 my-1\"\r\n                        value={filters[Column_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'date',\r\n                            value: { ...filters[Column_Name]?.value, start: e.target.value || undefined }\r\n                        })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"cus-inpt w-auto flex-grow-1 ms-1 my-1\"\r\n                        value={filters[Column_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Column_Name, {\r\n                            type: 'date',\r\n                            value: { ...filters[Column_Name]?.value, end: e.target.value || undefined }\r\n                        })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'string') {\r\n            return (\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder='Search...'\r\n                    className='cus-inpt'\r\n                    value={filters[Column_Name]?.value ?? ''}\r\n                    onChange={e => handleFilterChange(Column_Name, {\r\n                        type: 'textCompare',\r\n                        value: String(e.target.value).toLowerCase() || ''\r\n                    })}\r\n                />\r\n            )\r\n        }\r\n    };\r\n\r\n    const Actions = ({ o }) => {\r\n        const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n        const dataToForward = {\r\n            Report_Type_Id: o?.Report_Type_Id,\r\n            reportName: o?.Report_Name,\r\n            ReportState: o?.ReportState,\r\n            tables: o?.tablesList?.map(table => ({\r\n                Table_Id: table?.Table_Id,\r\n                Table_Name: table?.Table_Name,\r\n                AliasName: table?.AliasName,\r\n                Table_Accronym: table?.Table_Accronym,\r\n                isChecked: true,\r\n                columns: table?.columnsList?.map(column => ({\r\n                    Column_Data_Type: column?.Column_Data_Type,\r\n                    Column_Name: column?.Column_Name,\r\n                    IS_Default: column?.IS_Default,\r\n                    IS_Join_Key: column?.IS_Join_Key,\r\n                    Order_By: column?.Order_By,\r\n                    Table_Id: column?.Table_Id,\r\n                    isVisible: true\r\n                }))\r\n            }))\r\n        }\r\n\r\n        const popOverOpen = Boolean(anchorEl);\r\n        const id = popOverOpen ? o?.Report_Name : undefined;\r\n\r\n        const handleClick = (event) => {\r\n            setAnchorEl(event.currentTarget);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setAnchorEl(null);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <IconButton aria-describedby={id} onClick={handleClick}>\r\n                    <List />\r\n                </IconButton>\r\n\r\n                <Popover\r\n                    id={id}\r\n                    open={popOverOpen}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                >\r\n                    <MenuList>\r\n\r\n                        <MenuItem\r\n                            onClick={\r\n                                () => {\r\n                                    setLocalVariable(pre => ({\r\n                                        ...pre,\r\n                                        filterTablesAndColumns: dataToForward,\r\n                                        openFilterDialog: true,\r\n                                    }));\r\n                                    setSelectedTab(0);\r\n                                    setFilters({})\r\n                                }\r\n                            }\r\n                        >\r\n                            <ListItemIcon><Visibility fontSize=\"small\" /></ListItemIcon>\r\n                            <ListItemText>OPEN</ListItemText>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem\r\n                            onClick={\r\n                                !storage?.Company_id\r\n                                    ? () => toast.warn('Select Company!')\r\n                                    : () => {\r\n                                        setLocalVariable(pre => ({\r\n                                            ...pre,\r\n                                            filterTablesAndColumns: dataToForward,\r\n                                            preFilterDialog: true,\r\n                                        }));\r\n                                        setFilters({});\r\n                                        setSelectedTab(0);\r\n                                    }\r\n                            }\r\n                        >\r\n                            <ListItemIcon><FilterAlt fontSize=\"small\" /></ListItemIcon>\r\n                            <ListItemText>FILTERS</ListItemText>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem\r\n                            onClick={() => nav('create', { state: { ReportState: dataToForward } })}\r\n                        >\r\n                            <ListItemIcon><Edit fontSize=\"small\" /></ListItemIcon>\r\n                            <ListItemText>EDIT</ListItemText>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem\r\n                            onClick={() => setLocalVariable(pre => ({ ...pre, deleteConfirmationDialog: true, filterTablesAndColumns: dataToForward }))}\r\n                        >\r\n                            <ListItemIcon><Delete fontSize=\"small\" color='error' /></ListItemIcon>\r\n                            <ListItemText>DELETE</ListItemText>\r\n                        </MenuItem>\r\n\r\n                    </MenuList>\r\n                </Popover>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const RowComp = ({ o }) => {\r\n        return (\r\n            <>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                {['SNo', 'Table', 'Column', 'Data-Type', 'Order'].map(o => (\r\n                                    <th className=\"border fa-14 text-center\" key={o} style={{ backgroundColor: '#EDF0F7' }}>{o}</th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {o?.tablesList?.map((table, tableInd) => (\r\n                                <React.Fragment key={tableInd}>\r\n                                    {table?.columnsList?.map((column, columnInd) => (\r\n                                        <tr key={columnInd}>\r\n                                            {columnInd === 0 && (\r\n                                                <>\r\n                                                    <td className=\"border fa-13 text-center vctr\" rowSpan={table?.columnsList?.length}>{tableInd + 1}</td>\r\n                                                    <td className=\"border fa-13 text-center blue-text vctr\" rowSpan={table?.columnsList?.length}>\r\n                                                        {table?.AliasName}\r\n                                                    </td>\r\n                                                </>\r\n                                            )}\r\n                                            <td\r\n                                                className={`\r\n                                                                border fa-13 vctr\r\n                                                                ${Boolean(Number(column?.IS_Default)) ? ' blue-text ' : ''}\r\n                                                                ${Boolean(Number(column?.IS_Join_Key)) ? ' fw-bold ' : ''}\r\n                                                                `}\r\n                                            >\r\n                                                {column?.Column_Name}\r\n                                            </td>\r\n                                            <td className=\"border fa-13 vctr\">{column?.Column_Data_Type}</td>\r\n                                            <td className=\"border fa-13 vctr\">{column?.Order_By}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </React.Fragment>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setLocalVariable(pre => ({ ...pre, openFilterDialog: false, filterTablesAndColumns: {} }))\r\n    }\r\n\r\n    const closeDeleteConfirmationDialog = () => {\r\n        setLocalVariable(pre => ({ ...pre, deleteConfirmationDialog: false, filterTablesAndColumns: {} }))\r\n    }\r\n\r\n    const closeFilterDialog = () => {\r\n        setLocalVariable(pre => ({ ...pre, preFilterDialog: false }));\r\n        setFilters({})\r\n    }\r\n\r\n    const deleteTemplate = () => {\r\n        setLocalVariable(pre => ({ ...pre, deleteConfirmationDialog: false }))\r\n        fetchLink({\r\n            address: `reports/template`,\r\n            method: 'DELETE',\r\n            bodyData: {\r\n                Report_Type_Id: localVariable?.filterTablesAndColumns?.Report_Type_Id\r\n            }\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                toast.success(data.message)\r\n                setReload(pre => !pre)\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.log(e))\r\n            .finally(() => setLocalVariable(pre => ({ ...pre, filterTablesAndColumns: {} })))\r\n    }\r\n\r\n    const saveReportGroupingState = (reportid, grouping) => {\r\n        fetchLink({\r\n            address: `reports/template/templateState`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                Report_Type_Id: reportid,\r\n                ReportState: grouping\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Card>\r\n\r\n                <div className=\"p-2 border-bottom fa-16 fw-bold d-flex justify-content-between align-items-center\">\r\n                    <span className=\"text-primary text-uppercase ps-3\">Report Templates</span>\r\n                    {isEqualNumber(contextObj?.Add_Rights, 1) && (\r\n                        <Button variant='outlined' onClick={() => nav('create')}>Add Report</Button>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"d-flex justify-content-end p-3\">\r\n                    <input\r\n                        type=\"search\"\r\n                        className='cus-inpt w-auto'\r\n                        placeholder='Search Report Name'\r\n                        value={localVariable?.search ?? ''}\r\n                        onChange={e => setLocalVariable(pre => ({ ...pre, search: String(e.target.value).toLowerCase() }))}\r\n                    />\r\n                </div>\r\n\r\n                <CardContent className='p-0'>\r\n                    <FilterableTable\r\n                        dataArray={\r\n                            !localVariable?.search ? templates : (\r\n                                [...templates].filter(fil =>\r\n                                    String(fil?.Report_Name).toLowerCase().includes(localVariable.search)\r\n                                )\r\n                            )\r\n                        }\r\n                        columns={[\r\n                            { Field_Name: 'Report_Name', ColumnHeader: 'Report Name', Fied_Data: 'string', isVisible: 1 },\r\n                            { ColumnHeader: 'Tables', isVisible: 1, isCustomCell: true, Cell: ({ row }) => row?.tablesList?.length },\r\n                            { ColumnHeader: 'Columns', isVisible: 1, isCustomCell: true, Cell: ({ row }) => row?.tablesList?.reduce((sum, item) => sum += Number(item?.columnsList?.length), 0) },\r\n                            { Field_Name: 'CreatedByGet', ColumnHeader: 'Created By', Fied_Data: 'string', isVisible: 1, },\r\n                            { ColumnHeader: 'Columns', isVisible: 1, isCustomCell: true, Cell: ({ row }) => row?.CreatedAt ? UTCDateWithTime(row?.CreatedAt) : ' - ' },\r\n                            { ColumnHeader: 'Action', isVisible: 1, isCustomCell: true, Cell: ({ row }) => <Actions o={row} /> },\r\n                        ]}\r\n                        EnableSerialNumber\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => <RowComp o={row} />}\r\n                        tableMaxHeight={650}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={localVariable?.openFilterDialog}\r\n                onClose={closeDialog}\r\n                fullScreen\r\n            >\r\n                <DialogTitle className='d-flex justify-content-between align-items-center fa-16'>\r\n                    <span>\r\n                        Report - <span className=\"blue-text\">{localVariable?.filterTablesAndColumns?.reportName}</span>\r\n                    </span>\r\n                    <span>\r\n                        <IconButton onClick={closeDialog} color='error' className=' shadow-lg'>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {(localVariable?.filterTablesAndColumns?.Report_Type_Id && storage?.Company_id) && (\r\n                        <DynamicMuiTable\r\n                            reportId={localVariable?.filterTablesAndColumns?.Report_Type_Id}\r\n                            company={storage?.Company_id}\r\n                            queryFilters={filters}\r\n                            // buttons={({ grouping }) => (\r\n                            //     <Button\r\n                            //         onClick={() => saveReportGroupingState(localVariable?.filterTablesAndColumns?.Report_Type_Id, grouping)}\r\n                            //         disabled={grouping.length === 0}\r\n                            //         startIcon={<Save />}\r\n                            //     >\r\n                            //         Save State\r\n                            //     </Button>\r\n                            // )}\r\n                            // groupingState={\r\n                            //     localVariable?.filterTablesAndColumns?.ReportState \r\n                            //         ? JSON.parse(localVariable?.filterTablesAndColumns?.ReportState)\r\n                            //         : []\r\n                            // }\r\n                        />\r\n                    )}\r\n                    {/* {console.log(localVariable)} */}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={closeDialog}\r\n                        startIcon={<ArrowBackIosNewOutlined />}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={localVariable?.deleteConfirmationDialog}\r\n                onClose={closeDeleteConfirmationDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Confirmation</DialogTitle>\r\n                <DialogContent>\r\n                    Do you want to delete the Template <span className='blue-text'>{localVariable?.filterTablesAndColumns?.reportName}</span> permanently\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={closeDeleteConfirmationDialog}\r\n                    >\r\n                        cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={deleteTemplate}\r\n                        startIcon={<Delete />}\r\n                        variant='outlined'\r\n                        color='error'\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={localVariable?.preFilterDialog}\r\n                onClose={closeFilterDialog}\r\n                fullWidth maxWidth='md'\r\n            >\r\n                <DialogTitle className='d-flex justify-content-between'>\r\n                    <span>\r\n                        Filters For <span className=\"blue-text\">{localVariable?.filterTablesAndColumns?.reportName}</span> - Report\r\n                    </span>\r\n                    <span>\r\n                        <IconButton onClick={closeFilterDialog} color='error' className='shadow-lg '>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Tabs value={selectedTab} onChange={handleTabChange}>\r\n                        {localVariable?.filterTablesAndColumns?.tables?.map((table, i) => (\r\n                            <Tab label={table?.AliasName} key={i} />\r\n                        ))}\r\n                    </Tabs>\r\n                    {localVariable?.filterTablesAndColumns?.tables?.map((table, i) => (\r\n                        <TabPanel value={selectedTab} index={i} key={i}>\r\n                            <div className=\"row\">\r\n                                {table?.columns?.map((column, ii) => (\r\n                                    !Boolean(Number(column?.IS_Default)) &&\r\n                                    !Boolean(Number(column?.IS_Join_Key)) &&\r\n                                    (\r\n                                        <div className=\"p-2 col-md-6 \" key={ii}>\r\n                                            <label className='mb-2 fw-bold text-muted'>{column?.Column_Name}</label>\r\n                                            {renderFilter(column)}\r\n                                        </div>\r\n                                    )\r\n                                ))}\r\n                            </div>\r\n                        </TabPanel>\r\n                    ))}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={closeFilterDialog}\r\n                    >\r\n                        cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => setLocalVariable(pre => ({ ...pre, openFilterDialog: true, preFilterDialog: false }))}\r\n                        startIcon={<Launch />}\r\n                        variant='contained'\r\n                    >\r\n                        Open report\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportTemplates"],"names":["FilterableTable","_ref","dataArray","columns","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","columnAlign","type","class","sortedData","data","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","row","index","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","map","column","columnInd","_columnAlign$find2","isEqualNumber","Defult_Display","isVisible","Boolean","isCustomCell","Cell","align","find","String","toLowerCase","Field_Name","Object","entries","_ref3","_columnAlign$find","key","value","console","log","Fied_Data","colSpan","Number","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","style","backgroundColor","ke","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","concat","ColumnHeader","replace","sortDirection","some","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","getFun","filterVariant","filterFn","csvConfig","mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","reportId","company","queryFilters","buttons","groupingState","dispColmn","setDispColmn","setDataArray","setColumns","filters","setFilters","filteredData","setFilteredData","showData","keys","aggregationValues","setAggregationValues","dialogs","setDialogs","aggregations","useEffect","fetchLink","address","then","success","_o$tablesList","_strucre$tables","o","strucre","Report_Type_Id","reportName","Report_Name","tables","tablesList","table","_table$columnsList","Table_Id","Table_Name","AliasName","Table_Accronym","isChecked","columnsList","Column_Data_Type","Column_Name","IS_Default","IS_Join_Key","Order_By","accessColumnName","allColumns","reduce","colArr","catch","e","method","headers","bodyData","filterReq","ReportID","muiColumns","filter","_column$Column_Name","header","accessorKey","sortable","aggregationFn","AggregatedCell","cell","getValue","applyFilters","handleExportData","csv","generateCsv","download","useMaterialReactTable","enableColumnResizing","enableGrouping","enableStickyHeader","enableStickyFooter","enableColumnOrdering","enableRowNumbers","initialState","density","pagination","pageIndex","pageSize","muiToolbarAlertBannerChipProps","color","muiTableContainerProps","minHeight","muiTableProps","caption","captionSide","muiTableHeadCellProps","fontWeight","muiTableBodyCellProps","renderTopToolbarCustomActions","_ref4","Box","display","gap","padding","flexWrap","Button","startIcon","FileDownload","disabled","getPrePaginationRowModel","rows","rowData","original","handleExportRows","SettingsOutlined","FilterAlt","memoizedTableConfig","useMemo","handleFilterChange","prevFilters","filtered","min","max","item","start","end","dateValue","Date","isArray","_filters$column$acces","includes","trim","renderFilter","_filters$accessColumn","_filters$accessColumn2","_filters$accessColumn3","_filters$accessColumn4","_filters$accessColumn5","_filters$accessColumn6","_filters$accessColumn7","_filters$accessColumn9","_filters$accessColumn10","_filters$accessColumn11","placeholder","onChange","parseFloat","_filters$accessColumn8","_filters$accessColumn12","distinctValues","_item$accessColumnNam","_item$accessColumnNam2","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","_ref5","selected","Checkbox","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","_Fragment","MaterialReactTable","Tooltip","FilterAltOff","overflow","_column$Column_Name2","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","_column$Column_Name3","DialogActions","i","_o$Column_Name","_aggregationValues$o$","TabPanel","other","role","hidden","p","Typography","ReportTemplates","_localVariable$search","_localVariable$filter2","_localVariable$filter3","_localVariable$filter4","_localVariable$filter5","_localVariable$filter6","_localVariable$filter7","_localVariable$filter8","_localVariable$filter9","_localVariable$filter10","storage","JSON","parse","localStorage","getItem","templates","setTemplates","localVariable","setLocalVariable","search","openFilterDialog","filterTablesAndColumns","deleteConfirmationDialog","preFilterDialog","contextObj","useContext","MyContext","nav","useNavigate","reload","setReload","selectedTab","setSelectedTab","_filters$Column_Name$","_filters$Column_Name","_filters$Column_Name$2","_filters$Column_Name2","_filters$Column_Name$3","_filters$Column_Name3","_filters$Column_Name4","_filters$Column_Name$4","_filters$Column_Name6","_filters$Column_Name7","_filters$Column_Name$5","_filters$Column_Name9","_filters$Column_Name5","_filters$Column_Name8","Actions","anchorEl","setAnchorEl","dataToForward","ReportState","popOverOpen","currentTarget","List","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","MenuItem","ListItemIcon","Visibility","ListItemText","Company_id","toast","warn","state","Edit","Delete","_o$tablesList2","tableInd","_table$columnsList2","React","_table$columnsList3","_table$columnsList4","rowSpan","closeDialog","closeDeleteConfirmationDialog","closeFilterDialog","Card","Add_Rights","variant","CardContent","fil","_row$tablesList","_row$tablesList2","sum","_item$columnsList","CreatedAt","UTCDateWithTime","_ref6","_ref7","fullScreen","Close","DynamicMuiTable","ArrowBackIosNewOutlined","deleteTemplate","_localVariable$filter","message","error","finally","Tabs","handleTabChange","Tab","_table$columns","ii","Launch"],"sourceRoot":""}