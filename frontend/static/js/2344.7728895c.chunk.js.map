{"version":3,"file":"static/js/2344.7728895c.chunk.js","mappings":"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","sources":["Pages/Analytics/reportTemplateCreation.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { Card, CardContent, Tab, Switch, Button, Tooltip, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\nimport { ArrowBackIosNewOutlined, KeyboardArrowLeft, RemoveRedEyeOutlined, Save } from '@mui/icons-material'\nimport { TabPanel, TabList, TabContext } from '@mui/lab';\nimport { Box } from '@mui/system';\nimport { isEqualNumber, isValidObject, Subraction } from '../../Components/functions';\nimport { toast } from 'react-toastify'\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { MyContext } from '../../Components/context/contextProvider';\nimport { fetchLink } from '../../Components/fetchComponent';\n\n\nconst ReportTemplateCreation = () => {\n    const storage = JSON.parse(localStorage.getItem('user'));\n    const nav = useNavigate();\n    const { contextObj } = useContext(MyContext);\n    const locationState = useLocation().state;\n    const initialValue = {\n        Report_Type_Id: '',\n        reportName: '',\n        tables: [],\n        tableJoins: [],\n        currentTab: 'tbl_Q_Pay_Summarry',\n        previewDialog: false,\n        createdBy: storage.UserId\n    };\n    const [inputValues, setInputValues] = useState(initialValue);\n    const [reportTables, setReportTables] = useState([]);\n    const tablesSelected = inputValues?.tables?.reduce((sum, obj) => sum += Boolean(Number(obj?.isChecked)) ? 1 : 0, 0)\n    const columnsSelected = inputValues?.tables?.reduce((sum, item) => (\n        sum += Boolean(Number(item?.isChecked)) ? item?.columns?.reduce((colSum, colItem) => (\n            colSum += isEqualNumber(colItem?.isVisible, 1) ? 1 : 0\n        ), 0) : 0\n    ), 0)\n\n    const displaySelectedState = (\n        <span className=\"p-2 mt-3 border rounded-3 d-inline-block w-auto\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td className=' border-end'>Tables Selected</td>\n                        <td className='px-2 blue-text'>{tablesSelected}</td>\n                    </tr>\n                    <tr>\n                        <td className=' border-end'>Columns Selected&emsp;&emsp;</td>\n                        <td className='px-2 blue-text'>{columnsSelected}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </span>\n    )\n\n    useEffect(() => {\n        const stateValue = locationState?.ReportState;\n        if (isValidObject(stateValue)) {\n            setInputValues(pre => ({\n                ...pre,\n                Report_Type_Id: stateValue?.Report_Type_Id ?? '',\n                reportName: stateValue?.reportName ?? '',\n                tables: stateValue?.tables ?? [],\n                createdBy: stateValue?.createdBy ?? storage?.UserId\n            }))\n        }\n    }, [])\n\n    useEffect(() => {\n        fetchLink({\n            address: `reports/tablesAndColumns`\n        }).then(data => {\n            if (data?.success) {\n                setReportTables(data?.data);\n            }\n        }).catch(e => console.log(e))   \n    }, []);\n\n    const handleTableCheck = (tableName, checked, aliasName) => {\n        setInputValues(prev => {\n            const updatedTables = [...prev.tables];\n            const tableIndex = updatedTables.findIndex(table => table.Table_Name === tableName);\n\n            const arraywithDefaultColumn = [];\n            const repTableIndex = reportTables?.findIndex(table => table.Table_Name === tableName);\n            const defaultColumnIndex = reportTables[repTableIndex]?.Columns?.findIndex(column => isEqualNumber(column?.IS_Default, 1));\n            const defaultColumn = defaultColumnIndex !== -1 ? reportTables[repTableIndex]?.Columns[defaultColumnIndex] : {};\n\n            if (defaultColumnIndex !== -1) {\n                defaultColumn.Order_By = '';\n                defaultColumn.isVisible = true;\n            }\n\n            arraywithDefaultColumn.push(defaultColumn)\n\n\n            if (tableIndex !== -1) {\n                updatedTables[tableIndex].isChecked = checked;\n                if (!checked) {\n                    updatedTables[tableIndex].columns = [];\n                } else {\n                    updatedTables[tableIndex].columns = arraywithDefaultColumn;\n                }\n            } else {\n                updatedTables.push({\n                    Table_Id: reportTables?.find(table => table?.Table_Name === tableName)?.Table_Id || '',\n                    Table_Name: tableName,\n                    AliasName: aliasName,\n                    isChecked: checked,\n                    columns: arraywithDefaultColumn,\n                });\n            }\n            return { ...prev, tables: updatedTables.filter(table => Boolean(Number(table?.isChecked))) };\n\n        });\n    };\n\n    const handleColumnCheck = (tableName, columnDetails, checked) => {\n        setInputValues(prev => {\n            const updatedTables = [...prev.tables];\n            const tableIndex = updatedTables.findIndex(table => table.Table_Name === tableName);\n\n            if (tableIndex !== -1) {\n                const columns = updatedTables[tableIndex].columns || [];\n                const columnNameIndex = columns?.findIndex(obj => obj?.Column_Name === columnDetails?.Column_Name);\n\n                if (columnNameIndex !== -1) {\n                    columns[columnNameIndex].isVisible = checked ? 1 : 0;\n                } else {\n                    columns.push({\n                        ...columnDetails,\n                        Order_By: '',\n                        isVisible: checked ? 1 : 0\n                    });\n                }\n                updatedTables[tableIndex].columns = columns?.filter(fil => isEqualNumber(fil?.isVisible, 1));\n            }\n\n            return { ...prev, tables: updatedTables };\n        });\n    };\n\n    const handleOrderByChange = (tableName, columnDetails, value) => {\n        setInputValues(prev => {\n            const updatedTables = [...prev.tables];\n            const tableIndex = updatedTables.findIndex(table => table.Table_Name === tableName);\n\n            if (tableIndex !== -1) {\n                const columns = updatedTables[tableIndex].columns || [];\n                const columnNameIndex = columns?.findIndex(col => col?.Column_Name === columnDetails?.Column_Name);\n\n                if (columnNameIndex !== -1) {\n                    columns[columnNameIndex].Order_By = value;\n                } else {\n                    columns.push({\n                        ...columnDetails,\n                        Order_By: value,\n                        isVisible: true\n                    });\n                }\n                updatedTables[tableIndex].columns = columns;\n            }\n\n            return { ...prev, tables: updatedTables };\n        });\n    };\n\n    const openPreviewDialog = () => {\n        const selectedTables = inputValues.tables?.reduce((tot, table) => (\n            tot += Boolean(table?.isChecked) ? 1 : 0\n        ), 0)\n        setInputValues(pre => ({\n            ...pre,\n            previewDialog: true,\n            tableJoins: (selectedTables > 1) ? (\n                Array.from({ length: Subraction(selectedTables, 1) }).map((_, i) => ({\n                    Join_First_Table_Id: '',\n                    Join_First_Table_Column: '',\n                    Join_Second_Table_Id: '',\n                    Join_Second_Table_Column: '',\n                }))\n            ) : []\n        }))\n    }\n\n    const onChangeJoining = (value, index, key) => {\n        setInputValues(pre => {\n            const updatedJoins = [...pre.tableJoins];\n            const obj = { ...updatedJoins[index] };\n            obj[key] = value;\n\n            if (key === 'Join_First_Table_Id') {\n                obj.Join_First_Table_Column = '';\n            }\n            if (key === 'Join_Second_Table_Id') {\n                obj.Join_Second_Table_Column = '';\n            }\n\n            // const repTableIndex = reportTables?.findIndex(table => isEqualNumber(table?.Table_Id, value));\n            // const defaultColumnIndex = reportTables[repTableIndex]?.Columns?.findIndex(column => isEqualNumber(column?.IS_Default, 1));\n            // const defaultColumn = defaultColumnIndex !== -1 ? reportTables[repTableIndex]?.Columns[defaultColumnIndex] : {};\n\n            // obj[colKey] = defaultColumn?.Column_Name || '';\n            if (obj?.Join_First_Table_Id === obj?.Join_Second_Table_Id) {\n                obj.Join_Second_Table_Id = ''\n            }\n            updatedJoins[index] = obj;\n\n            return {\n                ...pre,\n                tableJoins: [...updatedJoins]\n            }\n        })\n    }\n\n    const saveTemplate = () => {\n        const validateSet = new Set();\n        inputValues.tableJoins?.forEach(item => {\n            validateSet.add(item.Join_First_Table_Id);\n            validateSet.add(item.Join_Second_Table_Id);\n            return\n        })\n        if (validateSet.size !== (inputValues.tableJoins.length + 1)) {\n            return toast.error('Invalid table joins')\n        }\n\n        setInputValues(pre => ({ ...pre, previewDialog: false }))\n        fetchLink({\n            address: `reports/template`,\n            method: inputValues?.Report_Type_Id ? 'PUT' : 'POST',\n            bodyData: inputValues\n        }).then(data => {\n            if (data?.success) {\n                setInputValues(initialValue);\n                nav(-1)\n                toast.success(data.message)\n            } else {\n                toast.error(data.message)\n            }\n        }).catch(e => console.log(e))\n    }\n\n\n    return isEqualNumber(contextObj?.Add_Rights, 1) && (\n        <>\n            <Card>\n\n                <div className=\"p-3 border-bottom fa-16 fw-bold d-flex justify-content-between align-items-center\">\n                    <span className=\"text-primary text-uppercase ps-3\">{inputValues?.Report_Type_Id ? 'Modify Report Template' : 'Report Templates Creation'}</span>\n                    <Button variant='outlined' onClick={() => nav(-1)} startIcon={<KeyboardArrowLeft />}>Back</Button>\n                </div>\n\n                <CardContent>\n\n                    <div>\n                        <label className='w-100'>Report Name</label>\n                        <input\n                            type=\"text\"\n                            className='cus-inpt w-auto'\n                            value={inputValues.reportName}\n                            onChange={e => setInputValues({ ...inputValues, reportName: e.target.value })}\n                        />\n                    </div>\n\n                    {displaySelectedState}\n\n                    <Box className='d-flex flex-wrap mt-3' >\n\n                        <TabContext value={inputValues.currentTab}>\n                            <TabList\n                                indicatorColor='transparent'\n                                onChange={(e, newTab) => setInputValues({ ...inputValues, currentTab: newTab })}\n                                variant=\"scrollable\"\n                                scrollButtons=\"auto\"\n                                orientation=\"vertical\"\n                                allowScrollButtonsMobile\n                                sx={{ maxHeight: '400px' }}\n                            >\n                                {reportTables.map((table, index) => (\n                                    <Tab\n                                        key={index}\n                                        sx={inputValues.currentTab === table?.Table_Name ? { backgroundColor: '#c6d7eb' } : {}}\n                                        className={Boolean(inputValues.tables.find(t => t.Table_Name === table?.Table_Name)?.isChecked) ? 'text-success fw-bold' : 'text-primary'}\n                                        label={table?.AliasName}\n                                        value={table?.Table_Name}\n                                    />\n                                ))}\n                            </TabList>\n\n                            {reportTables.map((table, index) => (\n                                <TabPanel value={table?.Table_Name} className='flex-grow-1 p-3 border rounded-2' key={index}>\n\n                                    <div className='d-flex align-items-center mb-4 border-bottom'>\n                                        <Switch\n                                            checked={Boolean(inputValues.tables.find(t => t.Table_Name === table?.Table_Name)?.isChecked)}\n                                            onChange={e => handleTableCheck(table?.Table_Name, e.target.checked, table?.AliasName)}\n                                        />\n                                        <h6 className='fa-13 mb-0 fw-bold '>{table?.AliasName} TABLE</h6>\n                                    </div>\n\n                                    <div className='cus-grid'>\n                                        {table?.Columns?.map((colObj, colIndex) => (\n                                            <div key={colIndex}>\n                                                <Card className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${colIndex % 2 === 0 ? 'bg-light' : ''}`}>\n\n                                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\n                                                        <Switch\n                                                            checked={\n                                                                Boolean(colObj?.IS_Default) ||\n                                                                Boolean(\n                                                                    (inputValues.tables.find(t =>\n                                                                        t.Table_Name === table?.Table_Name\n                                                                    ))?.columns?.find(c => c.Column_Name === colObj?.Column_Name)?.isVisible\n                                                                )\n                                                            }\n                                                            disabled={Boolean(colObj?.IS_Default)}\n                                                            onChange={e => handleColumnCheck(table?.Table_Name, colObj, e.target.checked)}\n                                                        />\n                                                        <h6 className='fa-12 m-0 fw-bold'>{colObj?.Column_Name}</h6>\n                                                    </div>\n\n                                                    <input\n                                                        type='number'\n                                                        className={`p-1 border cus-inpt ${colIndex % 2 !== 0 ? 'bg-light' : ''}`}\n                                                        style={{ width: '80px' }}\n                                                        placeholder='Order'\n                                                        value={inputValues.tables.find(t =>\n                                                            t.Table_Name === table?.Table_Name\n                                                        )?.columns?.find(c => c.Column_Name === colObj?.Column_Name)?.Order_By || ''}\n                                                        onChange={e => handleOrderByChange(table?.Table_Name, colObj, e.target.value)}\n                                                    />\n                                                </Card>\n                                            </div>\n                                        ))}\n                                    </div>\n\n                                </TabPanel>\n                            ))}\n                        </TabContext>\n                    </Box>\n                </CardContent>\n                <hr className='mt-2 mb-0' />\n                <div className=\"p-3 d-flex justify-content-end\">\n                    <Tooltip title={columnsSelected <= 4 && 'Select Minimum 5 Columns'}>\n                        <span>\n                            <Button\n                                variant='outlined'\n                                startIcon={<RemoveRedEyeOutlined />}\n                                disabled={!inputValues?.reportName || tablesSelected === 0 || columnsSelected <= 4}\n                                onClick={\n                                    columnsSelected > 50\n                                        ? () => toast.warn('Maximum 50 Column limit exceeded')\n                                        : () => openPreviewDialog()\n                                }\n                            >\n                                Preview\n                            </Button>\n                        </span>\n                    </Tooltip>\n                </div>\n            </Card>\n\n            <Dialog\n                open={inputValues?.previewDialog}\n                onClose={() => setInputValues(pre => ({ ...pre, previewDialog: false }))}\n                fullScreen\n            >\n                <DialogTitle>Define Table Joins</DialogTitle>\n                <form onSubmit={e => {\n                    e.preventDefault();\n                    saveTemplate();\n                }}>\n                    <DialogContent>\n                        {displaySelectedState}\n                        <div className=\"table-responsive\">\n                            <table className=\"table\">\n                                <thead>\n                                    <tr>\n                                        {inputValues?.tables?.map((table, tabIndex) => (\n                                            <React.Fragment key={tabIndex}>\n                                                <th className=\"border fa-14 text-center\">{table?.AliasName} ( {table?.columns?.length} )</th>\n                                            </React.Fragment>\n                                        ))}\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        {inputValues?.tables?.map((table, tabIndex) => (\n                                            <React.Fragment key={tabIndex}>\n                                                <td className=\"border fa-13 text-center\">\n                                                    {table?.columns?.map((col, colInd) => (\n                                                        <p key={colInd}>{col?.Column_Name}</p>\n                                                    ))}\n                                                </td>\n                                            </React.Fragment>\n                                        ))}\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n                        {inputValues?.tables?.length > 1 && (\n                            <div className=\"p-2 cus-grid\">\n\n                                {inputValues?.tableJoins?.map((inputs, inputIndex) => {\n                                    return (\n                                        <div className=' p-2' key={inputIndex}>\n                                            <h5 className='border-bottom pb-2 text-center'>JOIN - {inputIndex + 1}</h5>\n                                            <div className=\"p-2 mt-3 border rounded-3 \">\n                                                <table className='w-100' >\n                                                    <tbody>\n                                                        <tr>\n                                                            <td className='fa-13 blue-text'>Table - 1</td>\n                                                            <td className='fa-13 '>\n                                                                <select\n                                                                    value={inputs?.Join_First_Table_Id}\n                                                                    className='cus-inpt '\n                                                                    onChange={e => onChangeJoining(e.target.value, inputIndex, 'Join_First_Table_Id')}\n                                                                    required\n                                                                >\n                                                                    <option value=\"\">Select</option>\n                                                                    {inputValues?.tables?.map((table, tableInd) => (\n                                                                        <option\n                                                                            key={tableInd}\n                                                                            value={table?.Table_Id}\n                                                                            disabled={\n                                                                                inputValues?.tableJoins?.find(fil =>\n                                                                                    isEqualNumber(fil.Join_First_Table_Id, table?.Table_Id)\n                                                                                )\n                                                                            }\n                                                                        >\n                                                                            {table?.AliasName}\n                                                                        </option>\n                                                                    ))}\n                                                                </select>\n                                                            </td>\n                                                        </tr>\n                                                        <tr>\n                                                            <td className='fa-13 blue-text'>Table - 2</td>\n                                                            <td className='fa-13 '>\n                                                                <select\n                                                                    value={inputs?.Join_Second_Table_Id}\n                                                                    className='cus-inpt '\n                                                                    onChange={e => onChangeJoining(e.target.value, inputIndex, 'Join_Second_Table_Id')}\n                                                                    required\n                                                                >\n                                                                    <option value=\"\">Select</option>\n                                                                    {inputValues?.tables?.map((table, tableInd) => (\n                                                                        <option\n                                                                            key={tableInd}\n                                                                            value={table?.Table_Id}\n                                                                            disabled={\n                                                                                isEqualNumber(inputs?.Join_First_Table_Id, table?.Table_Id)\n                                                                                // inputValues?.tableJoins?.find(fil =>\n                                                                                //     isEqualNumber(fil.Join_First_Table_Id, table?.Table_Id)\n                                                                                // )\n                                                                            }\n                                                                        >\n                                                                            {table?.AliasName}\n                                                                        </option>\n                                                                    ))}\n                                                                </select>\n                                                            </td>\n                                                        </tr>\n                                                        <tr>\n                                                            <td className='fa-13 blue-text'>Table - 1 Key</td>\n                                                            <td className='fa-13 '>\n                                                                <select\n                                                                    value={inputs?.Join_First_Table_Column}\n                                                                    className='cus-inpt '\n                                                                    onChange={e => onChangeJoining(e.target.value, inputIndex, 'Join_First_Table_Column')}\n                                                                    required\n                                                                >\n                                                                    <option value=\"\">Select</option>\n                                                                    {inputs?.Join_First_Table_Id && (\n                                                                        [...inputValues?.tables]?.find(table => (\n                                                                            isEqualNumber(table?.Table_Id, inputs?.Join_First_Table_Id)\n                                                                        ))?.columns?.map((joinKeys, joinInd) => isEqualNumber(joinKeys?.IS_Join_Key, 1) && (\n                                                                            <option key={joinInd} value={joinKeys?.Column_Name}>{joinKeys?.Column_Name}</option>\n                                                                        ))\n                                                                    )}\n                                                                </select>\n                                                            </td>\n                                                        </tr>\n                                                        <tr>\n                                                            <td className='fa-13 blue-text'>Table - 2 Key</td>\n                                                            <td className='fa-13 '>\n                                                                <select\n                                                                    value={inputs?.Join_Second_Table_Column}\n                                                                    className='cus-inpt '\n                                                                    onChange={e => onChangeJoining(e.target.value, inputIndex, 'Join_Second_Table_Column')}\n                                                                    required\n                                                                >\n                                                                    <option value=\"\">Select</option>\n                                                                    {inputs?.Join_Second_Table_Id && (\n                                                                        [...inputValues?.tables]?.find(table => (\n                                                                            isEqualNumber(table?.Table_Id, inputs?.Join_Second_Table_Id)\n                                                                        ))?.columns?.map((joinKeys, joinInd) => isEqualNumber(joinKeys?.IS_Join_Key, 1) && (\n                                                                            <option key={joinInd} value={joinKeys?.Column_Name}>{joinKeys?.Column_Name}</option>\n                                                                        ))\n                                                                    )}\n                                                                </select>\n                                                            </td>\n                                                        </tr>\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        )}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            onClick={() => setInputValues(pre => ({ ...pre, previewDialog: false }))}\n                            type='button'\n                            startIcon={<ArrowBackIosNewOutlined />}\n                        >\n                            Back\n                        </Button>\n                        <Button\n                            // onClick={() => setInputValues(pre => ({ ...pre, previewDialog: false }))}\n                            type='submit'\n                            startIcon={<Save />}\n                        >\n                            Submit\n                        </Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </>\n    );\n};\n\nexport default ReportTemplateCreation;\n"],"names":["ReportTemplateCreation","_inputValues$tables","_inputValues$tables2","_inputValues$tables4","_inputValues$tables5","_inputValues$tables6","_inputValues$tableJoi2","storage","JSON","parse","localStorage","getItem","nav","useNavigate","contextObj","useContext","MyContext","locationState","useLocation","state","initialValue","Report_Type_Id","reportName","tables","tableJoins","currentTab","previewDialog","createdBy","UserId","inputValues","setInputValues","useState","reportTables","setReportTables","tablesSelected","reduce","sum","obj","Boolean","Number","isChecked","columnsSelected","item","_item$columns","columns","colSum","colItem","isEqualNumber","isVisible","displaySelectedState","_jsx","className","children","_jsxs","useEffect","stateValue","ReportState","isValidObject","pre","_stateValue$Report_Ty","_stateValue$reportNam","_stateValue$tables","_stateValue$createdBy","fetchLink","address","then","data","success","catch","e","console","log","onChangeJoining","value","index","key","updatedJoins","Join_First_Table_Column","Join_Second_Table_Column","Join_First_Table_Id","Join_Second_Table_Id","Add_Rights","_Fragment","Card","Button","variant","onClick","startIcon","KeyboardArrowLeft","CardContent","type","onChange","target","Box","TabContext","TabList","indicatorColor","newTab","scrollButtons","orientation","allowScrollButtonsMobile","sx","maxHeight","map","table","_inputValues$tables$f","Tab","Table_Name","backgroundColor","find","t","label","AliasName","_inputValues$tables$f2","_table$Columns","TabPanel","Switch","checked","handleTableCheck","tableName","aliasName","prev","_reportTables$repTabl","_reportTables$repTabl2","_reportTables$repTabl3","updatedTables","tableIndex","findIndex","arraywithDefaultColumn","repTableIndex","defaultColumnIndex","Columns","column","IS_Default","defaultColumn","_reportTables$find","Order_By","push","Table_Id","filter","colObj","colIndex","_inputValues$tables$f3","_inputValues$tables$f4","_inputValues$tables$f5","_inputValues$tables$f6","_inputValues$tables$f7","_inputValues$tables$f8","concat","c","Column_Name","disabled","handleColumnCheck","columnDetails","columnNameIndex","fil","style","width","placeholder","handleOrderByChange","col","Tooltip","title","RemoveRedEyeOutlined","toast","warn","openPreviewDialog","_inputValues$tables3","selectedTables","tot","Array","from","length","Subraction","_","i","Dialog","open","onClose","fullScreen","DialogTitle","onSubmit","preventDefault","saveTemplate","_inputValues$tableJoi","validateSet","Set","forEach","add","size","error","method","bodyData","message","DialogContent","tabIndex","_table$columns","React","_table$columns2","colInd","inputs","inputIndex","_inputValues$tables7","_inputValues$tables8","_ref","_ref$find","_ref$find$columns","_ref2","_ref2$find","_ref2$find$columns","required","tableInd","_inputValues$tableJoi3","joinKeys","joinInd","IS_Join_Key","DialogActions","ArrowBackIosNewOutlined","Save"],"sourceRoot":""}