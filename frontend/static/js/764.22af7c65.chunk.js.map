{"version":3,"file":"static/js/764.22af7c65.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Sales/SalesReportComponent/DataSetDisplay.jsx"],"sourcesContent":["import React, { Fragment, useRef, useState } from 'react';\r\nimport { Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell, TableSortLabel, IconButton, Button } from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} Fied_Data\r\n * @property {'top'|'middle'|'bottom'} verticalAlign\r\n * @property {string} ColumnHeader\r\n * @property {0|1} isVisible\r\n * @property {'left'|'right'|'center'} align\r\n * @property {boolean} [isCustomCell]\r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props\r\n * @param {Array<Object>} props.dataArray\r\n * @param {Array<Column>} props.columns\r\n * @param {Function} [props.onClickFun]\r\n * @param {boolean} [props.isExpendable]\r\n * @param {React.ReactElement} [props.expandableComp]\r\n * @param {number} [props.tableMaxHeight]\r\n * @param {number} [props.initialPageCount]\r\n * @param {boolean} [props.EnableSerialNumber]\r\n * @param {'small'|'medium'|'large'} [props.CellSize]\r\n * @param {boolean} [props.disablePagination]\r\n * @param {boolean} [props.PDFPrintOption]\r\n * @param {boolean} [props.ExcelPrintOption]\r\n * @param {''} [props.title]\r\n */\r\n\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    } \r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({...o, Sno: i + 1}))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(false);\r\n    const tableHeight = showFullHeight ? ' max-content ' : tableMaxHeight;\r\n    const printRef = useRef(null);\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return NumberFormat(val)\r\n            case 'date':\r\n                return LocalDate(val);\r\n            case 'time':\r\n                return LocalTime(val);\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>{open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}</IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='fa-13 border-end text-center vtop'>{(rowsPerPage * page) + index + 1}</TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => (\r\n                        isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1)\r\n                    ) && (\r\n                            (Boolean(column?.isCustomCell) === false || !column.Cell) ? (\r\n                                Object.entries(row).map(([key, value]) => (\r\n                                    (\r\n                                        (column.Field_Name === key)\r\n                                        &&\r\n                                        (isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1))\r\n                                    ) && (\r\n                                        <TableCell\r\n                                            key={columnInd}\r\n                                            className={`fa-13 border-end ` + (\r\n                                                column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                            ) + (\r\n                                                    column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                                )}\r\n                                            onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                        >\r\n                                            {formatString(value, column?.Fied_Data)}\r\n                                        </TableCell>\r\n                                    )\r\n                                ))\r\n                            ) : (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`fa-13 border-end ` + (\r\n                                        column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : ''\r\n                                    ) + (\r\n                                            column.verticalAlign ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class : ' vctr '\r\n                                        )}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name })}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n                    )}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex align-items-center flex-wrap mb-2\">\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0 ps-3'>{title}</h6>}\r\n                {PDFPrintOption && (\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='primary'\r\n                        className='me-2'\r\n                        // onClick={handlePrint}\r\n                        onClick={() => generatePDF(dataArray, columns)}\r\n                        disabled={isEqualNumber(dataArray?.length, 0)}\r\n                        startIcon={<Download />}\r\n                    >Download PDF</Button>\r\n                )}\r\n                {ExcelPrintOption && (\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='success'\r\n                        className='me-2'\r\n                        onClick={() => exportToExcel(dataArray, columns)}\r\n                        disabled={isEqualNumber(dataArray?.length, 0)}\r\n                        startIcon={<Download />}\r\n                    >Download Excel</Button>\r\n                )}\r\n                <div>\r\n                    <label className=\"form-check-label p-1 pe-2\" htmlFor=\"fullHeight\">Max Height</label>\r\n                    <input\r\n                        className=\"form-check-input shadow-none\"\r\n                        style={{ padding: '0.7em' }}\r\n                        type=\"checkbox\"\r\n                        id=\"fullHeight\"\r\n                        checked={showFullHeight}\r\n                        onChange={e => setShowFullHeight(e.target.checked)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <TableContainer component={Paper} sx={{ maxHeight: tableHeight }} ref={printRef}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell className='fa-13 fw-bold border-end border-top text-center' style={{ backgroundColor: '#EDF0F7' }}>\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fa-13 fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`${(column.ColumnHeader || column?.Field_Name) ? ' fa-13 fw-bold border-end border-top p-2 appFont ' : ' p-0 '} ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            style={{ backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div className=\"p-2 pb-0\">\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n};\r\n\r\n\r\nexport default FilterableTable;","import React from 'react';\r\nimport { checkIsNumber } from '../../../Components/functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Paper, Box, Card, Switch } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, Settings } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport FilterableTable from '../../../Components/filterableTable2';\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DisplayArrayData = ({ dataArray = [], columns = [], ExpandableComp, enableFilters = false }) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        columnSettings: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        const colWithDataTypes = columns.map((keys, index) => ({\r\n            Field_Name: keys?.Column_Name,\r\n            Fied_Data: keys?.Data_Type,\r\n            isVisible: index <= 7 ? 1 : 0,\r\n            align: 'center',\r\n            OrderBy: index + 1\r\n        }))\r\n        setDispColmn(colWithDataTypes);\r\n    }, [columns])\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...dispColmn].sort((a, b) => a.OrderBy - b.OrderBy);\r\n    }, [dispColmn]);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleExportRows = (rows) => {\r\n        const csv = generateCsv(csvConfig)(rows);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleExportData = () => {\r\n        const csv = generateCsv(csvConfig)(dataArray);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of dispColmn) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(showData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={handleExportData}\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    All Data\r\n                </Button>\r\n                <Button\r\n                    disabled={filteredData.length === 0}\r\n                    className={enableFilters ? '' : 'd-none'}\r\n                    onClick={() =>\r\n                        handleExportRows(filteredData)\r\n                    }\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    Filtered Rows\r\n                </Button>\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className={enableFilters ? \"d-md-none d-inline\" : 'd-none'}\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n\r\n            <div className=\"row \">\r\n\r\n                <div className={enableFilters ? \"col-xxl-10 col-lg-9 col-md-8\" : ''}>\r\n                    <div className=\"p-2\">\r\n                        <FilterableTable\r\n                            dataArray={showData}\r\n                            columns={sortedColumns}\r\n                            isExpendable={ExpandableComp ? true : false}\r\n                            expandableComp={ExpandableComp ? ExpandableComp : undefined}\r\n                            tableMaxHeight={650}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {enableFilters && (\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, columnSettings: true }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                        <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                            {dispColmn.map((column, ke) => (\r\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                    {renderFilter(column)}\r\n                                </div>\r\n                            ))}\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <span>\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {dispColmn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.columnSettings}\r\n                onClose={() => setDialogs(pre => ({ ...pre, columnSettings: false }))}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => {\r\n\r\n                            const displayedColumn = dispColmn.find(oo => oo.Field_Name === o?.Column_Name)\r\n\r\n                            return (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                    <Card\r\n                                        component={Paper}\r\n                                        className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                    >\r\n                                        <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                            <Switch\r\n                                                checked={Boolean(displayedColumn?.isVisible)}\r\n                                                onChange={e =>\r\n                                                    setDispColmn(prevColumns =>\r\n                                                        prevColumns.map(oo =>\r\n                                                            oo.Field_Name === o?.Column_Name\r\n                                                                ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                                : oo\r\n                                                        )\r\n                                                    )}\r\n                                            />\r\n\r\n                                            <h6 className='fa-13 mb-0 fw-bold '>{o?.Column_Name}</h6>\r\n                                        </div>\r\n                                        <input\r\n                                            type='number'\r\n                                            value={checkIsNumber(displayedColumn?.OrderBy) ? displayedColumn?.OrderBy : ''}\r\n                                            onChange={e =>\r\n                                                setDispColmn(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === displayedColumn?.Field_Name\r\n                                                            ? { ...oo, OrderBy: e.target.value }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                            label={'Order Value'}\r\n                                            className='mt-2 p-1 border-0 cus-inpt'\r\n                                            style={{ width: '80px' }}\r\n                                            placeholder='Order'\r\n                                        />\r\n                                    </Card>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {/* <Button onClick={() => setColumns(columnsInitialValue)} variant=\"outlined\">Reset</Button> */}\r\n                    <Button onClick={() => setDialogs(pre => ({ ...pre, columnSettings: false }))} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayArrayData;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","FilterableTable","_ref","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","title","PDFPrintOption","ExcelPrintOption","page","setPage","useState","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","printRef","useRef","columnAlign","type","class","columnVerticalAlign","sortedData","length","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref2","open","setOpen","fontSize","_jsxs","Fragment","children","TableRow","_jsx","TableCell","className","IconButton","size","onClick","pre","KeyboardArrowUp","sx","KeyboardArrowDown","columnInd","_columnAlign$find2","_columnVerticalAlign$2","isEqualNumber","Boolean","align","find","verticalAlign","Object","entries","_ref3","_columnAlign$find","_columnVerticalAlign$","value","console","log","Fied_Data","colSpan","Number","useReactToPrint","content","current","Button","variant","color","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","disabled","startIcon","Download","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","htmlFor","style","padding","id","checked","onChange","target","TableContainer","component","Paper","maxHeight","ref","Table","stickyHeader","TableHead","backgroundColor","ke","isColumnVisible","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find3","_column$Field_Name","_columnAlign$find4","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","undefined","csvConfig","mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","ExpandableComp","enableFilters","dispColmn","setDispColmn","filters","setFilters","filteredData","setFilteredData","showData","keys","dialogs","setDialogs","columnSettings","useEffect","colWithDataTypes","Column_Name","Data_Type","OrderBy","sortedColumns","useMemo","applyFilters","handleFilterChange","prevFilters","filtered","min","max","item","start","end","dateValue","Date","isArray","_filters$column$Field","includes","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","placeholder","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","selected","Checkbox","marginRight","isOptionEqualToValue","opt","renderInput","params","TextField","label","_Fragment","Box","display","gap","flexWrap","handleExportData","csv","generateCsv","download","FileDownload","handleExportRows","FilterAlt","Tooltip","Settings","FilterAltOff","overflow","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","DialogActions","displayedColumn","oo","Card","Switch","prevColumns","checkIsNumber","width"],"sourceRoot":""}