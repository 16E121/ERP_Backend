{"version":3,"file":"static/js/2488.016a911b.chunk.js","mappings":"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","sources":["Pages/Tasks/newTasksPage.jsx","Pages/Tasks/taskParameters.jsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/ExpandLess.js","../node_modules/@mui/icons-material/esm/ExpandMore.js"],"sourcesContent":["import { MyContext } from \"../../Components/context/contextProvider\";\nimport { useContext, useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport '../common.css'\nimport { Edit, Delete, CheckBoxOutlineBlank, CheckBox } from '@mui/icons-material';\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle, Checkbox, TextField, Autocomplete } from '@mui/material';\nimport DataTable from \"react-data-table-component\";\nimport TaskParametersComp from \"./taskParameters\";\nimport { fetchLink } from '../../Components/fetchComponent';\nimport { checkIsNumber } from '../../Components/functions'\n\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\n\n\nconst TaskMaster = () => {\n    const localData = localStorage.getItem(\"user\");\n    const parseData = JSON.parse(localData);\n    const initialValue = {\n        Task_Id: \"\",\n        Task_Name: \"\",\n        Task_Desc: \"\",\n        Task_Group_Id: 0,\n        Entry_By: parseData?.UserId,\n        Entry_Date: \"\",\n        Update_By: '',\n        Update_Date: \"\",\n        Task_Parameters: [],\n    }\n    const [taskData, setTaskData] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [taskGroup, setTaskGroup] = useState([]);\n    const [taskParameters, setTaskParameters] = useState([]);\n\n    const [reload, setReload] = useState(false);\n    const { contextObj } = useContext(MyContext);\n    const [screen, setScreen] = useState(true);\n    const [inputValue, setInputValue] = useState(initialValue);\n    const [dialog, setDialog] = useState(false);\n    const [filterInput, setFilterInput] = useState('');\n\n    useEffect(() => {\n        fetchLink({\n            address: `taskManagement/tasks?Company_id=${parseData?.Company_id}`\n        }).then(data => {\n            if (data.success) {\n                setTaskData(data.data)\n            }\n        }).catch(e => console.error(e))\n\n    }, [reload])\n\n    useEffect(() => {\n\n        fetchLink({\n            address: `masters/taskType/dropDown`\n        }).then(data => {\n            if (data.success) {\n                setTaskGroup(data.data)\n            }\n        }).catch(e => console.error(e))\n\n        fetchLink({\n            address: `taskManagement/parameters`\n        }).then(data => {\n            if (data.success) {\n                setTaskParameters(data.data)\n            }\n        }).catch(e => console.error(e))\n\n    }, [])\n\n    useEffect(() => {\n        const filteredResults = [...taskData].filter(item => {\n            return Object.values(item).some(value =>\n                String(value).toLowerCase().includes(filterInput.toLowerCase())\n            );\n        });\n        \n        setFilteredData(filteredResults);\n    }, [filterInput, taskData])\n\n    const switchScreen = (rel) => {\n        setInputValue(initialValue);\n        setScreen(!screen);\n        if (rel) {\n            setReload(!reload)\n        }\n    }\n\n    const handleEdit = (row) => {\n        setInputValue(row);\n        setScreen(!screen);\n    }\n\n    const handleDelete = (row) => {\n        setInputValue(row);\n        setDialog(true);\n    }\n\n    const closeDialog = () => {\n        setInputValue(initialValue);\n        setDialog(false);\n    }\n\n    const tasksColumn = [\n        {\n            name: 'Task',\n            selector: (row) => row?.Task_Name,\n            sortable: true,\n        },\n        {\n            name: 'Task Group',\n            selector: (row) => row?.Task_Group,\n            sortable: true,\n        },\n        {\n            name: 'Task Describtion',\n            selector: (row) => row?.Task_Desc,\n            sortable: true,\n            width: '170px'\n        },\n        {\n            name: 'Created At',\n            selector: (row) => new Date(row?.Entry_Date),\n            cell: (row) => {\n                return new Date(row?.Entry_Date).toLocaleDateString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric' })\n            },\n            sortable: true\n        },\n        {\n            name: 'Actions',\n            cell: (row) => (\n                <div>\n                    {Number(contextObj?.Edit_Rights) === 1 && (\n                        <IconButton onClick={() => handleEdit(row)}>\n                            <Edit />\n                        </IconButton>\n                    )}\n                    {Number(contextObj?.Delete_Rights) === 1 && (\n                        <IconButton onClick={() => handleDelete(row)}>\n                            <Delete sx={{ color: '#FF6865' }} />\n                        </IconButton>\n                    )}\n                </div>\n            ),\n        },\n    ];\n\n    const postAndPutTask = async () => {\n        const paramArr = inputValue?.Task_Parameters?.map(param => ({\n            ...param,\n            Param_Id: param?.Paramet_Id\n        })) || [];\n\n        const PostObj = {\n            ...inputValue,\n            Task_Parameters: paramArr\n        }\n        if (inputValue?.Task_Name && inputValue?.Task_Desc) {\n            fetchLink({\n                address: `taskManagement/tasks`,\n                method: checkIsNumber(PostObj.Task_Id) ? 'PUT' : 'POST',\n                bodyData: PostObj\n            }).then(data => {\n                if (data.success) {\n                    toast.success(data.message);\n                    switchScreen(true);\n                } else {\n                    toast.error(data.message);\n                }\n            }).catch(e => console.error(e))\n           \n        } else {\n            toast.error('Enter Task Name and Describtion')\n        }\n    }\n\n    const deleteTask = async () => {\n        if (inputValue?.Task_Id && Number(contextObj.Delete_Rights) === 1) {\n            fetchLink({\n                address: `taskManagement/tasks`,\n                method: 'DELETE',\n                bodyData: { Task_Id: inputValue?.Task_Id }\n            }).then(data => {\n                if (data.success) {\n                    toast.success(data.message);\n                    setReload(!reload);\n                    closeDialog();\n                } else {\n                    toast.error(data.message);\n                }\n            }).catch(e => console.error(e))\n        }\n    }\n\n    function handleSearchChange(event) {\n        const term = event.target.value;\n        setFilterInput(term);\n    }\n\n    return (\n        <>\n            <TaskParametersComp />\n\n            <div className=\"card\">\n\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\n                    <div className=\"fa-15 flex-grow\">\n                        {screen ? 'Task List' : checkIsNumber(inputValue.Task_Id) ? 'Edit Task' : 'Create Task'}\n                    </div>\n                    <button onClick={() => { switchScreen(false) }} className=\"btn btn-primary rounded-5 px-3 py-1 fa-13 shadow\">\n                        {screen ? 'Create Task' : 'Back'}\n                    </button>\n                </div>\n\n                <div className=\"card-body p-0 overflow-hidden rounded-bottom-3\">\n                    {screen ? (\n                        <>\n                            <div className=\"d-flex justify-content-end\">\n                                <div className=\"col-md-4 p-2\">\n                                    <input\n                                        type=\"search\"\n                                        value={filterInput}\n                                        className=\"cus-inpt\"\n                                        placeholder=\"Search\"\n                                        onChange={handleSearchChange}\n                                    />\n                                </div>\n                            </div>\n                            <DataTable\n                                columns={tasksColumn}\n                                data={filteredData && filteredData.length ? filteredData : filterInput === '' ? taskData : []}\n                                pagination\n                                highlightOnHover={true}\n                                fixedHeader={true}\n                                fixedHeaderScrollHeight={'68vh'}\n                            />\n                        </>\n                    ) : (\n                        <div className=\"row px-3 py-2\">\n\n                            <div className=\"col-md-4 p-2\">\n                                <label>Task Name</label>\n                                <input\n                                    maxLength={150}\n                                    onChange={e => setInputValue({ ...inputValue, Task_Name: e.target.value })}\n                                    value={inputValue?.Task_Name}\n                                    placeholder=\"ex: File Checking\"\n                                    className=\"cus-inpt\" />\n                            </div>\n\n                            <div className=\"col-md-4 p-2\">\n                                <label>Task Group</label>\n                                <select\n                                    value={inputValue.Task_Group_Id}\n                                    className=\"cus-inpt\"\n                                    onChange={e => setInputValue({ ...inputValue, Task_Group_Id: e.target.value })}>\n                                    <option value={0} disabled>- select -</option>\n                                    {taskGroup?.map((o, i) => (\n                                        Number(o?.Task_Type_Id) !== 0 &&\n                                        <option key={i} value={o?.Task_Type_Id}>\n                                            {o?.Task_Type}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n\n                            <div className=\"col-md-4 p-2\">\n                                <label>Base Task</label>\n                                <select\n                                    value={inputValue.Under_Task_Id}\n                                    className=\"cus-inpt\"\n                                    onChange={e => setInputValue({ ...inputValue, Under_Task_Id: e.target.value })}>\n                                    <option value={0}>Primary</option>\n                                    {taskData?.map((o, i) => (\n                                        <option key={i} value={o?.Task_Id}>\n                                            {o?.Task_Name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n\n                            <div className=\"col-12\">\n                                <label>Task Describtion</label>\n                                <textarea\n                                    className=\"cus-inpt\"\n                                    value={inputValue.Task_Desc}\n                                    rows=\"5\"\n                                    onChange={e => setInputValue({ ...inputValue, Task_Desc: e.target.value })} />\n                            </div>\n\n                            <div className=\"col-md-12 p-2\">\n                                <Autocomplete\n                                    multiple\n                                    id=\"checkboxes-tags-demo\"\n                                    options={[...taskParameters?.map(o => ({ ...o, Default_Value: '' }))]}\n                                    disableCloseOnSelect\n                                    getOptionLabel={(option) => option?.Paramet_Name + ' - ' + option?.Paramet_Data_Type}\n                                    value={inputValue?.Task_Parameters || []}\n                                    onChange={(f, e) => setInputValue({ ...inputValue, Task_Parameters: e })}\n                                    renderOption={(props, option, { selected }) => (\n                                        <li {...props}>\n                                            <Checkbox\n                                                icon={icon}\n                                                checkedIcon={checkedIcon}\n                                                style={{ marginRight: 8 }}\n                                                checked={selected}\n                                            />\n                                            {option?.Paramet_Name + ' - ' + option?.Paramet_Data_Type}\n                                        </li>\n                                    )}\n                                    className=\"pt-2\"\n                                    isOptionEqualToValue={(opt, val) => Number(opt?.Paramet_Id) === Number(val?.Paramet_Id)}\n                                    renderInput={(params) => (\n                                        <TextField {...params} label=\"Task Prarameters\" placeholder=\"Choose Task Parameters\" />\n                                    )}\n                                />\n                            </div>\n\n                            {inputValue?.Task_Parameters?.map((param, index) => (\n                                <div key={index} className=\"col-md-4 p-2\">\n                                    <label className=\"mb-2\">{param?.Paramet_Name}</label>\n                                    <input\n                                        type={param?.Paramet_Data_Type || 'text'}\n                                        className=\"cus-inpt\"\n                                        onChange={(e) => {\n                                            const updatedDetString = [...inputValue.Task_Parameters];\n                                            updatedDetString[index] = {\n                                                ...updatedDetString[index],\n                                                Default_Value: e.target.value,\n                                            };\n                                            setInputValue({ ...inputValue, Task_Parameters: updatedDetString });\n                                        }}\n                                        value={param?.Default_Value}\n                                        placeholder=\"Default Value\"\n                                    />\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                </div>\n                {!screen && (\n                    <div className=\"card-body text-end\">\n                        <button\n                            className=\"btn btn-light rounded-5 px-3 me-2\"\n                            onClick={() => switchScreen(false)}>\n                            Cancel\n                        </button>\n                        <button\n                            className=\"btn btn-primary rounded-5 px-3\"\n                            onClick={postAndPutTask}>\n                            {checkIsNumber(inputValue.Task_Id) ? \"Update Task\" : 'Create Task'}\n                        </button>\n                    </div>\n                )}\n            </div>\n\n            <Dialog\n                open={dialog}\n                onClose={closeDialog}\n                aria-labelledby=\"create-dialog-title\"\n                aria-describedby=\"create-dialog-description\">\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Confirmation</DialogTitle>\n                <DialogContent className=\"p-4\">\n                    Do you want to delete the\n                    <span className=\"text-primary\">{\" \" + inputValue?.Task_Name + \" \"}</span>\n                    Task ?\n                </DialogContent>\n                <DialogActions>\n                    <button\n                        className=\"btn btn-light rounded-5 px-3 me-1\"\n                        onClick={closeDialog}>\n                        Cancel\n                    </button>\n                    <button\n                        className=\"btn btn-primary rounded-5 px-3\"\n                        onClick={deleteTask}>\n                        Delete\n                    </button>\n                </DialogActions>\n            </Dialog>\n\n        </>\n    ) \n}\n\nexport default TaskMaster","import { IconButton, Dialog, DialogActions, DialogContent, DialogTitle, Button, Collapse } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { toast } from \"react-toastify\";\nimport { ExpandLess, ExpandMore } from '@mui/icons-material';\nimport { fetchLink } from '../../Components/fetchComponent';\n\nconst TaskParametersComp = ({ isOpened, disableCollapse }) => {\n    const initialValue = {\n        Paramet_Id: '',\n        Paramet_Name: '',\n        Paramet_Data_Type: '',\n    }\n    const [parameters, setParameters] = useState([])\n    const [addDialog, setAddDialog] = useState(false);\n    const [deleteDialog, setDeleteDialog] = useState(false);\n    const [inputValue, setInputValue] = useState(initialValue);\n    const [reload, setReload] = useState(false);\n    const [open, setOpen] = useState(isOpened ? true : false);\n\n    const [filterInput, setFilterInput] = useState('');\n    const [filteredData, setFilteredData] = useState([]);\n\n    useEffect(() => {\n        fetchLink({\n            address: `taskManagement/parameters`\n        }).then(data => {\n            if (data.success) {\n                setParameters(data.data)\n            }\n        })\n            .catch(e => console.error(e))\n\n    }, [reload])\n\n    const AddParameter = () => {\n        fetchLink({\n            address: `taskManagement/parameters`,\n            method: 'POST',\n            bodyData: inputValue\n        }).then(data => {\n            if (data.success) {\n                toast.success(data.message);\n                setReload(!reload)\n            } else {\n                toast.error(data.message)\n            }\n        })\n            .catch(e => console.error(e))\n            .finally(CloseAddDialog)\n    }\n\n    const DeleteParameter = () => {\n        fetchLink({\n            address: `taskManagement/parameters`,\n            method: 'DELETE',\n            bodyData: { Paramet_Id: inputValue.Paramet_Id }\n        }).then(data => {\n            if (data.success) {\n                toast.success(data.message);\n                setReload(!reload)\n            } else {\n                toast.error(data.message)\n            }\n        })\n            .catch(e => console.error(e))\n            .finally(closeDeleteConfirmationDialog)\n    }\n\n    const CloseAddDialog = () => {\n        setAddDialog(false);\n        setInputValue(initialValue)\n    }\n\n    // const openDeleteConfirmationDialog = (obj) => {\n    //     setInputValue(obj);\n    //     setDeleteDialog(true);\n    // }\n\n    const closeDeleteConfirmationDialog = () => {\n        setInputValue(initialValue);\n        setDeleteDialog(false)\n    }\n\n    function handleSearchChange(event) {\n        const term = event.target.value;\n        setFilterInput(term);\n        const filteredResults = parameters.filter(item => {\n            return Object.values(item).some(value =>\n                String(value).toLowerCase().includes(term.toLowerCase())\n            );\n        });\n        setFilteredData(filteredResults);\n    }\n\n    return (\n        <>\n            <div className=\"card mb-3\">\n\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\n                    <div className=\"flex-grow-1 mb-0\">\n                        {!disableCollapse && (\n                            <IconButton size='small' onClick={() => setOpen(!open)}>\n                                {open ? <ExpandLess style={{ fontSize: '18px', color: 'black' }} /> : <ExpandMore style={{ fontSize: '18px', color: 'black' }} />}\n                            </IconButton>\n                        )}\n                        Task Parameters\n                    </div>\n                    <button onClick={() => setAddDialog(true)} className=\"btn btn-primary rounded-5 px-3 py-1 fa-13 shadow\">\n                        Create Parameter\n                    </button>\n                </div>\n\n                <Collapse in={open} unmountOnExit>\n\n                    <div className=\"card-body\" style={{ maxHeight: '40vh', overflowY: 'scroll' }}>\n\n                        <div className=\"row flex-row-reverse\">\n                            <div className=\"col-md-4 pb-2\">\n                                <input\n                                    type=\"search\"\n                                    value={filterInput}\n                                    className=\"cus-inpt\"\n                                    placeholder=\"Search\"\n                                    onChange={handleSearchChange}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"table-responsive\">\n                            <table className=\"table\">\n                                <thead>\n                                    <tr>\n                                        <th className='border fa-14'>Sno</th>\n                                        <th className='border fa-14'>Parameter</th>\n                                        <th className='border fa-14'>Data Type</th>\n                                        {/* <th className='border fa-14'>Action</th> */}\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {(filteredData.length > 0 ? filteredData : filterInput === '' ? parameters : [])?.map((o, i) => (\n                                        <tr key={i}>\n                                            <td className='border fa-14'>{i + 1}</td>\n                                            <td className='border fa-14'>{o?.Paramet_Name}</td>\n                                            <td className='border fa-14'>{o?.Paramet_Data_Type}</td>\n                                            {/* <td className='border fa-14'>\n                                                <IconButton onClick={() => openDeleteConfirmationDialog(o)}>\n                                                    <Delete sx={{color: 'red', fontSize: '16px'}} />\n                                                </IconButton>\n                                            </td> */}\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                </Collapse>\n            </div>\n\n            <Dialog\n                open={addDialog}\n                onClose={CloseAddDialog}\n                maxWidth='sm' fullWidth>\n                <DialogTitle>Create Task Parameters</DialogTitle>\n                <form onSubmit={e => {\n                    e.preventDefault();\n                    AddParameter()\n                }}>\n                    <DialogContent>\n                        <div className=\"table-responsive\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Name</td>\n                                        <td className=\"border-0 fa-14\">\n                                            <input\n                                                className='cus-inpt'\n                                                value={inputValue?.Paramet_Name} required\n                                                onChange={e => setInputValue({ ...inputValue, Paramet_Name: e.target.value })} />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"border-0 fa-14\">Data Type</td>\n                                        <td className=\"border-0 fa-14\">\n                                            <select\n                                                className='cus-inpt'\n                                                value={inputValue?.Paramet_Data_Type} required\n                                                onChange={e => setInputValue({ ...inputValue, Paramet_Data_Type: e.target.value })}\n                                            >\n                                                <option value=\"\" disabled>Select Data Type</option>\n                                                <option value='number'>number</option>\n                                                <option value='text'>text</option>\n                                                <option value='date'>date</option>\n                                            </select>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={CloseAddDialog} type='button'>cancel</Button>\n                        <Button type='submit'>Create Parameter</Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n\n            <Dialog\n                open={deleteDialog}\n                onClose={closeDeleteConfirmationDialog}\n            >\n                <DialogTitle>Confirm Delete</DialogTitle>\n                <DialogContent>\n                    Do you want to delete the\n                    {inputValue?.Paramet_Name && <span className='text-primary px-1'>{inputValue?.Paramet_Name}</span>}\n                    Parameter?\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDeleteConfirmationDialog} >Cancel</Button>\n                    <Button onClick={DeleteParameter}>Delete</Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nexport default TaskParametersComp;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2m-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z\"\n}), 'CheckBox');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2\"\n}), 'CheckBoxOutlineBlank');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\"\n}), 'ExpandLess');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n}), 'ExpandMore');"],"names":["icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","TaskMaster","_inputValue$Task_Para2","localData","localStorage","getItem","parseData","JSON","parse","initialValue","Task_Id","Task_Name","Task_Desc","Task_Group_Id","Entry_By","UserId","Entry_Date","Update_By","Update_Date","Task_Parameters","taskData","setTaskData","useState","filteredData","setFilteredData","taskGroup","setTaskGroup","taskParameters","setTaskParameters","reload","setReload","contextObj","useContext","MyContext","screen","setScreen","inputValue","setInputValue","dialog","setDialog","filterInput","setFilterInput","useEffect","fetchLink","address","concat","Company_id","then","data","success","catch","e","console","error","filteredResults","filter","item","Object","values","some","value","String","toLowerCase","includes","switchScreen","rel","closeDialog","tasksColumn","name","selector","row","sortable","Task_Group","width","Date","cell","toLocaleDateString","day","month","year","_jsxs","children","Number","Edit_Rights","IconButton","onClick","handleEdit","Edit","Delete_Rights","handleDelete","Delete","sx","color","_Fragment","TaskParametersComp","className","checkIsNumber","type","placeholder","onChange","event","term","target","DataTable","columns","length","pagination","highlightOnHover","fixedHeader","fixedHeaderScrollHeight","maxLength","disabled","map","o","i","Task_Type_Id","Task_Type","Under_Task_Id","rows","Autocomplete","multiple","id","options","Default_Value","disableCloseOnSelect","getOptionLabel","option","Paramet_Name","Paramet_Data_Type","f","renderOption","props","_ref","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","Paramet_Id","renderInput","params","TextField","label","param","index","updatedDetString","async","_inputValue$Task_Para","paramArr","Param_Id","PostObj","method","bodyData","toast","message","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","_ref2","isOpened","disableCollapse","parameters","setParameters","addDialog","setAddDialog","deleteDialog","setDeleteDialog","setOpen","CloseAddDialog","closeDeleteConfirmationDialog","size","ExpandLess","ExpandMore","Collapse","in","unmountOnExit","maxHeight","overflowY","maxWidth","fullWidth","onSubmit","preventDefault","finally","required","Button","DeleteParameter","createSvgIcon","d"],"sourceRoot":""}